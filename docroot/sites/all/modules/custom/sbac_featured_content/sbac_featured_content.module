<?php
/**
 * @file
 * Code for the SBAC Featured Content Module.
 */

include_once 'sbac_featured_content.features.inc';

/**
 * Implements hook_menu().
 */
function sbac_featured_content_menu() {
  $items = array();

  $items['sbac-featured-content'] = array(
    'title' => 'Just using this for Dev',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'sbac_featured_content',
    'access arguments' => array('access content'),    
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function current_posts_block_info() {
  $blocks['featured_content'] = array(
    // The name that will appear in the block list.
    'info' => t('Featured Content'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function current_posts_block_view($delta = '') {
  switch ($delta) {
    case 'featured_content':
      $block['subject'] = t('Featured Content');
      $block['content'] = sbac_featured_content();  
    }
      
  return $block;
}
  
function sbac_featured_content(){
  global $user;
  $variables = array();
  $variables['featured_content'] = '';
  
  if(user_access('flag-featured-node')){
      $variables['edit'] = l('Edit Features','/admin/help-topics');
  }

  $featured_content = sbac_featured_content_flagged();
  
  foreach($featured_content as $content){
     $variables['featured_content'] .= $content;
  } 
  
  return theme('sbac_featured_content',$variables);
}

/**
 * Implements hook_theme().
 * 
 * Identify templates for each featured entity type
 */
function sbac_featured_content_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['sbac_featured_content'] = array(
    'render element' => 'content',
    'template' => 'sbac-featured-content',
    'path' => drupal_get_path('module', 'sbac_featured_content') . '/templates',
   );
  $theme['sbac_featured_resource'] = array(
    'render element' => 'content',
    'template' => 'sbac-featured_resource',
    'path' => drupal_get_path('module', 'sbac_featured_content') . '/templates',
   );
  return $theme;
}

function sbac_featured_content_preprocess_page(&$variables) {
}


/*
 * Build featured resource
 */
function sbac_featured_resource($node){
  $variables = array();
  $variables['test'] = 'Featured Resource TPL is returning';

  //dpm($node->field_thumbnail_uri['und'][0]['value']);
  // Retrieve image
  $img_data = _sbac_featured_resource_image($node);
  //dpm($img_data);
  $variables['link'] = drupal_get_path_alias('node/' . $node->nid);
  $variables['thumbnail'] = $img_data['image'];
  $variables['title'] = $node->title;
  $variables['summary'] = truncate_utf8($node->field_alt_body['und'][0]['value'], 300, TRUE, TRUE, 1);
  $grades = sbac_resource_terms($node->field_grades['und']);
  $variables['grades'] = $grades;
  $attributes = sbac_resource_terms($node->field_attributes['und']);
  $variables['formative_process'] = $attributes;
  return theme('sbac_featured_resource',$variables);
}

/*
 * Build Flagged Content Array
 * 
 * Retreives all flagged enttities, and builds an array of featured entities
 * with respective templates
 */
function sbac_featured_content_flagged(){
  $featured_content = array();
  $limit = 1;
  $query = db_select('flagging', 'f');
    $query->leftJoin('draggableviews_structure', 'dv', 'f.entity_id = dv.entity_id');
    $query->fields('f', array('entity_type', 'entity_id'));
    $query->fields('dv', array('entity_id', 'weight'));
    $query->orderBy('dv.weight','ASC');
    $query->range('0','1'); // UPDATE WHEN TURNING INTO CAROUSEL
  $flags = $query->execute()->fetchAll();
  foreach($flags as $flagged){
    switch ($flagged->entity_type) {
      case 'node':
        $node = node_load($flagged->entity_id);
        switch ($node->type) {
          case "resource":
            $featured_content[] = sbac_featured_resource($node);
            break;

          default:
            break;
        }
        break;

      default:
        break;
    }
  }
  return $featured_content;
}

/* 
 * Retrieve Resource Attributes
 * 
 * @terms array()
 */

function sbac_resource_terms($tids){
  $term_names = '';
  foreach($tids as $termID){
    $term = taxonomy_term_load($termID['tid']);
    $term_names .= '<li>' . $term->name . '</li>';
  }
  $terms = '<ul class="featured-content-terms featured-content-' . $term->vocabulary_machine_name . '">';
  $terms .= $term_names;
  $terms .= '</ul>';
  return $terms;
}

/**
 * Returns the image icon.
 *
 * @param $fields
 * @param $view_display
 *
 * @return string
 */
function _sbac_featured_resource_image($node, $view_display = 'grid') {
  $default_img = 'no_img';
  if(isset($node->field_resource_thumbnail['und'][0]['uri'])) {
    $file = file_load($node->field_resource_thumbnail['und'][0]['fid']);
    file_get_contents(image_style_url('landing_page_featured_resource',$file->uri));
    $url = image_style_url('landing_page_featured_resource',$file->uri);
    $uri = image_style_path('landing_page_featured_resource',$file->uri);
  }
  elseif(isset($node->field_html5['und'][0]['value']) && $node->field_html5['und'][0]['value']){
    $html5_item = sbac_media_load_html5_item($node->nid);
    $node->document['html5'] = $html5_item;
    $default_file = 'public://no-preview-html5.png';
    if (isset($node->document['html5'])) {
      $directory = "public://html5_thumbnails/" . floor($nid / 32000) . "/" . $nid;
      $directory_thumbnail_uri = $directory . '/thumbnail.png';
      $directory_thumbnail_path = drupal_realpath($directory) . '/thumbnail.png';
      if (file_exists($directory_thumbnail_path)) {
        $uri = $directory_thumbnail_uri;
        $url = file_create_url($directory_thumbnail_uri);
      }
    }
    $uri = $directory_thumbnail_uri;
  }
  elseif(isset($node->field_thumbnail_uri['und'][0]['value'])){
    $locations = explode('::', $node->field_thumbnail_uri['und'][0]['value']);
    if (file_exists($locations[0] && exif_imagetype($locations[0]))) {
      $uri = $locations[0];
    }
    else{
      $uri = $default_img;
      $url = $default_img;
    }
  }
  else {
    $uri = $default_img;
    $url = $default_img;
  }
  if ($uri != 'no_img' && $url != 'no_img') {
    $image_url = file_create_url($uri);
    $variables['image'] = $image_url;
    $variables['mime-type'] = file_get_mimetype($url);
    $variables['file-type-icon'] = 'document';
  }
  if ($uri != 'no_img' && $url != 'no_img') {
    return $variables;
  }
  else {
    return NULL;
  }
}
