<?php
/**
 * @file
 * Code for the SBAC Self Registration feature.
 */

include_once 'sbac_self_registration.features.inc';

/**
 * Nav for SBAC self-registration
 *
 * @return array nav to configure the items for SBAC self-registration
 */
function sbac_self_registration_menu()
{
  $items = array();

  $items['self-registration'] = array(
    'title' => t('Register for the Digital Library'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sbac_self_registration_form'),
    'access callback' => TRUE,
    'file' => 'sbac_self_registration.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['self-registration-processing'] = array(
    'title' => 'Thank you for registering!',
    'page callback' => 'sbac_self_registration_processing',
    'access callback' => TRUE,
    'file' => 'sbac_self_registration.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['verify-email'] = array(
    'title' => t('Verify Email'),
    'page callback' => 'sbac_self_registration_verify_email',
    'access callback' => TRUE,
    'file' => 'sbac_self_registration.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['verify-email-processing'] = array(
    'title' => t('Password Reset'),
    'page callback' => 'sbac_self_registration_verify_email_processing',
    'access callback' => TRUE,
    'file' => 'sbac_self_registration.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['reset-password'] = array(
    'title' => t('Password Reset'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sbac_self_registration_reset_password_form'),
    'access callback' => TRUE,
    'file' => 'sbac_self_registration.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['reset-password-processing'] = array(
    'title' => t('Password Reset'),
    'page callback' => 'sbac_self_registration_reset_password_processing',
    'access callback' => TRUE,
    'file' => 'sbac_self_registration.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['reset-password-token/%'] = array(
    'page callback' => 'sbac_self_registration_reset_password_token',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'file' => 'sbac_self_registration.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
* Decode Email token
*
* @param string $token Email token
* @return mixed If the Email token is returned successfully by sabc art api, it returns the expiration time of the token and the corresponding email address, otherwise it returns FALSE
*/
function _sbac_self_registration_token_decode($token) {
  if ($decrypted = sbac_art_api_decrypt($token)) {
    $parts = explode(':', $decrypted);
    return array('expiration' => $parts[0], 'email' => $parts[1]);
  }
  return FALSE;
}

/**
* Generate Email token by sbac art api
*
* @param string $email The Email address
* @return string Return the token string of the email
*/
function _sbac_self_registration_token_encode($email) {
  $time = time() + (60 * 60 * 72);
  $token = sbac_art_api_encrypt("$time:$email");
  return $token;
}

/**
* Get domain entity data by Email address
*
* @param string $email The Email address
* @return array Return the domain entity data of the Email
*/
function _sbac_self_registration_domain_query($email) {
  $email_parts = explode('@', $email);
  $domain =   $email_parts[1];
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'authorized_domains')
    ->entityCondition('bundle', 'authorized_domains')
    ->fieldCondition('field_domain', 'value', $domain, '=');
  $result = $query->execute();
  return $result;
}

/**
* Check whether the Email domain is an authorized domain
*
* @param string $email The Email address
* @return mixed Return TRUE if domain is authorized, otherwise it returns FLASE
*/
function _sbac_self_registration_check_domain($email) {
  $result = _sbac_self_registration_domain_query($email);
  if (isset($result['authorized_domains']) && count($result['authorized_domains']) > 0) {
    return TRUE;
  }
  return FALSE;
}

/**
* Get the 2 letter abbreviation of the state that are the same as those in ART
*
* @param mixed $state an array of state names or states
* @param boolean $inverse If the state is array, it is TRUE; if not, it is FALSE.
* @return array Return the 2 letter abbreviation of the state that is the same as those in ART
*/
function sbac_self_registration_state_convert($state, $inverse=FALSE) {
  $states = array(
    'Alabama'=>'AL',
    'Alaska'=>'AK',
    'Arizona'=>'AZ',
    'Arkansas'=>'AR',
    'California'=>'CA',
    'Colorado'=>'CO',
    'Connecticut'=>'CT',
    'Delaware'=>'DE',
    'Florida'=>'FL',
    'Georgia'=>'GA',
    'Hawaii'=>'HI',
    'Idaho'=>'ID',
    'Illinois'=>'IL',
    'Indiana'=>'IN',
    'Iowa'=>'IA',
    'Kansas'=>'KS',
    'Kentucky'=>'KY',
    'Louisiana'=>'LA',
    'Maine'=>'ME',
    'Maryland'=>'MD',
    'Massachusetts'=>'MA',
    'Michigan'=>'MI',
    'Minnesota'=>'MN',
    'Mississippi'=>'MS',
    'Missouri'=>'MO',
    'Montana'=>'MT',
    'Nebraska'=>'NE',
    'Nevada'=>'NV',
    'New Hampshire'=>'NH',
    'New Jersey'=>'NJ',
    'New Mexico'=>'NM',
    'New York'=>'NY',
    'North Carolina'=>'NC',
    'North Dakota'=>'ND',
    'Ohio'=>'OH',
    'Oklahoma'=>'OK',
    'Oregon'=>'OR',
    'Pennsylvania'=>'PA',
    'Rhode Island'=>'RI',
    'South Carolina'=>'SC',
    'South Dakota'=>'SD',
    'Tennessee'=>'TN',
    'Texas'=>'TX',
    'Utah'=>'UT',
    'Vermont'=>'VT',
    'Virginia'=>'VA',
    'Washington'=>'WA',
    'West Virginia'=>'WV',
    'Wisconsin'=>'WI',
    'Wyoming'=>'WY',
    'Test State'=>'TS',
    'American Samoa' => 'AS',
    'Armed Forces Africa, Canada, Europe And Middle East' => 'AE',
    'Armed Forces Americas' => 'AA',
    'Armed Forces Pacific' => 'AP',
    //'Consortium' => '?',
    'District Of Columbia' => 'DC',
    'Federated States Of Micronesia' => 'FM',
    'Guam' => 'GU',
    'Marshall Islands' => 'MH',
    'Northern Mariana Islands' => 'MP',
    'Other' => 'OT',
    'Palau' => 'PW',
    'Puerto Rico' => 'PR',
    //'Smarter Balanced' => '?',
    'Virgin Islands' => 'VI',
  );

  if ($inverse) {
    $states = array_flip($states);
  }
  return $states[$state];
}

/**
* Get authorized domain information of state and district by Email address
*
* @param string $email The Email address
* @return mixed If it is an authorized domain, it returns the state name and district name, otherwise it returns FALSE
*/
function _sbac_self_registration_get_domain_info($email) {
  $domain_info = array();
  $result = _sbac_self_registration_domain_query($email);
  if (isset($result['authorized_domains']) && count($result['authorized_domains']) > 0) {
    $entities = array_keys($result['authorized_domains']);
    $entity_id = $entities[0];
    $entity = entity_load_single('authorized_domains', $entity_id);
    $state_term = taxonomy_term_load($entity->field_domain_state[LANGUAGE_NONE][0]['tid']);
    $district_term = taxonomy_term_load($entity->field_district[LANGUAGE_NONE][0]['tid']);
    $domain_info['state'] = sbac_self_registration_state_convert($state_term->name);
    $domain_info['district'] = $district_term->field_district_id[LANGUAGE_NONE][0]['value'];
    return $domain_info;
  }
  return FALSE;
}
