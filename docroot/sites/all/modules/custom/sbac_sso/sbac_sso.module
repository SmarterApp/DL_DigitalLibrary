<?php

define('SBAC_SSO_IDP', 'http://drcamp-dev.opentestsystem.org:8080/auth/SSORedirect/metaAlias/sbac/idp');

/**
 * Implements hook_menu().
 *
 * @return array
 */
function sbac_sso_menu() {
  $items = array();

  $items['sbac-sso-consume'] = array(
    'title' => 'SBAC Consume',
    'page callback' => 'sbac_sso_consume',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['sbac-sso-logout'] = array(
    'title' => 'SBAC Logout',
    'page callback' => 'sbac_sso_logout',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['sbac-sso-error'] = array(
    'title' => 'SBAC Error',
    'page callback' => 'sbac_sso_error',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * The SSO Error page.
 *
 * @return mixed
 */
function sbac_sso_error() {
  (!isset($_GET['code']) ? $code = 100 : $code = $_GET['code']);
  $possible_titles = array(t('Access to the Digital Library is Denied'), t('Something went wrong. Please try again.'));
  $possible_messages = array(
    100 => t('Error code 100'),
    101 => t('Error code 101'),
    102 => t('Error code 102'),
    103 => t('Error code 103'),
    104 => t('Error code 104'),
    200 => t('Error code 200'),
  );
  drupal_set_title($possible_titles[0]);
  $output = $possible_messages[$code];
  return $output;
}

/**
 * Implements hook_form_alter().
 *
 * Used to hide the login form on this page.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sbac_sso_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login_block') {
    if ($_GET['q'] == 'sbac-sso-error') {
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Consumes the SAML Assertion.
 */
function sbac_sso_consume() {
  $saml_token = sbac_sso_get_saml_token();
  if (!$saml_token) {
    global $base_url;
    $original_access_url = $base_url . '/' . $_GET['q'];
    // Record original access URL (URL Encoded) to the SAML request in the relayState variable
    // Direct user to SSO with relaystate pointing to SAML Assertion receiving endpoint.
    $saml_assertion = sbac_sso_saml_assertion();
    $url = SBAC_SSO_IDP . '?SAMLRequest=' . urlencode(base64_encode(gzcompress($saml_assertion))) . '&RelayState=' . urlencode($original_access_url);
    drupal_custom_goto($url);
  }

  // validate SAML.
  $user = sbac_sso_validate_saml_response($saml_token);
  if ($user) {
    // If the user is marked as blocked.
    if ($user->access == 1) {
      drupal_goto('sbac-sso-error', array('query' => array('key' => 200)));
    }
    // Log user in.
    $form_state['uid'] = $user->uid;
    user_login_submit(array(), $form_state);
  }
}

/**
 * Custom logout callback.
 */
function sbac_sso_logout() {
  // Destroy the current session, and reset $user to the anonymous user.
  global $user;
  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
  module_invoke_all('user_logout', $user);
  session_destroy();

  // Redirect user to SSO Login.
  $original_access_url = $_GET['q'];
  $saml_assertion = sbac_sso_saml_assertion();
  $url = SBAC_SSO_IDP . '?SAMLRequest=' . base64_encode(urlencode($saml_assertion)) . '&RelayState=' . $original_access_url;
  drupal_goto($url);
}

/**
 * Validates the SAML response.
 *
 * @param string $saml_token
 *   The SAML assertion.
 *
 * @return bool
 */
function sbac_sso_validate_saml_response($saml_token) {
  $response = array();
  $saml_strings = explode("\n", $saml_token);
  foreach ($saml_strings as $row) {
    if (strpos($row, '<saml:Attribute Name="sbacUUID">')) {
      $row = trim(str_replace('<saml:Attribute Name="sbacUUID"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">', '', $row));
      $row = trim(str_replace('</saml:AttributeValue></saml:Attribute>', '', $row));
      if ($row) {
        $response['sbac_uuid'] = $row;
      }
    }
    if (strpos($row, '<saml:Attribute Name="sn">') !== FALSE) {
      $row = trim(str_replace('<saml:Attribute Name="sn"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">', '', $row));
      $row = trim(str_replace('</saml:AttributeValue></saml:Attribute>', '', $row));
      if ($row) {
        $response['sn'] = $row;
      }
    }
    if (strpos($row, '<saml:Attribute Name="entryuuid">') !== FALSE) {
      $row = trim(str_replace('<saml:Attribute Name="entryuuid"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">', '', $row));
      $row = trim(str_replace('</saml:AttributeValue></saml:Attribute>', '', $row));
      if ($row) {
        $response['entry_uuid'] = $row;
      }
    }
    if (strpos($row, '<saml:Attribute Name="email">') !== FALSE) {
      $row = trim(str_replace('<saml:Attribute Name="email"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">', '', $row));
      $row = trim(str_replace('</saml:AttributeValue></saml:Attribute>', '', $row));
      if ($row) {
        $response['email'] = $row;
      }
    }
    if (strpos($row, '<saml:Attribute Name="cn">') !== FALSE) {
      $row = trim(str_replace('<saml:Attribute Name="cn"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">', '', $row));
      $row = trim(str_replace('</saml:AttributeValue></saml:Attribute>', '', $row));
      if ($row) {
        $response['cn'] = $row;
      }
    }
    if (strpos($row, '<saml:Attribute Name="sbacTenancyChain">') !== FALSE) {
      $row = trim(str_replace('<saml:Attribute Name="sbacTenancyChain"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">', '', $row));
      $row = trim(str_replace('</saml:AttributeValue></saml:Attribute>', '', $row));
      if ($row) {
        $length = strlen($row);
        if ($row[$length -1] == '|') {
          $row = substr($row, 0, $length -1);
        }
        if ($row[0] == '|') {
          $row = substr($row, 1);
        }
        $response['sbac_tenancy_chain'] = $row;
      }
    }
    if (strpos($row, '<saml:Attribute Name="givenName">') !== FALSE) {
      $row = trim(str_replace('<saml:Attribute Name="givenName"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">', '', $row));
      $row = trim(str_replace('</saml:AttributeValue></saml:Attribute>', '', $row));
      if ($row) {
        $response['given_name'] = $row;
      }
    }
  }
  unset($row);
  unset($length);
  unset($saml_strings);

  // If SAML assertion does not match expected definition or signature:
  if (!$response) {
    // If you do not find a matching tenancy chain, kick the user to an error page
    // with Smarter Balanced Contact information and a custom error code
    // ERROR CODE 100: Problem processing Assertion
    drupal_goto('sbac-sso-error', array('query' => array('code' => 100)));
  }

  $user_attributes = array();
  if ($response && isset($response['sbac_tenancy_chain']) && $response['sbac_tenancy_chain']) {
    $attributes = explode('|', $response['sbac_tenancy_chain']);
    if ($attributes) {
      $user_fields = array(
        'role_id' => 'role_id',
        'name' => 'name',
        'level' => 'level',
        'client_id' => 'client_id',
        'client' => 'client',
        'group_of_state_ids' => 'group_of_state_ids',
        'group_of_states' => 'group_of_states',
        'state_id' => 'state_id',
        'state' => 'state',
        'group_of_district_ids' => 'group_of_district_ids',
        'group_of_districts' => 'group_of_districts',
        'district_id' => 'district_id',
        'district' => 'district',
        'group_of_institution_ids' => 'group_of_institution_ids',
        'group_of_institutions' => 'group_of_institutions',
        'institution_id' => 'institution_id',
        'institution' => 'institution',
      );

      if (count($user_fields) == count($attributes)) {
        $user_attributes = array_combine($user_fields, $attributes);
      }
      unset($user_fields);
      unset($attributes);
    }
  }

  // If SAML assertion does not match expected definition or signature:
  if (!$user_attributes || !isset($user_attributes['role_id']) || $user_attributes['role_id'] == NULL) {
    // If you do not find a matching tenancy chain, kick the user to an error page
    // with Smarter Balanced Contact information and a custom error code
    // ERROR CODE 101: Assertion did not contain tenancy chain with DL_EndUser role
    drupal_goto('sbac-sso-error', array('query' => array('code' => 101)));
  }
  // Check if the role is valid.
  $role = user_role_load($user_attributes['role_id']);
  if (!$role) {
    drupal_goto('sbac-sso-error', array('query' => array('code' => 101)));
  }

  if ($user = sbac_sso_load_user_by_uuid($user_attributes['role_id'])) {
    // First Name = givenName
    // Last Name = sn
    // Email = email
    // Take the tenancy chain you found |232093420|DL_EndUser|INSTITUTION|Amplify|SmarterBalanced|||cat|NC|||229|Daybreak School District|||942|Daybreak Central High|
    // The format of the sbacTenancyChain is as follows:  |RoleID|Name|Level|ClientID|Client|GroupOfStatesID|GroupOfStates|StateID|State|GroupOfDistrictsID|GroupOfDistricts|DistrictID|District|GroupOfInstitutionsID|GroupOfInstitutions|InstitutionID|Institution|
    // Preform a string split on this pile delimited string, and grab the
    // value from the positions for State, District, Insitution and update those
    // on the user record. If any are blank, update the DL User record accordingly.
    // If some error occurs in the data updating a user: Kick the user to an error
    // page with Smarter Balanced Contact information and a custom error code
    // (do not include the details pertaining to what the error code is connected to, just the ERROR CODE and NUMBER)
    $user->field_first_name['und'][0]['value'] = $response['given_name'];
    $user->field_last_name['und'][0]['value'] = $response['sn'];
    $user->mail = $response['email'];
    if ($valid = sbac_sso_validate_state_id($user_attributes['state_id'])) {
      $user->field_state['und'][0]['tid'] = $valid;
    }
    $user->field_district_name['und'][0]['value'] = $user_attributes['district'];
    $user->field_school_name['und'][0]['value'] = $user_attributes['institution'];
    $user = user_save($user);
    if (!$user) {
      drupal_goto('sbac-sso-error', array('query' => array('key' => 103)));
    }
  }
  elseif ($user = user_load_by_mail($response['email'])) {
    // Record entryuuid to record for specified email address
    // Update all other fields passed in SAML assertion as described
    // in the first clause above. If some error occurs in the data updating a
    // user: Kick the user to an error page with Smarter Balanced Contact
    // information and a custom error code ( do not include the details pertaining
    // to what the error code is connected to, just the ERROR CODE and NUMBER :
    // ERROR CODE 103: Error updating user with user attributes that were passed.
    $user->field_first_name['und'][0]['value'] = $response['given_name'];
    $user->field_last_name['und'][0]['value'] = $response['sn'];
    $user->mail = $response['email'];
    if ($valid = sbac_sso_validate_state_id($user_attributes['state_id'])) {
      $user->field_state['und'][0]['tid'] = $valid;
    }
    $user->field_district_name['und'][0]['value'] = $user_attributes['district'];
    $user->field_school_name['und'][0]['value'] = $user_attributes['institution'];
    $user->field_sso_uuid['und'][0]['value'] = $user_attributes['role_id'];
    $user = user_save($user);
    if (!$user) {
      drupal_goto('sbac-sso-error', array('query' => array('key' => 103)));
    }
  }
  else {
    // Create a user record for this user with the end user role, and record
    // their userUUID to that record. Use all attributes that were updated
    // in first clause to create the record. If some error occurs in the data
    // creating a user: Kick the user to an error page with Smarter Balanced
    // Contact information and a custom error code ( do not include the details
    // pertaining to what the error code is connected to, just the ERROR CODE and NUMBER :
    // ERROR CODE 104: Error creating user with user attributes that were passed.
    $user = sbac_sso_create_user_record($response, $user_attributes);
    if (!$user) {
      drupal_goto('sbac-sso-error', array('query' => array('key' => 104)));
    }
  }
  return $user;
}

/**
 * Validates the state id.
 *
 * @param int $state_id
 *   The possible term ID.
 *
 * @return string
 */
function sbac_sso_validate_state_id($state_id) {
  $term = taxonomy_term_load($state_id);
  if ($term) {
    return $state_id;
  }
  return '';
}

/**
 * Create the user record.
 *
 * @param array $response
 *   The response from SAML.
 * @param array $user_attributes
 *   The response from the tenancy chain.
 *
 * @return bool|stdClass
 */
function sbac_sso_create_user_record($response, $user_attributes) {
  $new_user = new stdClass();
  $new_user->uid = 0;
  $new_user->cache = 0;

  $edit['name'] = $response['email'];
  $edit['pass'] = user_password(10);
  $edit['mail'] = $response['email'];
  $edit['status'] = 1;
  $edit['field_first_name']['und'][0]['value'] = $response['given_name'];
  $edit['field_last_name']['und'][0]['value'] = $response['sn'];
  if ($valid = sbac_sso_validate_state_id($user_attributes['state_id'])) {
    $edit['field_state']['und'][0]['tid'] = $user_attributes['state_id'];
  }
  $role = user_role_load($user_attributes['role_id']);
  if ($role) {
    $edit['roles'] = array($role->rid => $role->name);
  }
  $edit['field_district']['und'][0]['value'] = $user_attributes['district'];
  $edit['field_institution']['und'][0]['value'] = $user_attributes['institution'];
  $edit['field_sso_uuid']['und'][0]['value'] = $user_attributes['role_id'];
  return user_save($new_user, $edit);
}

/**
 * Load the user by UUID.
 *
 * @param string $uuid
 *   The uuid to lookup
 *
 * @return bool
 */
function sbac_sso_load_user_by_uuid($uuid) {
  $user = FALSE;
  $sql  = "SELECT u.uid AS uid FROM {users} u ";
  $sql .= "JOIN {field_data_field_sso_uuid} uuid ON u.uid = uuid.entity_id ";
  $sql .= "WHERE uuid.field_sso_uuid_value = :uuid";
  $result = db_query($sql, array(':uuid' => $uuid))->fetchObject();
  if ($result) {
    $user = user_load($result->uid);
  }
  return $user;
}

/**
 * Get the SAML assertion.
 *
 * @return string
 */
function sbac_sso_saml_assertion() {
  global $base_url;
  $saml_assertion = '
    <samlp:AuthnRequest ID="_0A7DBFDF7C93449E56356BA4855B150C" Version="2.0" IssueInstant="2014-04-25T13:13:31.073Z" Destination="http://drcamp-dev.opentestsystem.org:8080/auth/SSORedirect/metaAlias/sbac/idp" ForceAuthn="false" IsPassive="false" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" AssertionConsumerServiceURL="' . $base_url . '/sbac-sso-consume" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol">
        <saml:Issuer xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">' . $base_url . '</saml:Issuer>
        <samlp:NameIDPolicy AllowCreate="true" />
    </samlp:AuthnRequest>';
  return $saml_assertion;
}

/**
 * Get authenticated session.
 *
 * @return array
 */
function sbac_sso_get_authenticated_session() {
  $session = array();
  $session['valid'] = TRUE;
  return $session;
}

/**
 * Get endpoint assertion.
 *
 * @return string
 */
function sbac_sso_get_saml_token() {
  $saml_endpoint_assertion = '
  <samlp:Response xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" ID="s2c10bb352a7e3d6ed3b4fbcc7f9fa5a0ff3652e3c" InResponseTo="_166BA43BEBF8109A962D91A64191BE14" Version="2.0" IssueInstant="2014-04-28T16:18:54Z" Destination="https://www.frankbwalsh.com/sso_poc/saml">
  <saml:Issuer xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">http://drcamp-dev.opentestsystem.org:8080/auth</saml:Issuer>
  <samlp:Status xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol">
    <samlp:StatusCode xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" Value="urn:oasis:names:tc:SAML:2.0:status:Success"></samlp:StatusCode>
  </samlp:Status>
  <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" ID="s2e319f7bfa5f587485b5bd8ebc8d23a26159c0400" IssueInstant="2014-04-28T16:18:54Z" Version="2.0">
    <saml:Issuer>http://drcamp-dev.opentestsystem.org:8080/auth</saml:Issuer>
    <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <ds:SignedInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" />
      <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" />
      <ds:Reference URI="#s2e319f7bfa5f587485b5bd8ebc8d23a26159c0400" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
          <ds:Transforms xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
              <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" />
              <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" />
          </ds:Transforms>
          <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" />
          <ds:DigestValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#">w6hUHbT/PwLxhTFe8X+OHa6Af88=</ds:DigestValue>
      </ds:Reference>
    </ds:SignedInfo>
    <ds:SignatureValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      Wh40oeQyxtYAI8M+kwtNp2F2zZGX5E4Q4MC8vIFXL2e8tcQpMR6PAHTq5KiNHh3TlgQOA7zfLvm0
      a7FaxjAhc+JbQlmuQKDKbY89MHNSZL3CUVQQT5jp+6Rxv/3MnmIBLjh1fbm2xiFdHb35COsdFRr1
      4uS2E94sK7jFjjOu9Mc=
    </ds:SignatureValue>
      <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      <ds:X509Data xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
      <ds:X509Certificate xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
          MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
      bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
      ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
      CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
      BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
      AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
      RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
      Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
      QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
      cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
      /FfwWigmrW0Y0Q==
      </ds:X509Certificate>
      </ds:X509Data>
        </ds:KeyInfo>
    </ds:Signature>
    <saml:Subject>
      <saml:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient" NameQualifier="http://drcamp-dev.opentestsystem.org:8080/auth">ujd+QyxIfZdiEs25oTa8vQKpybk3</saml:NameID>
      <saml:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
          <saml:SubjectConfirmationData InResponseTo="_166BA43BEBF8109A962D91A64191BE14" NotOnOrAfter="2014-04-28T16:28:54Z" Recipient="https://www.frankbwalsh.com/sso_poc/saml" />
      </saml:SubjectConfirmation>
    </saml:Subject>
    <saml:Conditions NotBefore="2014-04-28T16:08:54Z" NotOnOrAfter="2014-04-28T16:28:54Z">
        <saml:AudienceRestriction>
            <saml:Audience>https://www.frankbwalsh.com</saml:Audience>
        </saml:AudienceRestriction>
    </saml:Conditions>
    <saml:AuthnStatement AuthnInstant="2014-04-28T16:08:31Z" SessionIndex="s205f8489a59e75b0ed74f8b787507591064a23501">
        <saml:AuthnContext>
            <saml:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml:AuthnContextClassRef>
        </saml:AuthnContext>
    </saml:AuthnStatement>
    <saml:AttributeStatement>
        <saml:Attribute Name="sbacUUID"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">amplify_00001</saml:AttributeValue></saml:Attribute>
        <saml:Attribute Name="sn"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">Walsh</saml:AttributeValue></saml:Attribute>
        <saml:Attribute Name="entryuuid"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">3b0d0640-8cd1-44b4-9889-0dd4eb2c2828</saml:AttributeValue></saml:Attribute>
        <saml:Attribute Name="email"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">fwalsh@amplify.com</saml:AttributeValue></saml:Attribute>
        <saml:Attribute Name="cn"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">Frank Walsh</saml:AttributeValue></saml:Attribute>
        <saml:Attribute Name="sbacTenancyChain"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">15|DL_EndUser|INSTITUTION|Amplify|SmarterBalanced|||cat|NC|||229|Daybreak School District|||942|Daybreak Central High|</saml:AttributeValue></saml:Attribute>
        <saml:Attribute Name="givenName"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">Frank</saml:AttributeValue></saml:Attribute>
    </saml:AttributeStatement>
  </saml:Assertion>
  </samlp:Response>';

  $saml_endpoint_assertion = FALSE;
  return $saml_endpoint_assertion;
}