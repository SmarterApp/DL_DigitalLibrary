<?php

if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
  switch ($_ENV['AH_SITE_ENVIRONMENT']) {
    case 'dev':
    case 'test':
    case 'stage':
    case 'stage2':
    case 'stage3':
    case 'loadtest':
      define('SBAC_SSO_URL', 'https://sso-uat.smarterbalanced.org/auth/SSORedirect/metaAlias/sbac/idp');
      define('SBAC_SSO_PROGRAM_API', 'https://pm.smarterbalanced.org/rest/tenantchain');
      define('SBAC_SSO_DESTROY_SESSION_URL', 'https://sso-uat.smarterbalanced.org/auth/UI/Logout');
      break;
    case 'prod':
      define('SBAC_SSO_URL', 'https://sso.smarterbalanced.org/auth/SSORedirect/metaAlias/sbac/idp');
      define('SBAC_SSO_PROGRAM_API', 'https://pm.smarterbalanced.org/rest/tenantchain');
      define('SBAC_SSO_DESTROY_SESSION_URL', 'https://sso.smarterbalanced.org/auth/UI/Logout');
      break;
  }
}
else {
  define('SBAC_SSO_URL', 'https://sso-uat.smarterbalanced.org/auth/SSORedirect/metaAlias/sbac/idp');
  define('SBAC_SSO_PROGRAM_API', 'https://pm.smarterbalanced.org/rest/tenantchain');
  define('SBAC_SSO_DESTROY_SESSION_URL', 'https://sso-uat.smarterbalanced.org/auth/UI/Logout');
}

define('SBAC_SSO_LOGOUT_URL', 'http://www.smarterbalanced.org');

/**
 * Implements hook_menu().
 *
 * @return array
 */
function sbac_sso_menu() {
  $items = array();

  $items['sbac-sso-consume'] = array(
    'title' => 'SBAC Consume',
    'page callback' => 'sbac_sso_consume',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['sbac-sso-logout'] = array(
    'title' => 'SBAC Logout',
    'page callback' => 'sbac_sso_logout',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['sbac-sso-error'] = array(
    'title' => 'SBAC Error',
    'page callback' => 'sbac_sso_error',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['sbac-sso/%ctools_js/session-expire'] = array(
    'title' => 'Session Expire',
    'page callback' => 'sbac_sso_session_expire_modal',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * @param $items
 */
function sbac_sso_menu_alter(&$items) {
  if (isset($items['user'])) {
    $items['user']['page callback'] = 'sbac_sso_consume';
    $items['user']['module'] = 'sbac_sso';
    $items['user']['file'] = NULL;
  }
  if (isset($items['user/logout'])) {
    $items['user/logout']['page callback'] = 'sbac_sso_logout';
    $items['user/logout']['module'] = 'sbac_sso';
    $items['user/logout']['file'] = NULL;
  }
}

/**
 * Session expire modal.
 *
 * @param bool $js
 */
function sbac_sso_session_expire_modal($js = FALSE) {
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('ajax-responder');
    ctools_modal_add_js();

    $title = 'Your session is about to end';
    $form_state = array(
      'title' => $title,
      'ajax' => TRUE,
    );

    $output = ctools_modal_form_wrapper('sbac_sso_session_expire_form', $form_state);
    if (!empty($form_state['executed'])) {
      $output = array();
      $output[] = ctools_modal_command_dismiss();
      if ($form_state['triggering_element']['#value'] == 'OK') {
        sbac_sso_session_regenerate();
      }
      else {
        global $user;
        watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
        module_invoke_all('user_logout', $user);
        session_destroy();

        $url = SBAC_SSO_DESTROY_SESSION_URL;
        $output[] = ctools_ajax_command_redirect($url);
      }
    }
    print ajax_render($output);
    exit();
  }
}

/**
 * Session expire form.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function sbac_sso_session_expire_form($form, &$form_state) {
  $form = array();

  $form['submit_description'] = array(
    '#markup' => "<p>Select OK to
        extend your session. Pressing CANCEL or failing to respond in the next
        two minutes will require site reauthentication.</p>"
  );

  $form['continue'] = array(
    '#type' => 'submit',
    '#value' => 'OK',
    '#attributes' => array('class' => array('button', 'blue'))
  );

  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => 'Cancel',
    '#attributes' => array('class' => array('button', 'gray', 'cancel'))
  );

  $form['button_suffix'] = array(
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Called when an anonymous user becomes authenticated or vice-versa.
 *
 * Pretty much a carbon copy of drupal's own session_regenerate. Except,
 * I removed the session_id regeneration so that if a session is extended,
 * the id stays the same.
 *
 * @ingroup php_wrappers
 */
function sbac_sso_session_regenerate() {
  global $user, $is_https;
  // Nothing to do if we are not allowed to change the session.
  if (!drupal_save_session()) {
    return;
  }

  if ($is_https && variable_get('https', FALSE)) {
    $insecure_session_name = substr(session_name(), 1);
    if (!isset($GLOBALS['lazy_session']) && isset($_COOKIE[$insecure_session_name])) {
      $old_insecure_session_id = $_COOKIE[$insecure_session_name];
    }
    $params = session_get_cookie_params();
    $session_id = drupal_random_key();
    // If a session cookie lifetime is set, the session will expire
    // $params['lifetime'] seconds from the current request. If it is not set,
    // it will expire when the browser is closed.
    $expire = $params['lifetime'] ? REQUEST_TIME + $params['lifetime'] : 0;
    setcookie($insecure_session_name, $session_id, $expire, $params['path'], $params['domain'], FALSE, $params['httponly']);
    $_COOKIE[$insecure_session_name] = $session_id;
  }

  if (drupal_session_started()) {
    $old_session_id = session_id();
  }
  //  session_id(drupal_random_key());

  if (isset($old_session_id)) {
    $params = session_get_cookie_params();
    $expire = $params['lifetime'] ? REQUEST_TIME + $params['lifetime'] : 0;
    setcookie(session_name(), $old_session_id, $expire, $params['path'], $params['domain'], $params['secure'], $params['httponly']);
    $fields = array('sid' => session_id());
    if ($is_https) {
      $fields['ssid'] = session_id();
      // If the "secure pages" setting is enabled, use the newly-created
      // insecure session identifier as the regenerated sid.
      if (variable_get('https', FALSE)) {
        $fields['sid'] = $session_id;
      }
    }
    db_update('sessions')
      ->fields($fields)
      ->condition($is_https ? 'ssid' : 'sid', $old_session_id)
      ->execute();
  }
  elseif (isset($old_insecure_session_id)) {
    // If logging in to the secure site, and there was no active session on the
    // secure site but a session was active on the insecure site, update the
    // insecure session with the new session identifiers.
    db_update('sessions')
      ->fields(array('sid' => $session_id, 'ssid' => session_id()))
      ->condition('sid', $old_insecure_session_id)
      ->execute();
  }
  else {
    // Start the session when it doesn't exist yet.
    // Preserve the logged in user, as it will be reset to anonymous
    // by _drupal_session_read.
    $account = $user;
    drupal_session_start();
    $user = $account;
  }
  date_default_timezone_set(drupal_get_user_timezone());
}

/**
 * Implements hook_preprocess_page().
 *
 * @param $vars
 */
function sbac_sso_preprocess_page(&$vars) {
  // Regenerate the user session per page.
  if (user_is_logged_in() && strpos($_GET['q'], 'ajax') === FALSE) {
    sbac_sso_session_regenerate();
  }

  // If the page requested is a moderation page, do not include this timer. As there
  // is already a timer for the moderation functionality. Look at sbac_flag module.
  if (isset($_GET['flag']) && ($_GET['flag'] == 'resolve-resource-flags' || $_GET['flag'] == 'resolve-resource-review-flags')) {
    return;
  }
  elseif (user_is_logged_in() && arg(0) != 'admin') {
    ctools_include('modal');
    ctools_include('ajax');
    ctools_add_js('ajax-responder');
    ctools_modal_add_js();
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_js(drupal_get_path('module', 'sbac_sso') . '/js/sbac_sso.ctools.js');
    drupal_add_js(drupal_get_path('module', 'sbac_sso') . '/js/sbac_sso.js');
    $session_button = l(t('Session Expire (modal)'), 'sbac-sso/nojs/session-expire', array(
      'attributes' => array(
        'class' => 'ctools-use-modal button red use-ajax ctools-modal-sbac-sso-session-expire small',
        'id' => 'sbac-sso-session-expire'
      ),
    ));
    $js_settings = array('sbac-sso-session-expire' => array('modalSize' => array('type' => 'fixed', 'width' => 600, 'height' => 260), 'modalTheme' => 'CtoolSbacSSOExpire'));
    drupal_add_js($js_settings, 'setting');
    $vars['session_expire'] = $session_button;
    $session_info = session_get_cookie_params();
    drupal_add_js(array('sbac_session_lifetime' => $session_info['lifetime']), 'setting');
  }
}

/**
 * The SSO Error page.
 *
 * @return mixed
 */
function sbac_sso_error() {
  (!isset($_GET['code']) ? $code = 100 : $code = $_GET['code']);
  $possible_titles = array(t('Access to the Digital Library is Denied'), t('Something went wrong. Please try again.'));
  $possible_messages = array(
    100 => t('Error code 100'),
    101 => t('Error code 101'),
    102 => t('Error code 102'),
    103 => t('Error code 103'),
    104 => t('Error code 104'),
    200 => t('Error code 200'),
  );

  switch ($code) {
    case 102:
    case 200:
      $title = 0;
      break;
    default:
      $title = 1;
      break;
  }

  drupal_set_title($possible_titles[$title]);
  $output = $possible_messages[$code];
  return $output;
}

/**
 * Implements hook_form_alter().
 *
 * Used to hide the login form on this page.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sbac_sso_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_login_block') {
    if ($_GET['q'] == 'sbac-sso-error') {
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Consumes the SAML Assertion.
 */
function sbac_sso_consume() {
  $is_valid = FALSE;
  $saml_token = NULL;
  if (isset($_POST['SAMLResponse'])) {
    $saml_token = base64_decode($_POST['SAMLResponse']);
    $is_valid = sbac_sso_validate_saml_assertion($saml_token);
  }
  else {
    // Destroy the current session, and reset $user to the anonymous user.
    if (user_is_logged_in()) {
      global $user;
      watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
      module_invoke_all('user_logout', $user);
      session_destroy();
    }

    global $base_url;
    $original_access_url = $base_url;
    if (isset($_SERVER['REQUEST_URI'])) {
      $original_access_url .= '/' . $_SERVER['REQUEST_URI'];
    }
    error_log("GET: " . print_r($_SERVER, TRUE));
    // Record original access URL (URL Encoded) to the SAML request in the relayState variable
    // Direct user to SSO with relaystate pointing to SAML Assertion receiving endpoint.
    $saml_assertion = sbac_sso_saml_assertion();
    $url = SBAC_SSO_URL . '?SAMLRequest=' . urlencode(base64_encode(gzdeflate($saml_assertion))) . '&RelayState=' . urlencode($original_access_url);
    header('Location: ' . $url, TRUE, 302);
    drupal_exit($url);
  }

  if ($is_valid) {
    // validate SAML.
    $user = sbac_sso_validate_saml_response($saml_token);
    if ($user) {
      // If the user is marked as blocked.
      if ($user->status == 0) {
        // Kick the user to an error page with Smarter Balanced Contact information
        // and a custom error code ( do not include the details pertaining to what
        // the error code is connected to, just the ERROR CODE and NUMBER :
        // ERROR CODE 200: Error updating user with user attributes that were passed.
        drupal_goto('sbac-sso-error', array('query' => array('code' => 200)));
      }
      error_log("GET: " . print_r($_GET, TRUE));
      error_log("SERVER: " . print_r($_SERVER, TRUE));

      // Log user in.
      $form_state['uid'] = $user->uid;
      user_login_submit(array(), $form_state);
    }
  }
  else {
    drupal_goto('sbac-sso-error', array('query' => array('code' => 100)));
  }
}

/**
 * Custom logout callback.
 */
function sbac_sso_logout() {
  $ajax = FALSE;
  if (isset($_GET['ajax'])) {
    $ajax = TRUE;
  }

  // Destroy the current session, and reset $user to the anonymous user.
  global $user;
  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
  module_invoke_all('user_logout', $user);
  session_destroy();

  $url = SBAC_SSO_DESTROY_SESSION_URL;
  if ($ajax) {
    $output = array();
    $output['url'] = $url;
    print drupal_json_encode($output);
    exit;
  }
  else {
    drupal_goto($url);
  }
}

/**
 * Validates the SAML response.
 *
 * @param string $saml_token
 *   The SAML assertion.
 *
 * @return bool
 */
function sbac_sso_validate_saml_response($saml_token) {
  $response = sbac_sso_parse_saml_assertion($saml_token);
  // If SAML assertion does not match expected definition or signature:
  if (!$response) {
    // If you do not find a matching tenancy chain, kick the user to an error page
    // with Smarter Balanced Contact information and a custom error code
    // ERROR CODE 100: Problem processing Assertion
    drupal_goto('sbac-sso-error', array('query' => array('code' => 100)));
  }
  $user_attributes = sbac_sso_create_user_attributes($response);
  // If SAML assertion does not match expected definition or signature:
  if (!$user_attributes || !isset($user_attributes['name']) || $user_attributes['name'] == NULL || $user_attributes['name'] != 'DL_EndUser') {
    // If you do not find a matching tenancy chain, kick the user to an error page
    // with Smarter Balanced Contact information and a custom error code
    // ERROR CODE 101: Assertion did not contain tenancy chain with DL_EndUser role
    drupal_goto('sbac-sso-error', array('query' => array('code' => 101)));
  }
  // program manager api call.
  $api_response = sbac_sso_program_management_api_request($user_attributes);
  if (!$api_response) {
    // Kick the user to an error page with Smarter Balanced Contact information
    // and a custom error code ( do not include the details pertaining to what
    // the error code is connected to, just the ERROR CODE and NUMBER :
    // ERROR CODE 102: Program Management returned INVALID ACCESS
    drupal_goto('sbac-sso-error', array('query' => array('code' => 102)));
  }
  $user = sbac_sso_determine_user($user_attributes, $response);
  return $user;
}

/**
 * Validate the SAML assertion.
 *
 * @param $saml_token
 * @return bool
 */
function sbac_sso_validate_saml_assertion($saml_token) {
  require(drupal_get_path('module', 'sbac_sso') . '/xmlseclibs/xmlseclibs.php');
  $doc = new DOMDocument();
  $doc->loadXML($saml_token);
  $objXMLSecDSig = new XMLSecurityDSig();
  $objDSig = $objXMLSecDSig->locateSignature($doc);
  if (!$objDSig) {
    watchdog('sbac_sso', 'Cannot locate Signature Node');
    return FALSE;
  }
  $objXMLSecDSig->canonicalizeSignedInfo();
  $objXMLSecDSig->idKeys = array('ID');
  $objXMLSecDSig->idNS = array('wsu' => 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd');
  $retVal = $objXMLSecDSig->validateReference();
  if (!$retVal) {
    watchdog('sbac_sso', 'Reference Validation Failed');
    return FALSE;
  }
  $objKey = $objXMLSecDSig->locateKey();
  if (!$objKey) {
    watchdog('sbac_sso', 'We have no idea about the key');
    return FALSE;
  }
  $key = NULL;
  $objKeyInfo = XMLSecEnc::staticLocateKeyInfo($objKey, $objDSig);
  if (!$objKeyInfo->key && empty($key)) {
    watchdog('sbac_sso', 'Key could not be found.');
    return FALSE;
  }
  if ($objXMLSecDSig->verify($objKey)) {
    return TRUE;
  }
  else {
    watchdog('sbac_sso', 'Key could not be verified.');
    return FALSE;
  }
}

/**
 * Parse the SAML assertion.
 *
 * @param $saml_token
 * @return array
 */
function sbac_sso_parse_saml_assertion($saml_token) {
  $response = array();
  $value = NULL;
  $saml_strings = explode("\n", $saml_token);
  if (strpos($saml_token, '<ds:X509Certificate xmlns:ds="http://www.w3.org/2000/09/xmldsig#">') !== FALSE) {
    $certificate = '<ds:X509Certificate xmlns:ds="http://www.w3.org/2000/09/xmldsig#">';
    $pos = strpos($saml_token, $certificate);
    $half_value = substr($saml_token, $pos + strlen($certificate));
    $last_pos = strpos($half_value, '</ds:X509Certificate>');
    $value = trim(substr($half_value, 0, $last_pos));
    if ($value) {
      $response['x509_certificate'] = $value;
    }
  }

  if (strpos($saml_token, '<ds:SignatureValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#">') !== FALSE) {
    $certificate = '<ds:SignatureValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#">';
    $pos = strpos($saml_token, $certificate);
    $half_value = substr($saml_token, $pos + strlen($certificate));
    $last_pos = strpos($half_value, '</ds:SignatureValue>');
    $value = trim(substr($half_value, 0, $last_pos));
    if ($value) {
      $response['signature_value'] = $value;
    }
  }

  foreach ($saml_strings as $row) {
    if (strpos($row, '<ds:DigestValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#">') !== FALSE) {
      sbac_sso_parse_saml_assertion_row($response, $row, '<ds:DigestValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#">', '</ds:DigestValue>', 'digest_value');
    }
    if (strpos($row, '<saml:Attribute Name="sbacUUID">') !== FALSE) {
      $attribute = '<saml:Attribute Name="sbacUUID"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">';
      sbac_sso_parse_saml_assertion_row($response, $row, $attribute, '</saml:AttributeValue', 'sbac_uuid');
    }
    if (strpos($row, '<saml:Attribute Name="sn">') !== FALSE) {
      $attribute = '<saml:Attribute Name="sn"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">';
      sbac_sso_parse_saml_assertion_row($response, $row, $attribute, '</saml:AttributeValue', 'sn');
    }
    if (strpos($row, '<saml:Attribute Name="entryuuid">') !== FALSE) {
      $attribute = '<saml:Attribute Name="entryuuid"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">';
      sbac_sso_parse_saml_assertion_row($response, $row, $attribute, '</saml:AttributeValue', 'entry_uuid');
    }
    if (strpos($row, '<saml:Attribute Name="email">') !== FALSE) {
      $attribute = '<saml:Attribute Name="email"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">';
      sbac_sso_parse_saml_assertion_row($response, $row, $attribute, '</saml:AttributeValue', 'email');
    }
    if (strpos($row, '<saml:Attribute Name="cn">') !== FALSE) {
      $attribute = '<saml:Attribute Name="cn"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">';
      sbac_sso_parse_saml_assertion_row($response, $row, $attribute, '</saml:AttributeValue', 'cn');
    }
    if (strpos($row, '<saml:Attribute Name="sbacTenancyChain">') !== FALSE) {
      $attribute = '<saml:Attribute Name="sbacTenancyChain"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">';
      sbac_sso_parse_saml_assertion_row($response, $row, $attribute, '</saml:AttributeValue', 'sbac_tenancy_chain', TRUE);
    }
    if (strpos($row, '<saml:Attribute Name="givenName">') !== FALSE) {
      $attribute = '<saml:Attribute Name="givenName"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">';
      sbac_sso_parse_saml_assertion_row($response, $row, $attribute, '</saml:AttributeValue', 'given_name');
    }
  }
  return $response;
}

/**
 * Parse the SAML Assertion Row.
 *
 * @param $response
 * @param $row
 * @param $attribute_start
 * @param $attribute_end
 * @param $response_name
 *
 * @param bool $tenancy_chain
 */
function sbac_sso_parse_saml_assertion_row(&$response, &$row, $attribute_start, $attribute_end, $response_name, $tenancy_chain = FALSE) {
  $pos = strpos($row, $attribute_start);
  $half_value = substr($row, $pos + strlen($attribute_start));
  $last_pos = strpos($half_value, $attribute_end);
  $value = substr($half_value, 0, $last_pos);
  if ($value) {
    if ($tenancy_chain) {
      $length = strlen($value);
      if ($value[$length -1] == '|') {
        $value = substr($value, 0, $length -1);
      }
      if ($value[0] == '|') {
        $value = substr($value, 1);
      }
    }
    $response[$response_name] = $value;
    $value = NULL;
  }
}


/**
 * Create the user attributes array.
 *
 * @param $response
 *
 * @return array
 */
function sbac_sso_create_user_attributes($response) {
  $user_attributes = array();
  if ($response && isset($response['sbac_tenancy_chain']) && $response['sbac_tenancy_chain']) {
    $attributes = explode('|', $response['sbac_tenancy_chain']);
    if ($attributes) {
      $user_fields = array(
        'role_id' => 'role_id',
        'name' => 'name',
        'level' => 'level',
        'client_id' => 'client_id',
        'client' => 'client',
        'group_of_state_ids' => 'group_of_state_ids',
        'group_of_states' => 'group_of_states',
        'state_id' => 'state_id',
        'state' => 'state',
        'group_of_district_ids' => 'group_of_district_ids',
        'group_of_districts' => 'group_of_districts',
        'district_id' => 'district_id',
        'district' => 'district',
        'group_of_institution_ids' => 'group_of_institution_ids',
        'group_of_institutions' => 'group_of_institutions',
        'institution_id' => 'institution_id',
        'institution' => 'institution',
      );

      if (count($user_fields) == count($attributes)) {
        $user_attributes = array_combine($user_fields, $attributes);
      }
      unset($user_fields);
      unset($attributes);
    }
  }
  return $user_attributes;
}

/**
 * Get the response from Program Management API.
 *
 * @param $user_attributes
 *
 * @return array
 */
function sbac_sso_program_management_api_request($user_attributes) {
  //  https://pm-dev.opentestsystem.org:8443/programmanagement.rest/tenantchain?STATE_GROUP=SBAC&DISTRICT=Foo
  //  As you can see in the above request, I’m sending it a STATE_GROUP and DISTRICT. A full tenancy chain will contain more than that so you’d send it:
  //  "CLIENT", "STATE_GROUP", "STATE", "DISTRICT_GROUP", "DISTRICT", "INSTITUTION_GROUP", "INSTITUTION"
  //  All of which are in the tenancy chains received in an SSO Assertion.

  $api_response = array();
  $query_string = '';
  $valid_tenancy_chain_indexes = array('client', 'group_of_states', 'state_id', 'group_of_districts', 'district', 'group_of_institutions', 'institution');
  foreach ($user_attributes as $index => $attribute) {
    if (in_array($index, $valid_tenancy_chain_indexes) && $attribute) {
      switch ($index) {
        case 'group_of_states':
          $query_string['STATE_GROUP'] = $attribute;
          break;
        case 'state_id':
          $query_string['STATE'] = $attribute;
          break;
        case 'group_of_districts':
          $query_string['DISTRICT_GROUP'] = $attribute;
          break;
        case 'district_id':
          $query_string['DISTRICT'] = $attribute;
          break;
        case 'group_of_institutions':
          $query_string['INSTITUTION_GROUP'] = $attribute;
          break;
        case 'institution_id':
          $query_string['INSTITUTION'] = $attribute;
          break;
      }
    }
  }

  $data = http_build_query($query_string);
  $post = SBAC_SSO_PROGRAM_API . '?' . $data;
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $post);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($curl, CURLOPT_SSLVERSION,3);
  $result = curl_exec($curl);
  $http_status = curl_getinfo($curl, CURLINFO_HTTP_CODE);
  curl_close($curl);

  error_log("The Program API URL: " . $post);
  error_log("The Program API Reponse: " . $result);
  error_log("The HTTP Status: " . $http_status);
  if ($result && $http_status == 200) {
    $api_response = sbac_sso_parse_program_api_result($result);
  }
  return $api_response;
}

/**
 * Parses the Program Management API response.
 *
 * @param $result
 *
 * @return array
 */
function sbac_sso_parse_program_api_result($result) {
  $api_response = array();
  $json = drupal_json_decode($result);
  $error = FALSE;

  if ($json) {
    if (isset($json['searchInput']) === FALSE || isset($json['tenants']) === FALSE) {
      return $api_response;
    }

    $error = FALSE;
    foreach ($json['tenants'] as $index => $tenant) {
      if (isset($tenant['tenantSubscriptions'])) {
        $tenant_subscriptions = $tenant['tenantSubscriptions'];
        foreach ($tenant_subscriptions as $key => $subscription) {
          if (isset($subscription['component'])) {
            $component = $subscription['component'];
            if (($component['name'] != 'Digital Library' && $component['name'] != 'DigitalLibrary' ) || $subscription['inGoodStanding'] != TRUE) {
              $error = TRUE;
              break;
            }
          }
        }
      }
    }
  }

  if (!$error) {
    $api_response = $result;
  }

  return $api_response;
}

/**
 * Determine which path to take for the user.
 *
 * @param $user_attributes
 *
 * @param $response
 *
 * @return bool|mixed|stdClass
 */
function sbac_sso_determine_user($user_attributes, $response) {
  if ($user = sbac_sso_load_user_by_uuid($response['entry_uuid'])) {
    // First Name = givenName
    // Last Name = sn
    // Email = email
    // Take the tenancy chain you found |232093420|DL_EndUser|INSTITUTION|Amplify|SmarterBalanced|||cat|NC|||229|Daybreak School District|||942|Daybreak Central High|
    // The format of the sbacTenancyChain is as follows:
    // |RoleID|Name|Level|ClientID|Client|GroupOfStatesID|GroupOfStates|StateID|State|GroupOfDistrictsID|GroupOfDistricts|DistrictID|District|GroupOfInstitutionsID|GroupOfInstitutions|InstitutionID|Institution|
    // Preform a string split on this pile delimited string, and grab the
    // value from the positions for State, District, Insitution and update those
    // on the user record. If any are blank, update the DL User record accordingly.
    // If some error occurs in the data updating a user: Kick the user to an error
    // page with Smarter Balanced Contact information and a custom error code
    // (do not include the details pertaining to what the error code is connected to, just the ERROR CODE and NUMBER)
    $user->field_first_name['und'][0]['value'] = $response['given_name'];
    $user->field_last_name['und'][0]['value'] = $response['sn'];
    $user->mail = $response['email'];
    if ($valid = sbac_sso_validate_state_by_name($user_attributes['state'])) {
      $term = current($valid);
      $user->field_state['und'][0]['tid'] = $term->tid;
    }
    $user->field_district_name['und'][0]['value'] = $user_attributes['district'];
    $user->field_school_name['und'][0]['value'] = $user_attributes['institution'];
    $user = user_save($user);
    if (!$user) {
      drupal_goto('sbac-sso-error', array('query' => array('code' => 103)));
    }
  }
  elseif ($user = user_load_by_mail($response['email'])) {
    // Record entryuuid to record for specified email address
    // Update all other fields passed in SAML assertion as described
    // in the first clause above. If some error occurs in the data updating a
    // user: Kick the user to an error page with Smarter Balanced Contact
    // information and a custom error code ( do not include the details pertaining
    // to what the error code is connected to, just the ERROR CODE and NUMBER :
    // ERROR CODE 103: Error updating user with user attributes that were passed.
    $user->field_first_name['und'][0]['value'] = $response['given_name'];
    $user->field_last_name['und'][0]['value'] = $response['sn'];
    $user->mail = $response['email'];
    if ($valid = sbac_sso_validate_state_by_name($user_attributes['state'])) {
      $term = current($valid);
      $user->field_state['und'][0]['tid'] = $term->tid;
    }
    $user->field_district_name['und'][0]['value'] = $user_attributes['district'];
    $user->field_school_name['und'][0]['value'] = $user_attributes['institution'];
    $user->field_sso_uuid['und'][0]['value'] = $user_attributes['role_id'];
    $user = user_save($user);
    if (!$user) {
      drupal_goto('sbac-sso-error', array('query' => array('code' => 103)));
    }
  }
  else {
    // Create a user record for this user with the end user role, and record
    // their userUUID to that record. Use all attributes that were updated
    // in first clause to create the record. If some error occurs in the data
    // creating a user: Kick the user to an error page with Smarter Balanced
    // Contact information and a custom error code ( do not include the details
    // pertaining to what the error code is connected to, just the ERROR CODE and NUMBER :
    // ERROR CODE 104: Error creating user with user attributes that were passed.
    $user = sbac_sso_create_user_record($response, $user_attributes);
    if (!$user) {
      drupal_goto('sbac-sso-error', array('query' => array('code' => 104)));
    }
  }
  return $user;
}

/**
 * Validates the state id.
 *
 * @param int $state_id
 *   The possible term ID.
 *
 * @return string
 */
function sbac_sso_validate_state_id($state_id) {
  $term = taxonomy_term_load($state_id);
  if ($term) {
    return $state_id;
  }
  return '';
}

/**
 * Validates the state name.
 *
 * @param string $state_name
 *   The possible term name.
 *
 * @return string
 */
function sbac_sso_validate_state_by_name($state_name) {
  $term = taxonomy_get_term_by_name($state_name, 'states');
  if ($term) {
    return $term;
  }
  return '';
}

/**
 * Create the user record.
 *
 * @param array $response
 *   The response from SAML.
 * @param array $user_attributes
 *   The response from the tenancy chain.
 *
 * @return bool|stdClass
 */
function sbac_sso_create_user_record($response, $user_attributes) {
  $new_user = new stdClass();
  $new_user->uid = 0;
  $new_user->cache = 0;

  $edit['name'] = $response['email'];
  $edit['pass'] = user_password(10);
  $edit['mail'] = $response['email'];
  $edit['init'] = $response['email'];
  $edit['timezone'] = date_default_timezone(TRUE);
  $edit['status'] = 1;
  $edit['field_first_name']['und'][0]['value'] = $response['given_name'];
  $edit['field_last_name']['und'][0]['value'] = $response['sn'];
  if ($valid = sbac_sso_validate_state_by_name($user_attributes['state'])) {
    $term = current($valid);
    $edit['field_state']['und'][0]['tid'] = $term->tid;
  }
  $role_id = user_role_load_by_name('basic end user');
  $edit['roles'] = array(DRUPAL_AUTHENTICATED_RID => 'Authenticated User', $role_id->rid => $role_id->name);
  $edit['field_district']['und'][0]['value'] = $user_attributes['district'];
  $edit['field_institution']['und'][0]['value'] = $user_attributes['institution'];
  $edit['field_sso_uuid']['und'][0]['value'] = $response['entry_uuid'];
  return user_save($new_user, $edit);
}

/**
 * Load the user by UUID.
 *
 * @param string $uuid
 *   The uuid to lookup
 *
 * @return bool
 */
function sbac_sso_load_user_by_uuid($uuid) {
  $user = FALSE;
  $sql  = "SELECT u.uid AS uid FROM {users} u ";
  $sql .= "JOIN {field_data_field_sso_uuid} uuid ON u.uid = uuid.entity_id ";
  $sql .= "WHERE uuid.field_sso_uuid_value = :uuid";
  $result = db_query($sql, array(':uuid' => $uuid))->fetchObject();
  if ($result) {
    $user = user_load($result->uid);
  }
  return $user;
}

/**
 * Get the SAML assertion.
 *
 * @return string
 */
function sbac_sso_saml_assertion() {
  global $base_url;
  $string = user_password(10);
  $date = date('Y-m-d') . 'T' . date('H:i:s') . '.073Z';
  $saml_assertion = '
    <samlp:AuthnRequest ID="' . uniqid('_' . $string, TRUE) . '" Version="2.0" IssueInstant="' . $date . '" Destination="http://drcamp-dev.opentestsystem.org:8080/auth/SSORedirect/metaAlias/sbac/idp" ForceAuthn="false" IsPassive="false" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" AssertionConsumerServiceURL="' . $base_url . '/sbac-sso-consume" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol">
        <saml:Issuer xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">' . $base_url . '</saml:Issuer>
        <samlp:NameIDPolicy AllowCreate="true" />
    </samlp:AuthnRequest>';
  return $saml_assertion;
}

/**
 * Get authenticated session.
 *
 * @return array
 */
function sbac_sso_get_authenticated_session() {
  $session = array();
  $session['valid'] = TRUE;
  return $session;
}

function sbac_sso_get_saml_token2() {
  $stuff = 'PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6
cHJvdG9jb2wiIElEPSJzMmFiYzAxYzFkYWU5ZmIxNTY4MDBkM2QzNmU3YzNiNjgyZmE1NWM5NjQi
IEluUmVzcG9uc2VUbz0iX2tYZ1BrSmk0Z2U1Mzg3OTE5MDAwYTYwMy44OTk0ODA1MSIgVmVyc2lv
bj0iMi4wIiBJc3N1ZUluc3RhbnQ9IjIwMTQtMDUtMjlUMTk6NTk6MTZaIiBEZXN0aW5hdGlvbj0i
aHR0cHM6Ly9kZXYuc21hcnRlcmJhbGFuY2VkbGlicmFyeS5vcmcvc2JhYy1zc28tY29uc3VtZSI+
PHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3Nl
cnRpb24iPmh0dHBzOi8vc3NvLXVhdC5zbWFydGVyYmFsYW5jZWQub3JnOjQ0My9hdXRoPC9zYW1s
Oklzc3Vlcj48c2FtbHA6U3RhdHVzIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FN
TDoyLjA6cHJvdG9jb2wiPgo8c2FtbHA6U3RhdHVzQ29kZSAgeG1sbnM6c2FtbHA9InVybjpvYXNp
czpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCIKVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpT
QU1MOjIuMDpzdGF0dXM6U3VjY2VzcyI+Cjwvc2FtbHA6U3RhdHVzQ29kZT4KPC9zYW1scDpTdGF0
dXM+PHNhbWw6QXNzZXJ0aW9uIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIu
MDphc3NlcnRpb24iIElEPSJzMjU5NjRmZmM4ZjE0YWE0Y2U2YjkyZGMzYzk5YjE0ZjRkNTUxYzI5
OGUiIElzc3VlSW5zdGFudD0iMjAxNC0wNS0yOVQxOTo1OToxNloiIFZlcnNpb249IjIuMCI+Cjxz
YW1sOklzc3Vlcj5odHRwczovL3Nzby11YXQuc21hcnRlcmJhbGFuY2VkLm9yZzo0NDMvYXV0aDwv
c2FtbDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAw
MC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGht
PSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIHhtbG5zOmRzPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIi8+CjxkczpTaWduYXR1cmVNZXRob2QgQWxn
b3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiIHhtbG5z
OmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIi8+CjxkczpSZWZlcmVuY2Ug
VVJJPSIjczI1OTY0ZmZjOGYxNGFhNGNlNmI5MmRjM2M5OWIxNGY0ZDU1MWMyOThlIiB4bWxuczpk
cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpUcmFuc2Zvcm1zIHht
bG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlRyYW5zZm9y
bSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQt
c2lnbmF0dXJlIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIv
Pgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwt
ZXhjLWMxNG4jIiB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyIv
Pgo8L2RzOlRyYW5zZm9ybXM+CjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3
LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3Jn
LzIwMDAvMDkveG1sZHNpZyMiLz4KPGRzOkRpZ2VzdFZhbHVlIHhtbG5zOmRzPSJodHRwOi8vd3d3
LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4ycWNpbys5cnpzZHJSaTZEQkdjWEVKTEJOdFk9PC9k
czpEaWdlc3RWYWx1ZT4KPC9kczpSZWZlcmVuY2U+CjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25h
dHVyZVZhbHVlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4K
V1BmT016akxxMkJKVDV6enI4cmRYd3RSc0hTTHIyT3NXMEFkZXJLTWI5aWozTEpnd2F0TWY4UlRm
WFZ1YXdHS2ltbCttWFBKYzFmTQpOcjlUV2ZJNXVCN1J2YysyWmZHRk5wUmNDaVdDemRySTdncE4z
Q1M3OFNIakt3b0RQbkFlaVZKSnEzZkJNalBITjJLWVZkeWpNOW1JCnlxaUhxc1dIc3F3YlVPdGlZ
TEZ5NFkzQzZCQW8rR29teUZ0NWNES2dBK2ZqcFdtc0hxMGI1MU16aHloVFJMOUVsdFBEVHhWcVZS
N0IKSWZuZkEwcUUrb0VNNS9vSGFuRjJ5NEM1dTk5dXF3YWhnZkhTVWg2L1dxL05uSVdQTFpOTFlP
S3FBYXdhMlJQL1cxWm4xQm5GcFhtcwpVejZjcHQ2b0VhNmphUktUa0hjUFNZTlpobkd4ZTg0cWt3
Rm4ydz09CjwvZHM6U2lnbmF0dXJlVmFsdWU+CjxkczpLZXlJbmZvIHhtbG5zOmRzPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlg1MDlEYXRhIHhtbG5zOmRzPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj4KPGRzOlg1MDlDZXJ0aWZpY2F0ZSB4bWxu
czpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+Ck1JSURoekNDQW04Q0JG
T0Y5WkV3RFFZSktvWklodmNOQVFFRUJRQXdnWWN4Q3pBSkJnTlZCQVlUQWxWVE1SQXdEZ1lEVlFR
SURBZEcKYkc5eWFXUmhNUll3RkFZRFZRUUhEQTFYWlhOc1pYa2dRMmhoY0dWc01SNHdIQVlEVlFR
S0RCVkpaR1Z1ZEdsMGVTQkdkWE5wYjI0cwpJRWx1WXk0eEVUQVBCZ05WQkFzTUNGTmxZM1Z5YVhS
NU1Sc3dHUVlEVlFRRERCSmhiWEJzYVdaNVUybG5ibWx1WjBObGNuUXdIaGNOCk1UUXdOVEk0TVRR
ME1USXhXaGNOTWpRd05USTFNVFEwTVRJeFdqQ0JoekVMTUFrR0ExVUVCaE1DVlZNeEVEQU9CZ05W
QkFnTUIwWnMKYjNKcFpHRXhGakFVQmdOVkJBY01EVmRsYzJ4bGVTQkRhR0Z3Wld3eEhqQWNCZ05W
QkFvTUZVbGtaVzUwYVhSNUlFWjFjMmx2Yml3ZwpTVzVqTGpFUk1BOEdBMVVFQ3d3SVUyVmpkWEpw
ZEhreEd6QVpCZ05WQkFNTUVtRnRjR3hwWm5sVGFXZHVhVzVuUTJWeWREQ0NBU0l3CkRRWUpLb1pJ
aHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFJZ1I0akRJeXpjaEEwdUVlaTUzdTF0Vi9CQUdj
bnJQNUF2eWYvSGMKZ0RZeHFCU1pFbnZ2OXNpR2M1VzQ4cHpCZ1Z3SUgrMnVPVGhDaW1NM3R5bllU
a0FVYmVYMHk4VVhiR1A1cWZiMGhQYzNTK0J1d3d5QQplSklLY3AzS29tb1d3ZzFPcDFMdEdZUkxt
U1ZmRDBMUGsrUUhhTEpNRDVGU2h6aWc4d2pybUFLK3NjY3NKVitYTmcxajdzYmVYYy96ClZ6ZUZR
L09FcE1WZ2NQUG9vQUwrK3Fzd0x5VGxob1RWZjNjUVJwZzM5NURpVVpxd3pKdnQrQXdHdVdDbThp
a0FsQ2srMy9hVkh1VUQKZEo4NWZpbmhjU2FoQWNrZ1N6TUpWUXpVUDNHMEtSNzFMK0F4bnJaVENR
QWxqRVlRcE9jZFpGNVpLT21SQWpyUFlZT2xhbDRieHZFQwpBd0VBQVRBTkJna3Foa2lHOXcwQkFR
UUZBQU9DQVFFQVZSeDNWS3BTeFVPTEVrakt5dFhTWFVIdFpNUkFOMUs1OUwxNWZmOUh3UnFyCmhx
TFVwOXh5WDZ6cWg5UTFUL0RoeVpuUTl2NVNlbTZXSnp3UC91ZzNsWVNjVlNvTmdsSmRmaEJTVjBO
TjNwWjZWOTZSYi9NN1BtVXcKREFFNzZ0d1dMME5rSHg4TzhKeXErMWlibDVzRFdHKzExTTdvYnFh
SHpWdm9kRUZvYkVDUTFERVFMVUY4TkVmZjA0dUppQm5kbjZBTApBci84c25UTlp6WER6MU94UmYx
THc5dDZFQWRWSXc4L0RlOFkvSzhHNkszZHNIbHlFU3ZSWGp3NTJQRGhSaGFWbzdhTGV1dWJRTXNR
CncyQy9lSTY2Q1BROVhaTDB0R0cyWUFoOEttSTRna0NHcWVoM2wxVExyRVFvYWNCaGVJRm9RZzJ3
RGlNRmJwNDlEbE53MVE9PQo8L2RzOlg1MDlDZXJ0aWZpY2F0ZT4KPC9kczpYNTA5RGF0YT4KPC9k
czpLZXlJbmZvPgo8L2RzOlNpZ25hdHVyZT48c2FtbDpTdWJqZWN0Pgo8c2FtbDpOYW1lSUQgRm9y
bWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6bmFtZWlkLWZvcm1hdDp0cmFuc2llbnQi
IE5hbWVRdWFsaWZpZXI9Imh0dHBzOi8vc3NvLXVhdC5zbWFydGVyYmFsYW5jZWQub3JnOjQ0My9h
dXRoIj41R1pDN2dldTIwY1lxWXFPNTFNY2NJSndhMEF3PC9zYW1sOk5hbWVJRD48c2FtbDpTdWJq
ZWN0Q29uZmlybWF0aW9uIE1ldGhvZD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmNtOmJl
YXJlciI+CjxzYW1sOlN1YmplY3RDb25maXJtYXRpb25EYXRhIEluUmVzcG9uc2VUbz0iX2tYZ1Br
Smk0Z2U1Mzg3OTE5MDAwYTYwMy44OTk0ODA1MSIgTm90T25PckFmdGVyPSIyMDE0LTA1LTI5VDIw
OjA5OjE2WiIgUmVjaXBpZW50PSJodHRwczovL2Rldi5zbWFydGVyYmFsYW5jZWRsaWJyYXJ5Lm9y
Zy9zYmFjLXNzby1jb25zdW1lIi8+PC9zYW1sOlN1YmplY3RDb25maXJtYXRpb24+Cjwvc2FtbDpT
dWJqZWN0PjxzYW1sOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE0LTA1LTI5VDE5OjQ5OjE2WiIg
Tm90T25PckFmdGVyPSIyMDE0LTA1LTI5VDIwOjA5OjE2WiI+CjxzYW1sOkF1ZGllbmNlUmVzdHJp
Y3Rpb24+CjxzYW1sOkF1ZGllbmNlPmh0dHBzOi8vZGV2LnNtYXJ0ZXJiYWxhbmNlZGxpYnJhcnku
b3JnPC9zYW1sOkF1ZGllbmNlPgo8L3NhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj4KPC9zYW1sOkNv
bmRpdGlvbnM+CjxzYW1sOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxNC0wNS0yOVQx
OTo1OToxNloiIFNlc3Npb25JbmRleD0iczI4NmExYmFjNzc3NDExMjdlZTBmM2ZhMzNjYzJmOWQ5
YTA5YjQ5NTAxIj48c2FtbDpBdXRobkNvbnRleHQ+PHNhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWY+
dXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRU
cmFuc3BvcnQ8L3NhbWw6QXV0aG5Db250ZXh0Q2xhc3NSZWY+PC9zYW1sOkF1dGhuQ29udGV4dD48
L3NhbWw6QXV0aG5TdGF0ZW1lbnQ+PHNhbWw6QXR0cmlidXRlU3RhdGVtZW50PjxzYW1sOkF0dHJp
YnV0ZSBOYW1lPSJzYmFjVVVJRCI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3Jn
LzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5zbWFydGVyYmFs
YW5jZWRsaWJyYXJ5QGFtcGxpZnkuY29tPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRy
aWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWU9InNuIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4bWxu
czp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTp0eXBlPSJ4czpzdHJpbmci
PkFkbWluMTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJp
YnV0ZSBOYW1lPSJlbWFpbCI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIw
MDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5zbWFydGVyYmFsYW5j
ZWRsaWJyYXJ5QGFtcGxpZnkuY29tPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1
dGU+PHNhbWw6QXR0cmlidXRlIE5hbWU9ImVudHJ5dXVpZCI+PHNhbWw6QXR0cmlidXRlVmFsdWUg
eG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0
dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3Ry
aW5nIj43MzRkYjE5Yy02MTczLTQ1YzUtODU0ZS01M2RkZjQxNzhiOTc8L3NhbWw6QXR0cmlidXRl
VmFsdWU+PC9zYW1sOkF0dHJpYnV0ZT48c2FtbDpBdHRyaWJ1dGUgTmFtZT0iY24iPjxzYW1sOkF0
dHJpYnV0ZVZhbHVlIHhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIg
eG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNp
OnR5cGU9InhzOnN0cmluZyI+Q29uc29ydGl1bSBBZG1pbjE8L3NhbWw6QXR0cmlidXRlVmFsdWU+
PC9zYW1sOkF0dHJpYnV0ZT48c2FtbDpBdHRyaWJ1dGUgTmFtZT0ic2JhY1RlbmFuY3lDaGFpbiI+
PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3Rh
bmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj58fERMX0VuZFVzZXJ8fHx8fHxUU3xUZXN0IFN0YXRl
fHx8fHx8fHx8PC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0
cmlidXRlIE5hbWU9ImdpdmVuTmFtZSI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHM9Imh0
dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMu
b3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj5Db25zb3J0
aXVtPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0
ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+';
  return $stuff;

  $saml_endpoint_assertion = '<samlp:Response xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" ID="s28d30c7c006c519561767ba178e6953d0645dfc5b" InResponseTo="_7MG85SP6ow537fd51a5318b7.01741455" Version="2.0" IssueInstant="2014-05-23T23:09:22Z" Destination="https://staging.smarterbalancedlibrary.org/sbac-sso-consume"><saml:Issuer xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">http://drcamp-dev.opentestsystem.org:8080/auth</saml:Issuer><samlp:Status xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol">
    <samlp:StatusCode  xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
    Value="urn:oasis:names:tc:SAML:2.0:status:Success">
    </samlp:StatusCode>
    </samlp:Status><saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" ID="s237e7a8eb49bd9cf05c6832afd40c9dfb3aa4835d" IssueInstant="2014-05-23T23:09:22Z" Version="2.0">
    <saml:Issuer>http://drcamp-dev.opentestsystem.org:8080/auth</saml:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <ds:SignedInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"/>
    <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"/>
    <ds:Reference URI="#s237e7a8eb49bd9cf05c6832afd40c9dfb3aa4835d" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <ds:Transforms xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"/>
    <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"/>
    </ds:Transforms>
    <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1" xmlns:ds="http://www.w3.org/2000/09/xmldsig#"/>
    <ds:DigestValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#">jhBSuiqRiNCZHL1A5J9uJxWqRrY=</ds:DigestValue>
    </ds:Reference>
    </ds:SignedInfo>
    <ds:SignatureValue xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    k8dQ//rOp6AnSFecwZsxMKV3M+oSHjV8rd/+Qnjp5d9GBR09CsNdu+YETyh8KC3WY+pha9vyj9A4
    os3Lr7Hgowr+h0G95av9nCFLYM5iKu/NVB55Aa8YcV28881NRdrHd+FXip0wDxnGQD2Hbs2dd0X2
    IGP48DRPBqBnHGTm4ww=
    </ds:SignatureValue>
    <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <ds:X509Data xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <ds:X509Certificate xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    MIICQDCCAakCBEeNB0swDQYJKoZIhvcNAQEEBQAwZzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNh
    bGlmb3JuaWExFDASBgNVBAcTC1NhbnRhIENsYXJhMQwwCgYDVQQKEwNTdW4xEDAOBgNVBAsTB09w
    ZW5TU08xDTALBgNVBAMTBHRlc3QwHhcNMDgwMTE1MTkxOTM5WhcNMTgwMTEyMTkxOTM5WjBnMQsw
    CQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxMLU2FudGEgQ2xhcmExDDAK
    BgNVBAoTA1N1bjEQMA4GA1UECxMHT3BlblNTTzENMAsGA1UEAxMEdGVzdDCBnzANBgkqhkiG9w0B
    AQEFAAOBjQAwgYkCgYEArSQc/U75GB2AtKhbGS5piiLkmJzqEsp64rDxbMJ+xDrye0EN/q1U5Of+
    RkDsaN/igkAvV1cuXEgTL6RlafFPcUX7QxDhZBhsYF9pbwtMzi4A4su9hnxIhURebGEmxKW9qJNY
    Js0Vo5+IgjxuEWnjnnVgHTs1+mq5QYTA7E6ZyL8CAwEAATANBgkqhkiG9w0BAQQFAAOBgQB3Pw/U
    QzPKTPTYi9upbFXlrAKMwtFf2OW4yvGWWvlcwcNSZJmTJ8ARvVYOMEVNbsT4OFcfu2/PeYoAdiDA
    cGy/F2Zuj8XJJpuQRSE6PtQqBuDEHjjmOQJ0rV/r8mO1ZCtHRhpZ5zYRjhRC9eCbjx9VrFax0JDC
    /FfwWigmrW0Y0Q==
    </ds:X509Certificate>
    </ds:X509Data>
    </ds:KeyInfo>
    </ds:Signature><saml:Subject>
    <saml:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient" NameQualifier="http://drcamp-dev.opentestsystem.org:8080/auth">8G0jO3luqXtxBLrOfjhJw5UKXEP9</saml:NameID><saml:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
    <saml:SubjectConfirmationData InResponseTo="_7MG85SP6ow537fd51a5318b7.01741455" NotOnOrAfter="2014-05-23T23:19:22Z" Recipient="https://staging.smarterbalancedlibrary.org/sbac-sso-consume"/></saml:SubjectConfirmation>
    </saml:Subject><saml:Conditions NotBefore="2014-05-23T22:59:22Z" NotOnOrAfter="2014-05-23T23:19:22Z">
    <saml:AudienceRestriction>
    <saml:Audience>https://staging.smarterbalancedlibrary.org</saml:Audience>
    </saml:AudienceRestriction>
    </saml:Conditions>
    <saml:AuthnStatement AuthnInstant="2014-05-23T23:09:22Z" SessionIndex="s2f6c2a5c1be3b36c49075bde8dda99236e9b5a401"><saml:AuthnContext><saml:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml:AuthnContextClassRef></saml:AuthnContext></saml:AuthnStatement><saml:AttributeStatement><saml:Attribute Name="sbacUUID"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">dlcontributor@gmail.com</saml:AttributeValue></saml:Attribute><saml:Attribute Name="sn"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">Contributor</saml:AttributeValue></saml:Attribute><saml:Attribute Name="email"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">dlcontributor@gmail.com</saml:AttributeValue></saml:Attribute><saml:Attribute Name="entryuuid"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">8276ad03-e1c6-40a2-9058-bc2b861d9064</saml:AttributeValue></saml:Attribute><saml:Attribute Name="cn"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">Thomas Contributor</saml:AttributeValue></saml:Attribute><saml:Attribute Name="sbacTenancyChain"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">||DL_EndUser|STATE||||||TS|||||||||</saml:AttributeValue></saml:Attribute><saml:Attribute Name="givenName"><saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">Thomas</saml:AttributeValue></saml:Attribute></saml:AttributeStatement></saml:Assertion></samlp:Response>';
  return $saml_endpoint_assertion;
}