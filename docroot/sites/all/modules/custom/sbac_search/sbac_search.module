<?php

/**
 * @file.
 * Module to handle all resource searching.
 *
 * Provides:
 *  - Exports search related configuration
 *  - Creates search filters for DL page, RR page and My Resources page
 *  - Handles UI and JS components of searching
 *  - Handles session variables, form submissions and validation.
 */

include_once 'sbac_search.features.inc';
include_once 'includes/landing_page.inc';


define('SBAC_SEARCH_MY_RESOURCES_FILTERS', 'sbac-my-resources-filters');
define('SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_FILTERS', 'sbac-digital-library-filters');
define('SBAC_SEARCH_RESOURCE_REVIEW_FILTERS', 'sbac-resource-review-filters');
define('SBAC_SEARCH_EXTERNAL_RESOURCES_FILTERS', 'sbac-external-resources-filters');

define('SBAC_SEARCH_MY_RESOURCES_SORTS', 'sbac-my-resources-sorts');
define('SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_SORTS', 'sbac-digital-library-sorts');
define('SBAC_SEARCH_DIGIAL_LIBRARY_RESOURCES_PWD', 'sbac-digital-library-pwd');
define('SBAC_SEARCH_RESOURCE_REVIEW_SORTS', 'sbac-resource-review-sorts');

define('SBAC_SEARCH_MY_RESOURCES_COUNT', 'sbac-my-resources-count');
define('SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_COUNT', 'sbac-digital-library-count');
define('SBAC_SEARCH_RESOURCE_REVIEW_COUNT', 'sbac-resource-review-count');

define('SBAC_SEARCH_EXTERNAL_RESOURCE_FILTERS_CLOSED', 'sbac-external-resource-filters-closed');

define('SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS', 'sbac-search-digital-library-keywords');
define('SBAC_SEARCH_EXTERNAL_RESOURCE_KEYWORDS', 'sbac-search-external-resource-keywords');

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_search_update_projects_alter(&$projects) {
  unset($projects['sbac_search']);
}

/**
 *  Implements hook_libraries_info().
 */
function sbac_resource_libraries_info() {
  $libraries['jstree'] = array(
    'name' => 'jsTree',
    'vendor url' => 'http://www.jstree.com//',
    'download url' => 'https://github.com/vakata/jstree/zipball/3.0.8',
    'version' => '3.0.8',
    'files' => array(
      'js' => array(
        'dist/jstree.js',
      ),
      'css' => array(
        'dist/themes/default/style.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function sbac_search_menu() {
  $items = array();

  $items['sbac-search/clear-all'] = array(
    'title' => 'Digital Library Resources',
    'page callback' => 'sbac_resource_clear_library_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function sbac_search_preprocess_page(&$vars) {
  if (strpos($_GET['q'], 'digital-library-resources') !== FALSE) {
    $search_term = '/search_results.php';
    if (isset($_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS]) && $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS]) {
      $search_term = '/search_results.php?q=' . $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS];
      $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS] = '';
    }

    $ga_account = variable_get('googleanalytics_account');
    $js = "var pageTracker1 = _gat._getTracker(\"" . $ga_account . "\");
            pageTracker1._initData();
            pageTracker1._trackPageview(\"" . $search_term . "\");";
    drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
  }
}

/**
 * Clears the search filters and redirects.
 */
function sbac_resource_clear_library_page() {
  if (isset($_GET['location'])) {
    $location = $_GET['location'];
    switch ($location) {
      case 'digital-library-resources':
        $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_FILTERS] = '';
        $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS] = '';
        $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_SORTS] = '';
        unset($_SESSION['load_more']['resources']['page']);
        drupal_goto($location);
        break;
      case 'my-resources':
        $_SESSION[SBAC_SEARCH_MY_RESOURCES_FILTERS] = '';
        $_SESSION[SBAC_SEARCH_MY_RESOURCES_SORTS] = '';
        unset($_SESSION['load_more']['my_resources']['page']);
        drupal_goto($location);
        break;
      case 'resource-review':
        $_SESSION[SBAC_SEARCH_RESOURCE_REVIEW_FILTERS] = '';
        $_SESSION[SBAC_SEARCH_RESOURCE_REVIEW_SORTS] = '';
        unset($_SESSION['load_more']['resource_review']['page']);
        drupal_goto($location);
        break;
      case 'forums':
        $_SESSION[SBAC_FORUM_RESOURCE_FORUM_CATEGORY_FILTERS] = '';
        $_SESSION[SBAC_FORUM_TOPIC_FORUM_CATEGORY_FILTERS] = '';
        drupal_goto($location);
        break;
    }
  }

  $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_FILTERS] = '';
  $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS] = '';
  drupal_goto('digital-library-resources');
}

/**
 * Build the documents before sending them to Solr.
 *
 * Supports all types of
 * hook_apachesolr_index_document_build_' . $entity_type($documents[$id], $entity, $env_id);
 *
 * The function is the follow-up for apachesolr_update_index but then for
 * specific entity types
 *
 * @param ApacheSolrDocument $document
 * @param object $entity
 * @param string $env_id
 *   The machine name of the environment.
 */
function sbac_search_apachesolr_index_document_build_user(ApacheSolrDocument $document, $entity, $env_id) {
  $user = user_load($entity->uid);

  if (isset($user->field_first_name['und'][0]['value'])) {
    $document->ss_first_name = $user->field_first_name['und'][0]['value'];
  }
  if (isset($user->field_last_name['und'][0]['value'])) {
    $document->ss_last_name = $user->field_last_name['und'][0]['value'];
  }
  if (isset($user->field_alternate_email_address['und'][0]['value'])) {
    $document->ss_alternate_email = $user->field_alternate_email_address['und'][0]['value'];
  }
  if (isset($user->field_phone_number['und'][0]['value'])) {
    $document->ss_phone_number = $user->field_phone_number['und'][0]['value'];
  }

  if (isset($user->field_school_name['und'])) {
    foreach ($user->field_school_name['und'] as $key => $value) {
      if (isset($value['value'])) {
        $document->setMultiValue('sm_school_name', $value['value']);
      }
    }
  }

  if (isset($user->field_district_name['und'][0]['value'])) {
    $document->ss_district_name = $user->field_district_name['und'][0]['value'];
  }
  if (isset($user->field_university_name['und'][0]['value'])) {
    $document->ss_university_name = $user->field_university_name['und'][0]['value'];
  }

  if (isset($user->field_subject_s_['und'])) {
    foreach ($user->field_subject_s_['und'] as $key => $value) {
      if (isset($value['value'])) {
        $document->setMultiValue('sm_subject_s', $value['value']);
      }
    }
  }

  if (isset($user->field_grade_level_s_['und'])) {
    foreach ($user->field_grade_level_s_['und'] as $key => $value) {
      if (isset($value['value'])) {
        $document->setMultiValue('sm_grade_level_s', $val);
      }
    }
  }
}

/**
 * Implements hook_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id)
 * 
 * @param ApacheSolrDocument $document
 * @param type $node
 * @param type $env_id
 * 
 */
function sbac_search_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
  if($entity_type == 'node'){
    if ($entity->type == 'resource') {
      // Add Author field
      if($entity->field_author){
        $document->addField('ts_field_author', $entity->field_author[LANGUAGE_NONE][0]['value']);
      }
      // Add Owner field
      if($entity->field_publisher){
        $document->addField('ts_field_publisher', $entity->field_publisher[LANGUAGE_NONE][0]['value']);
      }
      // Add posting option field
      if($entity->field_posting_options){
        $document->addField('is_field_posting_options', $entity->field_posting_options[LANGUAGE_NONE][0]['value']);
      }
      // Add Total Views field
      if($entity->field_total_views){
        $document->addField('is_field_total_views', $entity->field_total_views[LANGUAGE_NONE][0]['value']);
      }
      if($entity->field_node_avg_rating){
        $document->addField('fs_field_node_avg_rating', $entity->field_node_avg_rating[LANGUAGE_NONE][0]['value']);
      }
      // Add document field file names to make doc name searchable
      if($entity->document){
        $documents = array();
        foreach ($entity->document as $key => $value) {
          $document->addField('tm_document_name', $value->filename);
        }
      }
      // If View permissions is set to all states
      if($entity->field_view_permissions['und']['0']['value'] == 0){
        $document->addField('im_field_view_permissions', '0');       
      }
      // If view permissions is restricted to specific states
      else {
        if($entity->field_view_permissions_per_state){
          $states = array();
          foreach ($entity->field_view_permissions_per_state as $state_terms) {
            foreach($state_terms as $state_term){
              $document->addField('im_field_view_permissions', $state_term['tid']);
            }
          }
        }
        else{
          // Give default value if set to restric by states, but no states
          // are selected
          $document->addField('im_field_view_permissions', '0');
        }
      }
    }
    if($entity->uid){
      $contributor_name = sbac_central_get_user_first_last_name($entity->uid);
      $document->addField('ts_contributor_name', $contributor_name);
    }
  }
}
/** 
 * Implements hook_apachesolr_field_name_map_alter(). 
 */ 
function sbac_search_apachesolr_field_name_map_alter(&$map) {
  // Alter 'Author' name to reflect SBAC terminology
  $map['tos_name_formatted'] = t('Contributor (formatted)');
  $map['tos_name'] = t('Contributor (username)');
  
  // Map custom fields
  $map['ts_contributor_name'] = t('Contributor Name (user first/last)');
  $map['ts_field_author'] = t('Author (field_author)'); 
  $map['ts_field_publisher'] = t('Owner (field_publisher)'); 
  $map['im_field_view_permissions'] = t('Resource View Permissions'); 
  $map['tm_document_name'] = t('Document Name'); 
}
/**
 * Implements hook_facetapi_facet_info().
 */
function sbac_search_facetapi_facet_info($searcher_info) {
  $facets = array();
  if (isset($searcher_info['types']['user'])) {
    $facets['school_name'] = array(
      'label' => t('School Name'),
      'description' => t('Filter by School Name.'),
      'field' => 'sm_school_name',
      'values callback' => 'facetapi_callback_user_values',
      'facet mincount allowed' => TRUE,
    );

    $facets['district_name'] = array(
      'label' => t('District Name'),
      'description' => t('Filter by District Name.'),
      'field' => 'ss_district_name',
      'values callback' => 'facetapi_callback_user_values',
      'facet mincount allowed' => TRUE,
    );

    $facets['university_name'] = array(
      'label' => t('University Name'),
      'description' => t('Filter by University Name.'),
      'field' => 'ss_university_name',
      'values callback' => 'facetapi_callback_user_values',
      'facet mincount allowed' => TRUE,
    );

    $facets['subjects'] = array(
      'label' => t('Subjects'),
      'description' => t('Filter by Subjects.'),
      'field' => 'sm_subject_s',
      'values callback' => 'facetapi_callback_user_values',
      'facet mincount allowed' => TRUE,
    );

    $facets['grade_levels'] = array(
      'label' => t('Grade Levels'),
      'description' => t('Filter by Grade Levels.'),
      'field' => 'sm_grade_level_s',
      'values callback' => 'facetapi_callback_user_values',
      'facet mincount allowed' => TRUE,
    );

    // Add facets for all fields attached to the user entity.
    $facets = array_merge($facets, apachesolr_entity_field_facets('user'));
  }
  if (isset($searcher_info['types']['node'])) {
    $facets['posting_options'] = array(
      'name' => 'posting_options',
      'label' => t('Posting Options'),
      'description' => t('The last saved posting determination.'),
      'field' => 'is_field_posting_options',
      'field alias' => 'is_field_posting_options',
      'field api name' => FALSE,
      'field api bundles' => array(),
      'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE, FACETAPI_OPERATOR_OR => TRUE),
      'facet missing allowed' => TRUE,
      'facet mincount allowed' => FALSE,
      'weight' => 0,
      'map options' => array('field_posting_options_1', 'field_posting_options_2'),
      'hierarchy callback' => FALSE,
      'values callback' => FALSE,
      'min callback' => FALSE,
      'max callback' => FALSE,
      'default sorts' => array(
        array('active', SORT_DESC),
        array('count', SORT_DESC),
        array('display', SORT_ASC),
      ),
    );
  }

  return $facets;
}

/**
 * Implements hook_block_info().
 *
 * @return mixed
 */
function sbac_search_block_info() {
  $blocks['sbac_search_categories'] = array(
    'info' => t('Categories'),
    'region' => 'filter',
    'pages' => "digital-library-resources*\nmy-resources*\nresource-review*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'status' => 1,
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['sbac_search_categories_button'] = array(
    'info' => t('Categories'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'status' => 0,
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 1,
  );

  return $blocks;
}

/**
 * Implements hook_block_info_alter().
 *
 * @param $blocks
 * @param $theme
 * @param $code_blocks
 */
function sbac_search_block_info_alter(&$blocks, $theme, $code_blocks) {
  $blocks['search']['form']['status'] = TRUE;
  $blocks['search']['form']['region'] = 'search';
  $blocks['search']['form']['visibility'] = BLOCK_VISIBILITY_LISTED;
  $blocks['search']['form']['pages'] = "digital-library-resources*\ncontent*";
  $blocks['search']['form']['weight'] = 2;

  if (isset($blocks['sbac_search']['sbac_search_categories']) && $theme == 'SBAC') {
    $blocks['sbac_search']['sbac_search_categories']['pages'] = "digital-library-resources*\nmy-resources*\nresource-review*";
  }
  if (isset($blocks['sbac_search']['sbac_search_categories_button']) && $theme = 'SBAC') {
    $blocks['sbac_search']['sbac_search_categories_button']['pages'] = "digital-library-resources*\nmy-resources*\nresource-review*";
  }
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function sbac_search_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'sbac_search_categories':
      $block['subject'] = t('');
      switch (arg(0)) {
        case 'my-resources':
          $block['content'] = drupal_get_form('sbac_search_my_resources_form');
          break;
        case 'digital-library-resources':
          $wrapper_class = 'dlr-page-filter-block-wrapper';
          if ((isset($_SESSION[SBAC_RESOURCE_SMART_SEARCH_HIDE_FILTERS])) &&
            ($_SESSION[SBAC_RESOURCE_SMART_SEARCH_HIDE_FILTERS] == TRUE)
          ) {
            $_SESSION[SBAC_RESOURCE_SMART_SEARCH_HIDE_FILTERS] = FALSE;
            $wrapper_class .= ' js-hide';
          }
          $form = drupal_get_form('sbac_search_digital_library_resources_form');
          $block['content'] = '<div class="' . $wrapper_class . '">' . drupal_render($form) . "</div>";
          break;
        case 'resource-review':
          $block['content'] = drupal_get_form('sbac_search_resource_review_form');
          break;
        default:
          $block['content'] = drupal_get_form('sbac_search_digital_library_resources_form');
          break;
      }

      break;
    case 'sbac_search_categories_button':
      $block['subject'] = t('');
      $content = '<a href="#" data-tooltip title="Categories allow you to filter results using specific attributes. Click to see the available options." id="sbac-search-cat-button" class="active">' . t('Categories') . '</a>';
      $block['content'] = $content;
      break;
  }
  return $block;
}

/**
 * Form for submitting the category filters.
 *
 * @return array
 */
function sbac_search_my_resources_form() {
  $form = array();

  $hide_categories_text = t('Filters');
  $hide_categories_class = 'active';

  $current_filters = NULL;
  if (!empty($_SESSION[SBAC_SEARCH_MY_RESOURCES_FILTERS])) {
    $current_filters = $_SESSION[SBAC_SEARCH_MY_RESOURCES_FILTERS];
    $hide_categories_class = '';
  }

  $form['current_filters'] = array(
    '#prefix' => '<div class="category-hide-container"><a class="category-hide ' . $hide_categories_class . '" href="#">' . $hide_categories_text . '</a></div>',
    '#type' => 'hidden',
    '#value' => $current_filters,
    '#attributes' => array('id' => 'sbac-search-current-filters'),
  );

  $form['search_categories'] = array(
    '#markup' => sbac_search_my_resources_categories(),
  );

  $form['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Apply Filters'),
    '#attributes' => array(
      'id' => 'sbac-search-filter-button',
      'class' => array('js-hide'),
    ),
    '#prefix' => '<div class="category-buttons">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'wrapper' => '',
      'method' => 'replace',
      'effect' => 'fade'
    ),
  );

  return $form;
}

/**
 * Submit handler for categories.
 *
 * @param $form
 * @param $form_state
 */
function sbac_search_my_resources_form_submit(&$form, &$form_state) {
  $_SESSION[SBAC_SEARCH_MY_RESOURCES_FILTERS] = $form_state['input']['current_filters'];
}

/**
 * Form for submitting the category filters.
 *
 * @return array
 */
function sbac_search_resource_review_form() {
  $form = array();

  $hide_categories_text = t('Filters');
  $hide_categories_class = 'active';

  $current_filters = NULL;
  if (!empty($_SESSION[SBAC_SEARCH_RESOURCE_REVIEW_FILTERS])) {
    $current_filters = $_SESSION[SBAC_SEARCH_RESOURCE_REVIEW_FILTERS];
    $hide_categories_class = '';
  }

  $form['current_filters'] = array(
    '#prefix' => '<div class="category-hide-container"><a class="category-hide ' . $hide_categories_class . '" href="#">' . $hide_categories_text . '</a></div>',
    '#type' => 'hidden',
    '#value' => $current_filters,
    '#attributes' => array('id' => 'sbac-search-current-filters'),
  );

  $form['search_categories'] = array(
    '#markup' => sbac_search_resource_review_categories(),
  );

  $form['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Apply Filters'),
    '#attributes' => array(
      'id' => 'sbac-search-filter-button',
      'class' => array('js-hide'),
    ),
    '#prefix' => '<div class="category-buttons">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'wrapper' => '',
      'method' => 'replace',
      'effect' => 'fade'
    ),
  );

  return $form;
}

/**
 * Submit handler for categories.
 *
 * @param $form
 * @param $form_state
 */
function sbac_search_resource_review_form_submit(&$form, &$form_state) {
  $_SESSION[SBAC_SEARCH_RESOURCE_REVIEW_FILTERS] = $form_state['input']['current_filters'];
}

/**
 * Form for submitting the category filters.
 *
 * @return array
 */
function sbac_search_digital_library_resources_form() {
  $form = array();

  $hide_categories_text = t('Filters');
  $hide_categories_class = 'active';

  $current_filters = NULL;
  if (!empty($_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_FILTERS])) {
    $current_filters = $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_FILTERS];
    $hide_categories_class = '';
  }

  $form['current_filters'] = array(
    '#prefix' => '<div class="category-hide-container"><a class="category-hide ' . $hide_categories_class . '" href="#" >' . $hide_categories_text . '</a></div>',
    '#type' => 'hidden',
    '#value' => $current_filters,
    '#attributes' => array('id' => 'sbac-search-current-filters'),
  );

  $form['original_filters'] = array(
    '#type' => 'hidden',
    '#value' => $current_filters,
    '#attributes' => array('id' => 'sbac-search-original-filters'),
  );

  $form['search_categories'] = array(
    '#markup' => sbac_search_digital_library_categories(),
  );

  $current_keywords = NULL;
  if (isset($_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS])) {
    $current_keywords = $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS];
  }
  $form['search_keywords'] = array(
    '#type' => 'hidden',
    '#value' => $current_keywords,
    '#attributes' => array('id' => 'sbac-search-keywords'),
  );

  $form['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Apply Filters'),
    '#attributes' => array(
      'id' => 'sbac-search-filter-button',
      'class' => array('js-hide'),
    ),
    '#prefix' => '<div class="category-buttons">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'wrapper' => '',
      'method' => 'replace',
      'effect' => 'fade'
    ),
  );

  return $form;
}

/**
 * Submit handler for categories.
 *
 * @param $form
 * @param $form_state
 */
function sbac_search_digital_library_resources_form_submit(&$form, &$form_state) {
  $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_FILTERS] = $form_state['input']['current_filters'];
  if (isset($_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS])) {
    $current_keywords = $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS];
    // If the keywords are different, remove filters.
    if ($current_keywords && $current_keywords != $form_state['input']['search_keywords']) {
      $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_FILTERS] = '';
    }
  }
  $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS] = $form_state['input']['search_keywords'];
}

/**
 * Returns the category filters.
 *
 * @return null
 */
function sbac_search_my_resources_categories() {
  $categories = array();
  drupal_add_css(drupal_get_path('module', 'sbac_search') . '/css/sbac_search.css');
  drupal_add_js(drupal_get_path('module', 'sbac_search') . '/js/sbac_search.my_resources.categories.js');
  libraries_load('jstree');

  $allowed_states = array(
    'draft' => 'Draft',
    'submitted' => 'Submitted',
    'gk' => 'Gate-Keeping Review',
    'qc' => 'Quality Criteria Review',
    'artbitration' => 'Arbitration Review',
    'returned' => 'Returned',
    'posted' => 'Posted',
    'removed' => 'Removed'
  );

  // Our custom filters
  $categories['resource_states']['display_name'] = 'Resource Status';
  $categories['resource_states']['vocabulary'] = (object) array(
    'vid' => 'resource-status',
  );
  foreach ($allowed_states as $tid => $display_name) {
    $categories['resource_states']['terms'][] = (object) array(
      'tid' => $tid,
      'name' => $display_name,
    );
    $item = array(
      'data' => $display_name,
      'term' => (object) array(
        'tid' => $tid,
        'vid' => 'resource-status',
        'name' => $display_name,
      )
    );
    $categories['resource_states']['tree']['#items'][] = $item;
  }
  $categories['resource_states']['tree']['#theme'] = 'sbac_filter_item_list';

  _sbac_search_create_taxonomy_filter($categories, 'subject', 'Subjects');
  _sbac_search_create_taxonomy_filter($categories, 'grades', 'Grades');
  _sbac_search_create_taxonomy_filter($categories, 'focus', 'Resource Type');

  $cf_value = NULL;
  $cf_html = array();
  if (isset($_SESSION[SBAC_SEARCH_MY_RESOURCES_FILTERS])) {
    $cf_value = $_SESSION[SBAC_SEARCH_MY_RESOURCES_FILTERS];
    if ($cf_value) {
      $filters = explode('::', $cf_value);
      if ($filters) {
        foreach ($filters as $filter) {
          $filter_info = explode(':', $filter);
          if ($filter_info && sizeof($filter_info) == 2) {
            $vid = $filter_info[0];
            $tid = $filter_info[1];
            if ($vid && $tid) {
              if ($vid == 'resource-status') {
                $cf_html[] = '<div class="current-filter" vid="' . $vid . '" tid="' . $tid . '">' . $allowed_states[$tid] . '</div>';
              }
              else {
                $term = taxonomy_term_load($tid);
                if ($term) {
                  $cf_html[] = '<div class="current-filter" vid="' . $vid . '" tid="' . $tid . '">' . $term->name . '</div>';
                }
              }
            }
          }
        }
      }
    }
  }

  $output = NULL;
  if ($categories) {
    $output = theme('sbac_my_resources_categories', array('categories' => $categories, 'cf_value' => $cf_value, 'cf_html' => $cf_html));
  }
  return $output;
}

/**
 * Returns the category filters.
 *
 * @return null
 */
function sbac_search_resource_review_categories() {
  global $user;
  $categories = array();
  drupal_add_css(drupal_get_path('module', 'sbac_search') . '/css/sbac_search.css');
  drupal_add_js(drupal_get_path('module', 'sbac_search') . '/js/sbac_search.resource_review.categories.js');
  libraries_load('jstree');


  $both_roles = $rr = $rp = FALSE;
  if (in_array('resource reviewer', $user->roles) && in_array('resource publisher', $user->roles)) {
    $both_roles = TRUE;
  }
  else {
    if (in_array('resource reviewer', $user->roles)) {
      $rr = TRUE;
    }
    if (in_array('resource publisher', $user->roles)) {
      $rp = TRUE;
    }
  }

  $resource_states = taxonomy_vocabulary_machine_name_load('resource_states');
  $resource_states_terms = taxonomy_get_tree($resource_states->vid);
  $allowed_both_states = array('Being Reviewed', 'Needs Review', 'Needs Posting');
  $allowed_rr_states = array('Being Reviewed', 'Needs Review');
  $allowed_rp_states = array('Being Reviewed', 'Needs Posting');
  $categories['resource_states']['display_name'] = 'Resource Status';
  $categories['resource_states']['vocabulary'] = $resource_states;
  $categories['resource_states']['terms'] = $resource_states_terms;
  $tree = taxonomy_get_nested_tree($resource_states->vid);
  $categories['resource_states']['tree'] = taxonomy_nested_tree_render($tree);
  foreach($categories['resource_states']['tree']['#items'] as $index => $item){
    if ($both_roles) {
      if (!in_array($item['data'], $allowed_both_states)) {
        unset($categories['resource_states']['tree']['#items'][$index]);
      }
    }
    else {
      if ($rr) {
        if (!in_array($item['data'], $allowed_rr_states)) {
          unset($categories['resource_states']['tree']['#items'][$index]);
        }
      }
      else {
        if ($rp) {
          if (!in_array($item['data'], $allowed_rp_states)) {
            unset($categories['resource_states']['tree']['#items'][$index]);
          }
        }
      }
    }
  }

  _sbac_search_create_taxonomy_filter($categories, 'subject', 'Subjects');
  _sbac_search_create_taxonomy_filter($categories, 'grades', 'Grades');
  _sbac_search_create_taxonomy_filter($categories, 'focus', 'Resource Type');


  $cf_value = NULL;
  $cf_html = array();
  if (isset($_SESSION[SBAC_SEARCH_RESOURCE_REVIEW_FILTERS])) {
    $cf_value = $_SESSION[SBAC_SEARCH_RESOURCE_REVIEW_FILTERS];
    if ($cf_value) {
      $filters = explode('::', $cf_value);
      if ($filters) {
        foreach ($filters as $filter) {
          $filter_info = explode(':', $filter);
          if ($filter_info && sizeof($filter_info) == 2) {
            $vid = $filter_info[0];
            $tid = $filter_info[1];
            if ($vid && $tid) {
              $term = taxonomy_term_load($tid);
              if ($term) {
                $cf_html[] = '<div class="current-filter" vid="' . $vid . '" tid="' . $tid . '">' . $term->name . '</div>';
              }
            }
          }
        }
      }
    }
  }

  $output = NULL;
  if ($categories) {
    $output = theme('sbac_resource_review_categories', array('categories' => $categories, 'cf_value' => $cf_value, 'cf_html' => $cf_html));
  }
  return $output;
}


function _sbac_search_create_taxonomy_filter(&$categories, $vocab_name, $display_name, $facet = NULL) {
  $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
  $categories[$vocab_name]['display_name'] = $display_name;
  $categories[$vocab_name]['vocabulary'] = $vocab;
  $categories[$vocab_name]['terms'] = taxonomy_get_tree($vocab->vid);

  $tree = taxonomy_get_nested_tree($vocab->vid);
  $categories[$vocab_name]['tree'] = taxonomy_nested_tree_render($tree, $facet);
}

function taxonomy_get_nested_tree($vid_or_terms = array(), $max_depth = NULL, $parent = 0, $parents_index = array(), $depth = 0) {
  if (!is_array($vid_or_terms)) {
    $vid_or_terms = taxonomy_get_tree($vid_or_terms);
  }
  foreach ($vid_or_terms as $term) {
    foreach ($term->parents as $term_parent) {
      if ($term_parent == $parent) {
        $return[$term->tid] = $term;
      }
      else {
        $parents_index[$term_parent][$term->tid] = $term;
      }
    }
  }
  foreach ($return as &$term) {
    if (isset($parents_index[$term->tid]) && (is_null($max_depth) || $depth < $max_depth)) {
      $term->children = taxonomy_get_nested_tree($parents_index[$term->tid], $max_depth, $term->tid, $parents_index, $depth + 1);
    }
  }
  return $return;
}

function taxonomy_nested_tree_render($tree, $facet = FALSE, $recurring = FALSE) {
  $items = array();
  if (count($tree)) {
    foreach ($tree as $term) {
      $item = array('data' => $term->name);
      if (isset($term->children)) {
        $item["children"] = taxonomy_nested_tree_render($term->children, $facet, TRUE);
      }
      $item['term'] = $term;
      $item['facet'] = $facet; 
      $items[] = $item;
    }
  }
  
  if ($recurring) {
    return $items;
  }

  return array(
    '#theme' => 'sbac_filter_item_list',
    '#items' => $items,
  );
}

/**
 * Returns the category filters.
 *
 * @return null
 */
function sbac_search_digital_library_categories() {
  $categories = array();
  drupal_add_css(drupal_get_path('module', 'sbac_search') . '/css/sbac_search.css');

  libraries_load('jstree');

  if (arg(0) !== 'digital-library-resources') {
    drupal_add_js(drupal_get_path('module', 'sbac_search') . '/js/sbac_search.digital_library.categories.js');
    _sbac_search_create_taxonomy_filter($categories, 'subject', 'Subjects');
    _sbac_search_create_taxonomy_filter($categories, 'grades', 'Grades');
    _sbac_search_create_taxonomy_filter($categories, 'attributes', 'Formative Assessment Attributes');
    _sbac_search_create_taxonomy_filter($categories, 'digital_media_type', 'Media Types');
    _sbac_search_create_taxonomy_filter($categories, 'focus', 'Resource Type');
    _sbac_search_create_taxonomy_filter($categories, 'intended_end_user', 'Intended End Users');
    _sbac_search_create_taxonomy_filter($categories, 'intended_student_populations', 'Intended Student Populations');
    _sbac_search_create_taxonomy_filter($categories, 'educational_use', 'Educational Use');
    _sbac_search_create_taxonomy_filter($categories, 'smarter_balanced_keyword', 'Module Type');
  }

  $attrs = array(
    'attributes' => array(
      'class' => 'ctools-use-modal ctools-modal-ctools-ccss-style',
      'id' => 'sbac-resource-modal-alignment2',
      'title' => 'Filter Alignment',
    ),
  );
  $link = l('Common Core State Standards', 'sbac_resource/nojs/filter-by-alignment', $attrs);
  $categories['education_alignment']['display_name'] = 'Common Core State Standards';
  $vocab = taxonomy_vocabulary_machine_name_load('education_alignment');
  $categories['education_alignment']['vocabulary'] = $vocab;
  $categories['education_alignment']['terms'] = array();
  $categories['education_alignment']['link'] = $link;

  $cf_value = NULL;
  $cf_html = array();
  if (isset($_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_FILTERS])) {
    $cf_value = $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_FILTERS];
    if ($cf_value) {
      $filters = explode('::', $cf_value);
      if ($filters) {
        foreach ($filters as $filter) {
          $filter_info = explode(':', $filter);
          if ($filter_info && sizeof($filter_info) == 2) {
            $vid = $filter_info[0];
            $tid = $filter_info[1];
            if ($vid && $tid) {
              $term = taxonomy_term_load($tid);
              if ($term) {
                $term_label = $term->name;
                if (isset($term->field_alignment_shortname)) {
                  $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
                  $term_label = $term_wrapper->field_alignment_shortname->value();
                }
                $cf_html[] = '<div class="current-filter" vid="' . $vid . '" tid="' . $tid . '">' . $term_label . '</div>';
              }
            }
          }
        }
      }
    }
  }

  $output = NULL;
  if ($categories) {
    $output = theme('sbac_digital_library_categories', array('categories' => $categories, 'cf_value' => $cf_value, 'cf_html' => $cf_html));
  }

  return $output;
}


/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sbac_search_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_block_form') {
    unset($form['#submit']);
    $form['search_block_form']['#title_display'] = 'invisible';
    $form['search_block_form']['#attributes'] = array('class' => array('sbac-search-textbox'));
    if (isset($_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS])) {
      $form['search_block_form']['#default_value'] = $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS];
    }
    if (current_path() != 'digital-library-resources') {
      $form['#action'] = '/digital-library-resources';
      $form['#submit'][] = 'sbac_search_form_submit';
    }
  }
}

/**
 * Submit handler for search submission.
 *
 * @param $form
 * @param $form_state
 */
function sbac_search_form_submit(&$form, &$form_state) {
  $_SESSION[SBAC_SEARCH_DIGITAL_LIBRARY_KEYWORDS] = $form_state['input']['search_block_form'];
}

/**
 * Implementation of hook_theme()
 */
function sbac_search_theme($existing, $type, $theme, $path) {
  $items['sbac_digital_library_categories'] = array(
    'path' => drupal_get_path('theme', 'SBAC') . '/templates/sbac_search',
    'template' => 'digital-library-categories',
    'variables' => array(
      'categories' => NULL,
      'cf_value' => NULL,
      'cf_html' => NULL,
    ),
  );

  $items['sbac_my_resources_categories'] = array(
    'path' => drupal_get_path('theme', 'SBAC') . '/templates/sbac_search',
    'template' => 'my-resources-categories',
    'variables' => array(
      'categories' => NULL,
      'cf_value' => NULL,
      'cf_html' => NULL,
    ),
  );

  $items['sbac_resource_review_categories'] = array(
    'path' => drupal_get_path('theme', 'SBAC') . '/templates/sbac_search',
    'template' => 'resource-review-categories',
    'variables' => array(
      'categories' => NULL,
      'cf_value' => NULL,
      'cf_html' => NULL,
    ),
  );

  $items['sbac_filter_item_list'] = array(
    'variables' => array(
      'items' => array(),
      'title' => NULL,
      'type' => 'ul',
      'attributes' => array()
    ),
  );
  $items['sbac_landing_page_categories'] = array(
    'path' => drupal_get_path('theme', 'SBAC') . '/templates/sbac_search',
    'template' => 'landing-page-categories',
    'variables' => array(
      'categories' => NULL,
      'cf_value' => NULL,
      'cf_html' => NULL,
    ),
  );

  return $items;
}

/**
 * Default theme implementation for sbac_filter_item_list
 *
 * Borrowed from theme_item_list() but we don't want the wrapping div around the ul element.
 * We also add in our custom classes so our Javascript can target them.
 */
function theme_sbac_filter_item_list($variables) {
  $items = $variables['items'];
  $title = $variables['title'];
  $type = $variables['type'];
  $attributes = $variables['attributes'];

  // Only output the list container and title, if there are any list items.
  // Check to see whether the block title exists before adding a header.
  // Empty headers are not semantic and present accessibility challenges.
  $output = '';
  if (isset($title) && $title !== '') {
    $output .= '<h3>' . $title . '</h3>';
  }

  if (!empty($items)) {
    $output .= "<$type" . drupal_attributes($attributes) . '>';
    $num_items = count($items);
    $i = 0;
    foreach ($items as $item) {
      // Set ID unique if landing page
      if(drupal_is_front_page() == 'sbac'){
        $attributes = array(
          'class' => array(
            'category-filter',
            'category-filter-' . $item['term']->vid . '-' . $item['term']->tid
          ),
          'vid' => $item['term']->vid,
          'tid' => $item['term']->tid,
          'term' => $item['term']->name,
          'id' => $item['facet'] . ':' . $item['term']->tid,
        );
      }
      else{
        $attributes = array(
          'class' => array(
            'category-filter',
            'category-filter-' . $item['term']->vid . '-' . $item['term']->tid
          ),
          'vid' => $item['term']->vid,
          'tid' => $item['term']->tid,
          'term' => $item['term']->name,
          'id' => $item['term']->vid . ':' . $item['term']->tid,
        );
      }
      unset($item['term']);
      $children = array();
      $data = '';
      $i++;
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = '<span class="filter-name">' . $value . '</span>';
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        $attributes['class'][] = 'has-children';
        // Render nested list.
        $data .= theme_sbac_filter_item_list(array('items' => $children, 'title' => NULL, 'type' => $type, 'attributes' => $attributes));
      }
      if ($i == 1) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items) {
        $attributes['class'][] = 'last';
      }
      $output .= '<li' . drupal_attributes($attributes) . '>' . $data . "</li>\n";
    }
    $output .= "</$type>";
  }
  return $output;
}






/**
 * Default theme implementation for sbac_filter_item_list
 *
 * Borrowed from theme_item_list() but we don't want the wrapping div around the ul element.
 * We also add in our custom classes so our Javascript can target them.
 */
function theme_sbac_landing_page_filter_item_list($variables) {
  $items = $variables['items'];
  $title = $variables['title'];
  $type = $variables['type'];
  $attributes = $variables['attributes'];

  // Only output the list container and title, if there are any list items.
  // Check to see whether the block title exists before adding a header.
  // Empty headers are not semantic and present accessibility challenges.
  $output = '';
  if (isset($title) && $title !== '') {
    $output .= '<h3>' . $title . '</h3>';
  }

  if (!empty($items)) {
    $output .= "<$type" . drupal_attributes($attributes) . '>';
    $num_items = count($items);
    $i = 0;
    foreach ($items as $item) {
      $attributes = array(
        'class' => array(
          'category-filter',
          'category-filter-' . $item['term']->vid . '-' . $item['term']->tid
        ),
        'vid' => $item['term']->vid,
        'tid' => $item['term']->tid,
        'term' => $item['term']->name,
        'id' => $item['term']->vid . ':' . $item['term']->tid,
      );
      unset($item['term']);
      $children = array();
      $data = '';
      $i++;
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = '<span class="filter-name">' . $value . '</span>';
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        $attributes['class'][] = 'has-children';
        // Render nested list.
        $data .= theme_sbac_landing_page_filter_item_list(array('items' => $children, 'title' => NULL, 'type' => $type, 'attributes' => $attributes));
      }
      if ($i == 1) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items) {
        $attributes['class'][] = 'last';
      }
      $output .= '<li' . drupal_attributes($attributes) . '>' . $data . "</li>\n";
    }
    $output .= "</$type>";
  }
  return $output;
}

