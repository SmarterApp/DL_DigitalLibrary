<?php

// Hooks and callbacks for integrating with File Entity module for display.
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sbac_media') . '/includes/sbac_media.formatters.inc';

/**
 * Implements hook_media_internet_providers().
 */
function sbac_media_media_internet_providers() {
  $info['MediaInternetSchoolTubeHandler'] = array(
    'title' => t('SchoolTube'),
  );
//  $info['MediaInternetTeacherTubeHandler'] = array(
//    'title' => t('TeacherTube'),
//  );
//  $info['MediaInternetSlideShareHandler'] = array(
//    'title' => t('SlideShare'),
//  );
  return $info;
}

/**
 * Implements hook_stream_wrappers().
 */
function sbac_media_stream_wrappers() {
  return array(
    'schooltube' => array(
      'name' => t('SchoolTube videos'),
      'class' => 'MediaSchoolTubeStreamWrapper',
      'description' => t('Videos provided by SchoolTube.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'teachertube' => array(
      'name' => t('TeacherTube videos'),
      'class' => 'MediaTeacherTubeStreamWrapper',
      'description' => t('Videos provided by TeacherTube.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'slideshare' => array(
      'name' => t('SlideShare presentations'),
      'class' => 'MediaSlideShareStreamWrapper',
      'description' => t('Presentations provided by SlideShare.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),       
  );
}

/**
 * Implements hook_theme().
 */
function sbac_media_theme($existing, $type, $theme, $path) {
  return array(
    'media_sbac_schooltube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-schooltube-video',
    ),
    'media_sbac_teachertube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-teachertube-video',
    ),
    'media_sbac_schooltube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-slideshare-presentation',
    ),        
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Regster the video/youtube mimetype.
 */
function sbac_media_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'video/schooltube';
  $mapping['mimetypes'][] = 'video/teachertube';
  $mapping['mimetypes'][] = 'video/slideshare';
}

/**
 * Implements hook_ctools_plugin_api().
 */
function sbac_media_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );
  if (isset($api_versions[$owner][$api])) {
    return array('version' => $api_versions[$owner][$api]);
  }
}

/*
 * Helper function to create embed URLs because of different implmenetation
 */
function sbac_media_create_embed_url($file) {
  $wrapper = file_stream_wrapper_get_instance_by_uri($file['uri']);
  $parts = $wrapper->get_parameters();
  $id = check_plain($parts['v']);

  switch($file['filemime']) {
    case 'video/schooltube': 
      $url = 'http://www.schooltube.com/embed_force/' . $id;
      break;
    case 'video/slideshare':
      $url = 'http://www.slideshare.net/slideshow/embed_code/' . $id . '?rel=0';
      break;
    case 'video/teachertube':
      $url = 'http://www.teachertube.com/embed.php?pg=' . $id;
      break;
    case 'video/vimeo':
      $url = 'http://player.vimeo.com/video/' . $id . '?title=0&amp;byline=0&amp;portrait=0';
      break;
    case 'video/youtube':
      $url = '//www.youtube.com/embed/' . $id;
      break;
  }
  return url($url, array('external' => TRUE));
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * @param $element
 * @param $form_state
 * @param $context
 */
function sbac_media_field_widget_media_generic_form_alter(&$element, &$form_state, $context) {
  if ($element['#bundle'] == 'resource' && $element['#field_name'] == 'field_file') {
    if (isset($form_state['node']->field_document_id['und'][0])) { // if at least one file.
//      $fake_files = sbac_media_create_fake_files($form_state['node']->field_document_id['und']);
//      $context['items'] = array_merge($context['items'], $fake_files);
    }
  }
}

/**
 * Creates fake files for each document id in alfresco.
 *
 * @param $document_ids
 * @return array
 */
function sbac_media_create_fake_files($document_ids) {
  $fake_files = array();
$count = 0;
//    $fake_files[$count]['fid'] = 519; //514
//    $fake_files[$count]['display'] = 1; //1
//    $fake_files[$count]['description'] = NULL; //null
//    $fake_files[$count]['uid'] = 103; //103
//    $fake_files[$count]['filename'] = 'Sample.docx'; //Sample.docx
//    $fake_files[$count]['uri'] = 'private://resource/nowhere.docx'; //public://resource/Sample_0.docx
//    $fake_files[$count]['filemime'] = 'txt'; //video/mp4
//    $fake_files[$count]['filesize'] = 123456; //28485
//    $fake_files[$count]['status'] = 1; //1
//    $fake_files[$count]['timestamp'] = 192383838; //2293939
//    $fake_files[$count]['type'] = 'document'; //document (document, image, video, audio)
//    $fake_files[$count]['entity_type'] = 'file'; //file
//    $fake_files[$count]['entity_id'] = 519; //514
//    $fake_files[$count]['rdf_mapping'] = array(); //array()
//    $fake_files[$count]['metadata'] = array(); //array()
//    $fake_files[$count]['alt'] = ''; //""
//    $fake_files[$count]['title'] = ''; //""

//  $fake_files['fid'] = 519; //514
//  $fake_files['display'] = 1; //1
//  $fake_files['description'] = NULL; //null
//  $fake_files['uid'] = 103; //103
//  $fake_files['filename'] = 'Sample.docx'; //Sample.docx
//  $fake_files['uri'] = 'private://resource/nowhere.docx'; //public://resource/Sample_0.docx
//  $fake_files['filemime'] = 'txt'; //video/mp4
//  $fake_files['filesize'] = 123456; //28485
//  $fake_files['status'] = 1; //1
//  $fake_files['timestamp'] = 192383838; //2293939
//  $fake_files['type'] = 'document'; //document (document, image, video, audio)
//  $fake_files['entity_type'] = 'file'; //file
//  $fake_files['entity_id'] = 519; //514
//  $fake_files[$count]['rdf_mapping'] = array(); //array()
//  $fake_files['metadata'] = array(); //array()
//  $fake_files['alt'] = ''; //""
//  $fake_files['title'] = ''; //""

  return $fake_files;
}

function sbac_media_field_attach_load($entity_type, $entities, $age, $options) {
  $var = '';
  $fake_files = sbac_media_create_fake_files(array(1,2));
  $entities = array_merge($entities, $fake_files);
}

function sbac_media_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  $var = '';
}

function sbac_media_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  $var = '';
}


/**
 * Allow stream wrappers to have their chance at validation.
 *
 * Any module that implements hook_media_parse will have an
 * opportunity to validate this.
 *
 * @see media_parse_to_uri()
 */
// function sbac_media_add_validate($form, &$form_state) {
//   if ($form_state['values']['op'] == t('Apply')) {
//     return;
//   }
//   $uri = $form_state['values']['sumitted-video'];
//   try {
//     $file = file_uri_to_object($uri, TRUE);
//   }
//   catch (Exception $e) {
//     form_set_error('url', $e->getMessage());
//     return;
//   }

//   if (!$file->uri) {
//     form_set_error('url', t('Please select a video.'));
//     return;
//   }

//   $validators = $form['#validators'];
//   if ($validators) {
//     // Check for errors. @see media_add_upload_validate calls file_save_upload().
//     // this code is ripped from file_save_upload because we just want the validation part.
//     // Call the validation functions specified by this function's caller.
//     $errors = file_validate($file, $validators);

//     if (!empty($errors)) {
//       $message = t('%uri could not be added.', array('%uri' => $uri));
//       if (count($errors) > 1) {
//         $message .= theme('item_list', array('items' => $errors));
//       }
//       else {
//         $message .= ' ' . array_pop($errors);
//       }
//       form_set_error('url', $message);
//       return FALSE;
//     }
//   }
// }

// *
//  * @TODO: Document this function.

// function sbac_media_add_submit($form, &$form_state) {
//   $uri = $form_state['values']['sumitted-video'];
//   try {
//     // Save the remote file
//     $file = file_uri_to_object($uri, TRUE);
//     file_save($file);
//   }
//   catch (Exception $e) {
//     form_set_error('url', $e->getMessage());
//     return;
//   }

//   if (!$file->fid) {
//     form_set_error('url', t('The file %file could not be saved. An unknown error has occurred.', array('%file' => $uri)));
//     return;
//   }
//   else {
//     $form_state['file'] = $file;
//   }

//   // Redirect to the file edit page after submission.
//   // @TODO: media_access() is a wrapper for file_entity_access(). Switch to the
//   // new function when Media 1.x is deprecated.
//   if (media_access('update', $file)) {
//     $destination = array('destination' => 'admin/content/file');
//     if (isset($_GET['destination'])) {
//       $destination = drupal_get_destination();
//       unset($_GET['destination']);
//     }
//     $form_state['redirect'] = array('file/' . $file->fid . '/edit', array('query' => $destination));
//   }
//   else {
//     $form_state['redirect'] = 'admin/content/file';
//   }
// }