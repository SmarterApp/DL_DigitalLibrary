<?php

// Hooks and callbacks for integrating with File Entity module for display.
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sbac_media') . '/includes/sbac_media.formatters.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function sbac_media_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "file_entity" && $api == "file_default_displays") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function sbac_media_menu() {
  $items = array();

  $items['sbac-media/internet-confirm'] = array(
    'page callback' => 'sbac_media_internet_confirm',
    'access arguments' => array('access content'),
    'title' => 'Internet Confirmation',
  );

//  $items['sbac_resource/%ctools_js/delete-resource'] = array(
//    'page callback' => 'sbac_resource_delete_resource_modal_callback',
//    'page arguments' => array(1),
//    'access arguments' => array('access content'),
//    'file' => 'sbac_resource.forms.inc',
//  );
//
//  $items['sbac-resource/download/%node'] = array(
//    'page callback' => 'sbac_resource_download_contents',
//    'page arguments' => array(2),
//    'access arguments' => array('access content'),
//  );
//
//  $items['sbac-resource/download/%node'] = array(
//    'page callback' => 'sbac_resource_download_contents',
//    'page arguments' => array(2),
//    'access arguments' => array('access content'),
//  );
//
//  $items['digital-library-resources'] = array(
//    'title' => 'Digital Library Resources',
//    'page callback' => 'sbac_resource_digital_library_page',
//    'access arguments' => array('access content'),
//    'type' => MENU_NORMAL_ITEM,
//    'menu_name' => 'main-menu',
//    'weight' => -50,
//  );

  return $items;
}

/**
 * Implements hook_media_internet_providers().
 */
function sbac_media_media_internet_providers() {
  $info['MediaInternetSchoolTubeHandler'] = array(
    'title' => t('SchoolTube'),
  );
  $info['MediaInternetTeacherTubeHandler'] = array(
    'title' => t('TeacherTube'),
  );
  $info['MediaInternetSlideShareHandler'] = array(
    'title' => t('SlideShare'),
  );
  return $info;
}

/**
 * Implements hook_stream_wrappers().
 */
function sbac_media_stream_wrappers() {
  return array(
    'schooltube' => array(
      'name' => t('SchoolTube videos'),
      'class' => 'MediaSchoolTubeStreamWrapper',
      'description' => t('Videos provided by SchoolTube.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'teachertube' => array(
      'name' => t('TeacherTube videos'),
      'class' => 'MediaTeacherTubeStreamWrapper',
      'description' => t('Videos provided by TeacherTube.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'slideshare' => array(
      'name' => t('SlideShare presentations'),
      'class' => 'MediaSlideShareStreamWrapper',
      'description' => t('Presentations provided by SlideShare.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),       
  );
}

/**
 * Implements hook_theme().
 */
function sbac_media_theme($existing, $type, $theme, $path) {
  return array(
    'media_sbac_schooltube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-schooltube-video',
    ),
    'media_sbac_teachertube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-teachertube-video',
    ),
    'media_sbac_schooltube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-slideshare-presentation',
    ),        
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Regster the video/youtube mimetype.
 */
function sbac_media_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'video/schooltube';
  $mapping['mimetypes'][] = 'video/teachertube';
  $mapping['mimetypes'][] = 'video/slideshare';
}

/*
 * Helper function to create embed URLs because of different implmenetation
 */
function sbac_media_create_embed_url($file) {
  $wrapper = file_stream_wrapper_get_instance_by_uri($file['uri']);
  $parts = $wrapper->get_parameters();
  $id = check_plain($parts['v']);

  switch($file['filemime']) {
    case 'video/schooltube': 
      $url = '//www.schooltube.com/embed_force/' . $id;
      break;
    case 'video/slideshare':
      $url = '//www.slideshare.net/slideshow/embed_code/' . $id . '?rel=0';
      break;
    case 'video/teachertube':
      $url = 'http://www.teachertube.com/embed.php?pg=video_' . $id;
      break;
    case 'video/vimeo':
      $url = '//player.vimeo.com/video/' . $id;
      break;
    case 'video/youtube':
      $url = '//www.youtube.com/embed/' . $id;
      break;
  }
  return url($url, array('external' => TRUE));
}

/**
 * Perform alterations on file formatters.
 *
 * Set related videos to false for youtube.
 *
 * @param $info
 *   Array of information on file formatters exposed by
 *   hook_file_formatter_info() implementations.
 */
function sbac_media_file_formatter_info_alter(&$info) {
  if (isset($info['media_youtube_video'])) {
    $info['media_youtube_video']['default_settings']['rel'] = FALSE;
  }
}

function sbac_media_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'media_internet_add') {
    $form['#submit'][] = 'sbac_media_internet_add_submit_handler';
  }
}

function sbac_media_internet_add_submit_handler(&$form, &$form_state) {
  if ($form_state['values']['embed_code'] != NULL &&
    (strpos($form_state['values']['embed_code'], 'youtube') ||
     strpos($form_state['values']['embed_code'], 'vimeo'))) {
    $form_state['old_redirect'] = $form_state['redirect'];
    $form_state['redirect'] = array();
    $form_state['redirect'][] = 'sbac-media/internet-confirm';
  }
}

function sbac_media_internet_confirm() {
  //originally this was called (media-browser?fid=123), which runs this code
  // so we might need this.
  $form = drupal_get_form('sbac_media_internet_confirm_form');
  return drupal_render($form);

  $output = array();
  $output['#attached']['library'][] = array('media', 'media_browser_page');

  module_load_include('inc', 'media', 'includes/media.browser');
  $params = media_set_browser_params();

  // If one or more files have been selected, the browser interaction is now
  // complete. Return empty page content to the dialog which now needs to close,
  // but populate Drupal.settings with information about the selected files.
  if (isset($params['fid'])) {
    $fids = is_array($params['fid']) ? $params['fid'] : array($params['fid']);
    if (!is_numeric($fids[0])) {
      throw new Exception('Error selecting media, fid param is not an fid or an array of fids');
    }
    $files = file_load_multiple($fids);
    foreach ($files as $file) {
      media_browser_build_media_item($file);
    }
    $setting = array('media' => array('selectedMedia' => array_values($files)));
    drupal_add_js($setting, 'setting');
    return $output;
  }
}


/**
 * The cancel / delete form
 *
 * @return array
 */
function sbac_media_internet_confirm_form() {
  $form = array();

  $form['hidden_url'] = array(
    '#type' => 'hidden',
    '#value' => $_SERVER['HTTP_REFERER'],
  );

  $form['submit_description'] = array(
    '#markup' => '<p>' . t('
    If you continue, you will no longer be able to review this resource. All review information you have entered will be lost.') . '</p>',
  );

  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => 'Cancel',
    '#attributes' => array('id' => array('edit-cancel-overlay'))
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Delete Draft Resource',
    '#attributes' => array('id' => array('edit-delete-overlay'))
  );

  return $form;
}