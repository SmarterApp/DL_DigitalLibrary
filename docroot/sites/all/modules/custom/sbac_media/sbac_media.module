<?php

// Hooks and callbacks for integrating with File Entity module for display.
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sbac_media') . '/includes/sbac_media.formatters.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function sbac_media_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "file_entity" && $api == "file_default_displays") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function sbac_media_menu() {
  $items = array();

  $items['sbac-media/internet-confirm'] = array(
    'page callback' => 'sbac_media_internet_confirm',
    'access arguments' => array('access content'),
    'title' => 'Internet Confirmation',
  );

  return $items;
}

/**
 * Implements hook_media_internet_providers().
 */
function sbac_media_media_internet_providers() {
  $info['MediaInternetSchoolTubeHandler'] = array(
    'title' => t('SchoolTube'),
  );
  $info['MediaInternetTeacherTubeHandler'] = array(
    'title' => t('TeacherTube'),
  );
  $info['MediaInternetSlideShareHandler'] = array(
    'title' => t('SlideShare'),
  );
  return $info;
}

/**
 * Implements hook_stream_wrappers().
 */
function sbac_media_stream_wrappers() {
  return array(
    'schooltube' => array(
      'name' => t('SchoolTube videos'),
      'class' => 'MediaSchoolTubeStreamWrapper',
      'description' => t('Videos provided by SchoolTube.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'teachertube' => array(
      'name' => t('TeacherTube videos'),
      'class' => 'MediaTeacherTubeStreamWrapper',
      'description' => t('Videos provided by TeacherTube.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'slideshare' => array(
      'name' => t('SlideShare presentations'),
      'class' => 'MediaSlideShareStreamWrapper',
      'description' => t('Presentations provided by SlideShare.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),       
  );
}

/**
 * Implements hook_theme().
 */
function sbac_media_theme($existing, $type, $theme, $path) {
  return array(
    'media_sbac_schooltube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-schooltube-video',
    ),
    'media_sbac_teachertube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-teachertube-video',
    ),
    'media_sbac_schooltube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-slideshare-presentation',
    ),        
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Regster the video/youtube mimetype.
 */
function sbac_media_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'video/schooltube';
  $mapping['mimetypes'][] = 'video/teachertube';
  $mapping['mimetypes'][] = 'video/slideshare';
}

/*
 * Helper function to create embed URLs because of different implmenetation
 */
function sbac_media_create_embed_url($file) {
  $wrapper = file_stream_wrapper_get_instance_by_uri($file['uri']);
  $parts = $wrapper->get_parameters();
  $id = check_plain($parts['v']);

  switch($file['filemime']) {
    case 'video/schooltube': 
      $url = '//www.schooltube.com/embed_force/' . $id;
      break;
    case 'video/slideshare':
      $url = '//www.slideshare.net/slideshow/embed_code/' . $id . '?rel=0';
      break;
    case 'video/teachertube':
      $url = 'http://www.teachertube.com/embed.php?pg=video_' . $id;
      break;
    case 'video/vimeo':
      $url = '//player.vimeo.com/video/' . $id;
      break;
    case 'video/youtube':
      $url = '//www.youtube.com/embed/' . $id;
      break;
  }
  return url($url, array('external' => TRUE));
}

/**
 * Creates a form file upload element custom to SBAC.
 *
 * // embed url ability -> confirmation dialogs after, custom form.
 * // choose file and upload ability -> custom form
 *
 * @param $form
 */
function sbac_resource_media_form_element(&$form, &$form_state) {
  $form['field_file_container'] = array(
    '#prefix'=>'<div id="sbac-field-file-container">',
    '#suffix'=>'</div>',
  );

  if (isset($form['#node']->nid)) {
    $form['field_file_container']['documents_view'] = array(
      '#markup' => views_embed_view('resource_documents', 'documents', $form['#node']->nid),
    );
  }

  $form['field_file_container']['field_embed_video'] = array(
    '#type' => 'textfield',
    '#title' => t('Embed Video URL'),
  );

  $form['field_file_container']['field_embed_button'] = array(
    '#markup' => l('Embed Video', 'sbac-media/nojs/add-embed-confirmation', array(
      'attributes' => array(
        'class' => 'ctools-use-modal small button ctools-modal-ctools-ccss-style',
        'id' => 'sbac-media-modal-embed'
      ),
      'query' => array('nid' => $form['#node']->nid)
    )),
  );

  $form['field_file_container']['field_file_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload2'),
    //'#title_display' => 'invisible',
    '#size' => 22,
    '#theme_wrappers' => array(),
  );

  $form['field_file_container']['field_file_upload_button'] = array(
    '#type' => 'submit',
    '#value' => 'upload',
    '#validate' => array('sbac_resource_media_form_element_validate'),
    '#submit' => array('sbac_resource_media_form_element_submit'),
    '#ajax'=> array(
      'callback'=>'sbac_resource_media_form_element_submit',
      'wrapper'=> 'sbac-field-file-container',
      'method'=> 'replace',
      'effect'=> 'fade',
    ),
  );

  $form['#group_children']['field_file_container'] = 'group_materials';
}

// add validator functions here.
function sbac_resource_media_form_element_validate($form, $form_state) {
  if (!isset($_FILE['files'])) {
    //form_set_error($form['field_file_container']['field_file_upload'], t('You must select a file22'));
  }
  //return $form['field_file_container'];
}

function sbac_resource_media_form_element_submit($form, $form_state) {
  $file = file_save_upload('field_file_upload', array('file_validate_extensions' => array('png gif jpg jpeg')), "public://", $replace = FILE_EXISTS_REPLACE);
  if ($file && !$form_state['executed']) {
    if (isset($form_state['node'])) {
      $node = $form_state['node'];
      $document_id_hash = $file->filename . '::' . $file->filesize . '::' . $file->fid;
      $node->field_document_information[LANGUAGE_NONE][] = array('value' => $document_id_hash);
      entity_save_field(array('field_document_information'), $node, 'node', $node->nid);
    }
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
  }

  // Update the view
  $form['field_file_container']['documents_view']['#markup'] = views_embed_view('resource_documents', 'documents', $form['#node']->nid);
  return $form['field_file_container'];
}
