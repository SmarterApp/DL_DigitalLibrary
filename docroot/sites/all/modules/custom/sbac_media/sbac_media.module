<?php

// Hooks and callbacks for integrating with File Entity module for display.
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'sbac_media') . '/includes/sbac_media.formatters.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function sbac_media_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "file_entity" && $api == "file_default_displays") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function sbac_media_menu() {
  $items = array();

  $items['sbac-media/internet-confirm'] = array(
    'page callback' => 'sbac_media_internet_confirm',
    'access arguments' => array('access content'),
    'title' => 'Internet Confirmation',
  );

  $items['sbac-media/%ctools_js/delete-media'] = array(
    'page callback' => 'sbac_media_delete_media',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_media_internet_providers().
 */
function sbac_media_media_internet_providers() {
  $info['MediaInternetSchoolTubeHandler'] = array(
    'title' => t('SchoolTube'),
  );
  $info['MediaInternetTeacherTubeHandler'] = array(
    'title' => t('TeacherTube'),
  );
  $info['MediaInternetSlideShareHandler'] = array(
    'title' => t('SlideShare'),
  );
  return $info;
}

/**
 * Implements hook_stream_wrappers().
 */
function sbac_media_stream_wrappers() {
  return array(
    'schooltube' => array(
      'name' => t('SchoolTube videos'),
      'class' => 'MediaSchoolTubeStreamWrapper',
      'description' => t('Videos provided by SchoolTube.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'teachertube' => array(
      'name' => t('TeacherTube videos'),
      'class' => 'MediaTeacherTubeStreamWrapper',
      'description' => t('Videos provided by TeacherTube.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'slideshare' => array(
      'name' => t('SlideShare presentations'),
      'class' => 'MediaSlideShareStreamWrapper',
      'description' => t('Presentations provided by SlideShare.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),       
  );
}

/**
 * Implements hook_theme().
 */
function sbac_media_theme($existing, $type, $theme, $path) {
  return array(
    'media_sbac_schooltube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-schooltube-video',
    ),
    'media_sbac_teachertube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-teachertube-video',
    ),
    'media_sbac_schooltube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'sbac_media.theme.inc',
      'path' => $path . '/includes',
      'template' => 'media-slideshare-presentation',
    ),
//    'sbac_resource_media_form_element' => array(
//      'render element' => 'form',
//    ),
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 *
 * Regster the video/youtube mimetype.
 */
function sbac_media_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'video/schooltube';
  $mapping['mimetypes'][] = 'video/teachertube';
  $mapping['mimetypes'][] = 'video/slideshare';
}

/*
 * Helper function to create embed URLs because of different implmenetation
 */
function sbac_media_create_embed_url($file) {
  $wrapper = file_stream_wrapper_get_instance_by_uri($file['uri']);
  $parts = $wrapper->get_parameters();
  $id = check_plain($parts['v']);

  switch($file['filemime']) {
    case 'video/schooltube': 
      $url = '//www.schooltube.com/embed_force/' . $id;
      break;
    case 'video/slideshare':
      $url = '//www.slideshare.net/slideshow/embed_code/' . $id . '?rel=0';
      break;
    case 'video/teachertube':
      $url = 'http://www.teachertube.com/embed.php?pg=video_' . $id;
      break;
    case 'video/vimeo':
      $url = '//player.vimeo.com/video/' . $id;
      break;
    case 'video/youtube':
      $url = '//www.youtube.com/embed/' . $id;
      break;
  }
  return url($url, array('external' => TRUE));
}

/**
 * Creates a form file upload element custom to SBAC.
 *
 * @param $form
 */
function sbac_resource_media_form_element(&$form, &$form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'sbac_media') . '/js/sbac_media.form.js';
  $form['#attached']['js'][] = 'http://code.jquery.com/ui/1.10.3/jquery-ui.js';
  $form['#attached']['css'][] = 'http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css';

  $form['field_file_container']['#tree'] = TRUE;
  $form['field_file_container'] = array(
    '#prefix'=>'<div id="sbac-field-file-container">',
    '#suffix'=>'</div>',
  );

  $media_items = sbac_media_load_items($form['#node']->nid);
  if ($media_items) {
    $output = _sbac_media_create_list($media_items);
    $form['field_file_container']['materials'] = array(
      '#markup' => $output,
    );
  }

  $form['field_file_container']['field_embed_video'] = array(
    '#type' => 'textfield',
    '#title' => t('Embed Video URL'),
  );

  $form['field_file_container']['field_file_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload2'),
    '#size' => 22,
    '#theme_wrappers' => array(),
  );

  $form['field_file_container']['field_file_upload_button'] = array(
    '#type' => 'submit',
    '#value' => 'upload (25MB Max)',
    '#submit' => array('sbac_resource_media_form_element_upload'),
    '#ajax'=> array(
      'callback'=>'sbac_resource_media_form_element_upload',
      'wrapper'=> 'sbac-field-file-container',
      'method'=> 'replace',
      'effect'=> 'fade',
    ),
  );

  $form['#group_children']['field_file_container'] = 'group_materials';
}

/**
 * @param $media_items
 * @return string
 */
function _sbac_media_create_list($media_items) {
  $output = '<div class="header">Material Name</div>';
  $output .= '<div class="header">Operations</div>';
  $output .= '<ul id="sortable">';
  foreach ($media_items as $media_item) {
    // Open.
    $output .= '<li class="ui-state-default">';

    // Image.
    $url = 'public://file.png';
    $image = theme('image_style', array(
      'style_name' => '50x50',
      'path' => $url,
      'attributes' => array('class' => 'awesome-class')
    ));
    $output .= '<span>' . $image . '</span>';

    // Filename.
    $output .= '<span class="ui-icon">' . $media_item['filename'] . '</span>';

    // Filesize.
    $bytes = number_format($media_item['filesize'] / 1024, 2) . ' KB';
    $output .= '<span>' . $bytes . '</span>';

    // Delete link.
    $delete_link = l(t('Delete'), 'sbac-media/nojs/delete-media', array(
      'attributes' => array(
        'class' => 'ctools-use-modal use-ajax ctools-modal-sbac-media-modal-delete-media',
        'id' => 'sbac-media-modal-delete-media'
      ),
      'query' => array(
        'fid' => $media_item['fid'],
        'nid' => $media_item['nid'],
        'id' => $media_item['id'],
      )
    ));
    $output .= '<span>' . $delete_link . '</span>';

    // Close.
    $output .= '</li>';
  }

  $output .= '</ul>';
  return $output;
}

/**
 * The form element submit handler.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function sbac_resource_media_form_element_upload($form, $form_state) {
  $allowed_file_types = array('txt doc docx pdf xls xlsx pptx ppt odt odp mp4 mov mp3 aac png jpg jpeg mpg avi ods');
  $file = file_save_upload('field_file_upload', array('file_validate_extensions' => $allowed_file_types), "private://", $replace = FILE_EXISTS_REPLACE);
  if ($file && !$form_state['executed']) {
    if (isset($form_state['node'])) {
      $node = $form_state['node'];

      // Create the media item, duplicates get checked later.
      $media = new stdClass;
      $media->type = 'media';
      $media->fid = $file->fid;
      $media->nid = $node->nid;
      $media->filename = $file->filename;
      $media->file_size = $file->filesize;
      entity_save('media', $media);
    }
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
  }

  // Update the view
  $media_items = sbac_media_load_items($form['#node']->nid);
  if ($media_items) {
    $output = _sbac_media_create_list($media_items);
    $form['field_file_container']['materials']['#markup'] = $output;
    $form['field_file_container']['materials']['#weight'] = -10;
  }

  return $form['field_file_container'];
}

/**
 * @param $nid
 * @return array
 */
function sbac_media_load_items($nid) {
  $media_items = array();
  if ($nid) {
    $result = db_query("SELECT * FROM {eck_media} WHERE nid = :nid", array(':nid' => $nid));
    foreach ($result as $row) {
      $media_item = array();
      $media_item['id'] = $row->id;
      $media_item['fid'] = $row->file_id;
      $media_item['nid'] = $row->nid;
      $media_item['filename'] = $row->filename;
      $media_item['filesize'] = $row->file_size;
      $media_item['filehash'] = $row->file_hash;
      $media_item['weight'] = $row->weight;
      $media_items[] = $media_item;
    }
  }
  return $media_items;
}

/**
 * Deletes the media record.
 *
 * @param $id
 * @param null $fid
 */
function sbac_media_delete_media_record($id, $fid = NULL) {
  if ($id) {
    db_query('DELETE FROM {eck_media} WHERE id = :id', array(':id' => $id));
  }

  if ($fid) {
    // @TODO
  }
}


/**
 * Displays the media delete modal.
 *
 * @param bool $js
 */
function sbac_media_delete_media($js = FALSE) {
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('ajax-responder');
    ctools_modal_add_js();

    $form_state = array(
      'title' => t('To continue, confirm that you wish to delete this media'),
      'ajax' => $js,
    );

    $output = ctools_modal_form_wrapper('sbac_media_delete_media_form', $form_state);

    // This means the form has been executed.
    if (!empty($form_state['executed'])) {
      $output = array();
      $output[] = ctools_modal_command_dismiss();
      if ($form_state['triggering_element']['#value'] != 'Cancel') {
        // Delete document reference.
        if ($form_state['values']['id']) {
          sbac_media_delete_media_record($form_state['values']['id'], $form_state['values']['fid']);
        }
        $what = url($form_state['values']['hidden_url'], array('fragment' => 'edit-group_materials'));
        $output[] = ctools_ajax_command_redirect($form_state['values']['hidden_url'], 0, array('fragment' => 'edit-group_materials'));
        $output[] = ctools_ajax_command_reload();
      }
    }
    print ajax_render($output);
    exit();
  }
  else {
    return;
  }
}

/**
 * The cancel / delete form
 *
 * @return array
 */
function sbac_media_delete_media_form() {
  $form = array();

  $form['hidden_url'] = array(
    '#type' => 'hidden',
    '#value' => $_SERVER['HTTP_REFERER'],
  );

  $form['fid'] = array(
    '#type' => 'hidden',
    '#value' => $_GET['fid'],
  );

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $_GET['nid'],
  );

  $form['id'] = array(
    '#type' => 'hidden',
    '#value' => $_GET['id'],
  );

  $form['submit_description'] = array(
    '#markup' => '<p>' . t('If you wish to continue, click delete!') . '</p>',
  );

  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => 'Cancel',
    '#attributes' => array('id' => array('edit-cancel-media-overlay'))
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Delete',
    '#attributes' => array('id' => array('edit-delete-media-overlay'))
  );

  return $form;
}