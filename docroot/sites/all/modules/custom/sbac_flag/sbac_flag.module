<?php
/**
 * @file
 * Code for the SBAC Flag feature.
 */

include_once 'sbac_flag.features.inc';

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function sbac_flag_menu() {
  $items = array();

  $items['sbac-flag/%ctools_js/flag-resource'] = array(
    'page callback' => 'sbac_flag_modal_content',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * @param $node
 * @return array|string
 */
function sbac_flag_resource($node) {
  global $user;
  $output = array();

  // if the user has flagged already, display message, else display form.
  if ($flag = sbac_flag_get_user_flag($user->uid)) {

  }
  else {
    $form = drupal_get_form('sbac_flag_resource_form', $node);
    $output = drupal_render($form);
  }

  return $output;
}

/**
 * Gets the flag a user has submitted.
 *
 * @param $uid
 * @return bool
 */
function sbac_flag_get_user_flag($uid) {
  return FALSE;
}

/**
 * The flag form.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function sbac_flag_resource_form($form, $form_state, $node) {
  // Sharing options header
  $form['header'] = array(
    '#type' => 'item',
    '#markup' => '<h2>'.t('Flag this Resource') . '</h2>',
    '#prefix' => '<div class="form-item-title">',
    '#suffix' => '</div>',
  );

  // Optional comment
  $form['optional_comment'] = array(
    '#type' => 'textarea',
    '#title' => 'Details',
    '#prefix' => '<div id="sbac-flag-optional-comment" style="display:none">',
    '#suffix' => '</div>',
    '#maxlength' => 600,
    '#maxlength_js' => TRUE,
    '#attributes' => array('maxlength_js_label' => array('Character count: @remaining')),
  );

  $vocabulary = taxonomy_vocabulary_machine_name_load('resource_flags');
  $terms = taxonomy_get_tree($vocabulary->vid);
  $options = array();
  foreach ($terms as $term) {
    $options[] = $term->name;
  }
  $form['flag_options'] = array(
    '#type' => 'radios',
    '#title' => 'What issue did you find with this Resource?' . theme('form_required_marker'),
    '#options' => $options,
    '#prefix' => '<div id="sbac-flag-options">',
    '#suffix' => '</div>',
  );

  $form['footer'] = array(
    '#type' => 'item',
    '#markup' => 'Flagged resources and users are reviewed by Smarter Balanced Assessment
                  Consortium moderators to determine whether they violate the Terms of Service.
                  Accounts are penalized for violations and serious or repeated violations can
                  lead to account termination.',
    '#prefix' => '<div class="form-item-footer">',
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Flag Resource'),
    '#attributes' => array('class' => array('button')),
    '#validate' => array('sbac_flag_resource_form_validate'),
    '#ajax' => array(
      'wrapper' => 'sbac-flag-resource-form',
      'callback' => 'sbac_flag_resource_form_submit',
      'method' => 'replace',
      'effect' => 'fade'
    ),
  );

  $form['actions']['submit_modal'] = array(
    '#markup' => l(t('Submit (Modal)'), 'sbac-flag/nojs/flag-resource', array(
      'attributes' => array(
        'class' => 'ctools-use-modal button use-ajax ctools-modal-sbac-flag-resource-modal',
        'id' => 'sbac-flag-resource-modal'
      ),
      'query' => array(
        'nid' => $node->nid,
        'flag' => 'SBAC-FLAG',
        'flag_comment' => 'SBAC-FLAG-COMMENT',
      )
    )),
    '#weight' => 4,
  );

  // JS to properly size the modal when submit resource is clicked.
  $js_settings = array(
    'sbac-flag-resource-modal' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 600,
        'height' => 160,
      ),
    ),
  );
  drupal_add_js($js_settings, 'setting');

  return $form;
}

/**
 * Validation on the flag submission.
 *
 * @param $form
 * @param $form_state
 */
function sbac_flag_resource_form_validate(&$form, &$form_state) {
  if ($form_state['values']['flag_options'] == NULL) {
    form_set_error('flag_options', 'Please select a reason to flag resource.');
  }

  if ($form_state['values']['optional_comment'] != NULL) {
    $bad_words = profanity_validate_text($form_state['values']['optional_comment']);
    if ($bad_words) {
      $error_message = 'Please remove any inappropriate language.';
      form_set_error('optional_comment', $error_message);
    }
  }

  $node = menu_get_object();
  $check = node_last_changed($node->nid);
  $form_state['values']['changed'] = $check + 120;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function sbac_flag_resource_form_submit(&$form, &$form_state) {
  $errors = form_get_errors();
  if ($errors) {
    return $form;
  }

  $form['run_js'] = array(
    '#markup' => '<script>jQuery("#sbac-flag-resource-modal").click();</script>',
  );

  return $form;
}

/**
 * The sbac flag modal
 *
 * @param bool $js
 */
function sbac_flag_modal_content($js = FALSE) {
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_add_js('ajax-responder');
    ctools_modal_add_js();
    $form_state = array(
      'title' => t('You are about to flag this resource'),
      'ajax' => TRUE,
    );

    $output = ctools_modal_form_wrapper('sbac_flag_resource_modal_form', $form_state);
    // This means the form has been executed
    if (!empty($form_state['executed'])) {
      $output = array();
      $output[] = ctools_modal_command_dismiss();
      if ($form_state['triggering_element']['#value'] != 'Cancel') {
        // Notify moderator and save a flag in the resource table.
        // remember to save option and message if provided.
        // then redirect user to the same page with new message.

        // create notificaton for resource author
//        if ($task = taskit_get_object('resource_submitted')) {
//          global $user;
//
//          $task->addVisibility($task::VISIBILITY_USER);
//          $task->addEntity('node', $node->nid);
//          $task->addOwningUser($node->uid);
//          $task->addTriggeringUser($user->uid);
//          $task->save();
//        }
      }
    }
    print ajax_render($output);
    exit();
  }
  else {
    return;
  }
}

/**
 * The cancel / delete form
 *
 * @return array
 */
function sbac_flag_resource_modal_form() {
  $form = array();

  $form['hidden_url'] = array(
    '#type' => 'hidden',
    '#value' => arg(0),
  );

  $form['submit_description'] = array(
    '#markup' => '<p>' . t("
    If you proceed the Digital Library moderators will be notified.
    They will review this resource based on your input, so please be
    sure any comments you've provided are clear and actionable.") . '</p>',
  );

  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => 'Cancel',
    '#attributes' => array('class' => array('cancel'))
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Flag Resource',
  );

  return $form;
}
