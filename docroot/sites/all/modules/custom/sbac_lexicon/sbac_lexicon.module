<?php
/**
 * @file
 * Code for the SBAC Lexicon feature.
 */

include_once 'sbac_lexicon.features.inc';

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_lexicon_update_projects_alter(&$projects) {
  unset($projects['sbac_lexicon']);
}

/**
 * Implements hook_menu_alter().
 */
function sbac_lexicon_menu_alter(&$items) {
  // Get all the id's of vocabularies that are configured in the settings.
  $vids = variable_get('lexicon_vids', array());

  // Create a menu item for each vocabulary with the configured path and title.
  foreach ($vids as $vid) {
    // Don't create menu items for vocabularies that are not Lexicon
    // vocabularies.
    if ($vid != 0) {
      $lexicon_path = variable_get('lexicon_path_' . $vid, 'lexicon/' . $vid);
      $items[$lexicon_path]['page callback'] = 'sbac_lexicon_page';
      unset($items[$lexicon_path]['file']);
    }
  }
}

/**
 * Callback
 */
function sbac_lexicon_page($letter = NULL) {
  module_load_include('inc', 'lexicon', 'lexicon.pages');
  $title = drupal_get_title();
  $output = _lexicon_page($letter);

  if ($letter != NULL) {
    if (drupal_strlen($letter) != 8 || drupal_substr($letter, 0, 7) != 'letter_') {
      return MENU_NOT_FOUND;
    }
    else {
      $letter = drupal_substr($letter, 7, 1);
      drupal_set_title(t('@title: @let', array(
        '@title' => $title,
        '@let' => drupal_strtoupper($letter),
      )));
    }
  }
  return $output;
}

/**
 * Implements hook_theme_registry_alter().
 */
function sbac_lexicon_theme_registry_alter(&$theme_registry) {
  $theme_registry['lexicon_overview']['template'] = drupal_get_path('module', 'sbac_lexicon') . '/templates/lexicon-overview';
//  $theme_registry['lexicon_overview']['theme path'] = drupal_get_path('module', 'sbac_lexicon');
  $theme_registry['lexicon_overview']['preprocess functions'][] = 'sbac_preprocess_lexicon_overview';
  $theme_registry['lexicon_alphabar']['template'] = drupal_get_path('module', 'sbac_lexicon') . '/templates/lexicon-alphabar';
  $theme_registry['lexicon_overview_section']['template'] = drupal_get_path('module', 'sbac_lexicon') . '/templates/lexicon-overview-section';
}

/**
 * Callback to add in custom variables for templating
 * @param type $variables
 * @return string
 */
function sbac_preprocess_lexicon_overview(&$variables) {
  drupal_add_css(drupal_get_path('module', 'sbac_lexicon') . '/css/sbac_lexicon.css');

  /* build previous and next links, code taken from lexicon */
  $found_vid = NULL;
  $curr_path = ($_GET['q']);
  $vids = variable_get('lexicon_vids', array());

  // Get the vocabulary-id for the vocabulary which the page callback is called
  // for by comparing the current path to the path that is configured for each
  // Lexicon.
  foreach ($vids as $vid) {
    $tmp_path = variable_get('lexicon_path_' . $vid, 'lexicon/' . $vid);
    if (strpos($curr_path, $tmp_path) !== FALSE) {
      $found_vid = $vid;
    }
  }

  // Check the argument and derive the letter from it if it is correct.
  $args = explode('/', $curr_path);
  if($args && count($args) > 1) {
    $path = $args[0];
    $letter = $args[1];
  } else {
    $path = $curr_path;
  }
  if (isset($letter) && $letter != NULL) {
    $variables['lexicon_overview']->go_to_top_link['fragment'] = $letter;
    if (drupal_strlen($letter) != 8 || drupal_substr($letter, 0, 7) != 'letter_') {
      return MENU_NOT_FOUND;
    }
    else {
      $letter = drupal_substr($letter, 7, 1);
    }
  }

  // Load the entire vocabulary with entities.
  $tree = taxonomy_get_tree($found_vid, 0, NULL, TRUE);
  // Since the tree might not be sorted alphabetically sort it.
  uasort($tree, '_lexicon_tree_sort');

  $letters = array();

  // For each term in the vocabulary get the first letter and put it in the
  // array with the correct link.
  foreach ($tree as $key => $term) {
    if(variable_get("lexicon_allow_no_description", 0) || $term->description) {
      $term->let = drupal_strtolower(drupal_substr($term->name, 0, 1));
      // If the Lexicon is split up in seperate pages per letter the link must
      // refer to the appropriate page.
      $letters[$term->let] = url($path . '/letter_' . $term->let, array(
        'attributes' => array(
          'class' => array(
            'lexicon-item',
          ),
        ),
        'absolute' => TRUE,
      ));
    }
  }

  // redirect to first page with content if this is the entry page
  if($_GET['q'] == $path) {
    reset($letters);
    drupal_goto("$path/letter_" . key($letters));
  }

  $keys = array_keys($letters);
  $index = array_search($letter, $keys);
  if($index > 0) {
    $variables['prev'] = l(t('Previous: @letter', array('@letter' => strtoupper($keys[$index-1]))), $letters[$keys[$index-1]]);
  }
  if($index < count($keys)-1) {
    $variables['next'] = l(t('Next: @letter', array('@letter' => strtoupper($keys[$index+1]))), $letters[$keys[$index+1]]);
  }

  /* edit glossary button */
  if(user_access('administer lexicon')) {
    $variables['edit_link'] = l(t('Edit Glossary'), 'admin/structure/taxonomy/glossary_terms', array('absolute' => TRUE));
  }
}