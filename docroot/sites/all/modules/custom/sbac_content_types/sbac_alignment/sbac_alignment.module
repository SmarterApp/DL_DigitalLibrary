<?php

/**
 * @file.
 * Module to handle the alignment content type AKA Common Core State Standards.
 *
 * Provides:
 *  - The wizard functionality of selecting a CCSS item.
 *  - Export the alignment content type.
 */

include_once 'sbac_alignment.features.inc';
include_once 'sbac_alignment.theme.inc';
/**
 * Variable Definition
 */
define('SBAC_ALIGNMENT_VOCAB_NAME', 'education_alignment');
define('SBAC_ALIGNMENT_CONTAINER', '#sbac-resource-alignment-tag-view');
define('SBAC_ALIGNMENT_TARGET_VOCAB_NAME', 'target_alignment');
define('SBAC_ALIGNMENT_TARGET_CONTAINER', '#sbac-resource-target-tag-view');
define('SBAC_ALIGNMENT_TYPE_VOCAB_NAME', 'alignment_type');
define('SBAC_ALIGNMENT_MAX_DEPTH', 1);
define('SBAC_ALIGNMENT_MOD_PATH', drupal_get_path('module', 'sbac_alignment'));
/**
 * Implements hook_menu().
 */
function sbac_alignment_menu() {
  $items = array();

  //AJAX
  $items['ajax-terms'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_terms_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-alignment-breadcrumbs'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_alignment_breadcrumbs_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-alignment-page'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_alignment_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-alignment-form'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_alignment_form_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-alignment-crud'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_alignment_crud_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );

  // AJAX for Filter dialog. Mimics Ajax callbacks ^
  // TODO: Delete this when the filter widget is no longer needed.
  $items['ajax-alignment-filter-page'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_filter_alignment_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-alignment-filter-form'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_filter_alignment_form_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-filter-alignment-finish-set'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_filter_alignment_finish_set_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-filter-alignment-confirm-remove'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_filter_alignment_confirm_remove_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );

  //FORMS
  $items['alignment-form'] = array(
    'title' => 'AJAX',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sbac_alignment_alignment_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //DEV FUNCTIONS
  $items['test-import'] = array(
    'title' => 'DEV - CCSS Import',
    'page callback' => 'sbac_alignment_test_import',
    'access arguments' => array('admin'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.dev.inc',
  );
  $items['ccss-import'] = array(
    'title' => 'CCSS Import',
    'page callback' => 'sbac_alignment_batch_importer_page',
    'access arguments' => array('admin'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.dev.inc',
  );
  $items['delete-vocab'] = array(
    'title' => 'DEV',
    'page callback' => 'sbac_alignment_taxonomy_delete_vocab',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.dev.inc',
  );

  return $items;
}

/**
 * Stores the alignment type in the session so it doesn't need to be passed around everywhere, and returns it on request.
 * @param bool $alignment_type If this is a ccss or target tag selector.
 * @return array Array of pertinent values for this type of alignment.
 */
function sbac_alignment_type($alignment_type = FALSE) {
  static $storage;
  if ($alignment_type) {
    switch ($alignment_type) {
      case 'ccss':
        $t = SBAC_ALIGNMENT_VOCAB_NAME;
        $c = SBAC_ALIGNMENT_CONTAINER;
        break;
      case 'target':
        $t = SBAC_ALIGNMENT_TARGET_VOCAB_NAME;
        $c = SBAC_ALIGNMENT_TARGET_CONTAINER;
        break;
      default:
        $t = $c = FALSE;
    }
    $storage['alignment_type'] = $t;
    $storage['alignment_container'] = $c;
    $_SESSION['lists']['alignment_type'] = $t;
    $_SESSION['lists']['alignment_container'] = $c;
  } elseif (empty($storage['alignment_type'] && empty($storage['alignment_container']))
    && isset($_SESSION['lists']['alignment_type']) && isset($_SESSION['lists']['alignment_container'])) {
    $storage['alignment_type'] = $_SESSION['lists']['alignment_type'];
    $storage['alignment_container'] = $_SESSION['lists']['alignment_container'];
  }
  return array('type' => $storage['alignment_type'], 'container' => $storage['alignment_container']);
}

function sbac_alignment_type_button_name() {
  $type = sbac_alignment_type();

  switch ($type) {
    case 'ccss':
      return t('Add Standard(s) to Resource');
    case 'target':
      return t('Add Target(s) to Resource');
  }
  return FALSE;
}

function sbac_alignment_type_description() {
  $type = sbac_alignment_type();

  switch ($type) {
    case 'ccss':
      return t('Choose Your Common Core Standard(s), ELA Anchor Standard(s), and/or Mathematical Practice(s)');
    case 'target':
      return t('Choose Your Target Alignment ELA or Math Standard(s)');
  }
  return FALSE;
}

/**
 * Form Callback
 * Alignment form.
 */
function sbac_alignment_alignment_form($form, $form_state, $tid = 0) {
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'sbac_alignment') . '/js/sbac_alignment.js',
  );

  $ref_node = 0;
  if (isset($_GET['tid'])) {
    $tid = $_GET['tid'];
  }

  //if (isset($_POST['ref_node'])) {
  //  $ref_node = $_POST['ref_node'];
  //}

  //$form['alignment_ref'] = array(
  //  '#type' => 'hidden',
  //  '#value' => $ref_node,
  //  '#default_value' => $ref_node,
  //  '#attributes' => array(
  //    'id' => 'alignment_ref',
  //  ),
  //);

  $alignment = sbac_alignment_type();
  $vocab = taxonomy_vocabulary_machine_name_load($alignment['type']);
  $terms = taxonomy_get_tree($vocab->vid, $tid, SBAC_ALIGNMENT_MAX_DEPTH);
  $button = sbac_alignment_type_button_name();

  if (!empty($terms)) {
    foreach ($terms as $term) {
      $form['term-' . $term->tid] = array(
        '#type' => 'checkbox',
        '#title' => $term->name,
        '#title_display' => 'none',
      );
    }
  }
  else {
    $form['noterm'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="form-item large-12 columns"><div class="standard">',
      '#suffix' => '</div></div>',
      '#markup' => t('No Common Core Standard Available'),
    );
  }

  //@TODO KS- change to terms
  //$form['alignment_type'] = array(
  //  '#type' => 'hidden',
  //  '#title' => 'Choose Alignment Type',
  //  '#default_value' => 'Teaches',
  //  '#attributes' => array('id' => 'edit-alignment-type'),
  //);

  $form['ccss-submit'] = array(
    '#markup' => l($button, '#',
      array(
        'attributes' => array(
          'title' => 'Add Standard(s)',
          'class' => array('form-submit', 'button'),
          'id' => 'ccss-submit',
        ),
        'external' => TRUE,
      )
    )
  );
  $form['ccss-cancel'] = array(
    '#markup' => l(t('Cancel'), '#',
      array(
        'attributes' => array(
          'class' => 'button ctools-close-modal close',
          'id' => 'ccss-cancel',
          'title' => 'Cancel',
        ),
        'external' => TRUE,
      )
    )
  );

  $form['#attached'] = array(
    'css' => array(
      SBAC_ALIGNMENT_MOD_PATH . '/css/alignment.css',
    ),
    'js' => array(
      drupal_get_path('theme', 'sbac') . '/js/custom.js',
    ),
  );

  return $form;
}

/**
 * Form Callback
 * Alignment form.
 * TODO: Delete this when the filter widget is no longer needed.
 */
function sbac_alignment_filter_alignment_form($form, $form_state, $tid = 0) {
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'sbac_alignment') . '/js/sbac_filter_alignment.js',
  );

  $ref_node = 0;
  if (isset($_GET['tid'])) {
    $tid = $_GET['tid'];
  }

  if (isset($_POST['ref_node'])) {
    $ref_node = $_POST['ref_node'];
  }

  $form['alignment_ref'] = array(
    '#type' => 'hidden',
    '#value' => $ref_node,
    '#default_value' => $ref_node,
    '#attributes' => array(
      'id' => 'alignment_ref',
    ),
  );

  $vocab = taxonomy_vocabulary_machine_name_load(SBAC_ALIGNMENT_VOCAB_NAME);
  $terms = taxonomy_get_tree($vocab->vid, $tid, SBAC_ALIGNMENT_MAX_DEPTH);

  if (!empty($terms)) {
    foreach ($terms as $term) {
      $form['term-' . $term->tid] = array(
        '#type' => 'checkbox',
        '#title' => $term->name,
        '#title_display' => 'none',
      );
    }
  }
  else {
    $form['noterm'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="form-item large-12 columns"><div class="standard">',
      '#suffix' => '</div></div>',
      '#markup' => t('No Common Core Standard Available'),
    );
  }

  //@TODO KS- change to terms
  $form['alignment_type'] = array(
    '#type' => 'hidden',
    '#title' => 'Choose Alignment Type',
    '#default_value' => 'Teaches',
    '#attributes' => array('id' => 'edit-alignment-type'),
  );

  $form['ccss-submit'] = array(
    '#markup' => l(t('Add Selections'), '#',
      array(
        'attributes' => array(
          'class' => array('form-submit', 'button'),
          'id' => 'ccss-submit',
          'title' => 'Add Selections',
        ),
        'external' => TRUE,
      )
    )
  );
  $form['ccss-cancel'] = array(
    '#markup' => l(t('Cancel'), '#',
      array(
        'attributes' => array(
          'class' => 'button ctools-close-modal close',
          'id' => 'ccss-cancel2',
          'title' => 'Cancel',
        ),
        'external' => TRUE,
      )
    )
  );

  $form['#attached'] = array(
    'css' => array(
      SBAC_ALIGNMENT_MOD_PATH . '/css/alignment.css',
    ),
    'js' => array(
      drupal_get_path('theme', 'sbac') . '/js/custom.js',
    ),
  );

  return $form;
}


/**
 * Custom override
 * Modified drupal_goto to not encode the path
 */
function drupal_custom_goto($path = '', array $options = array(), $http_response_code = 302) {
  // A destination in $_GET always overrides the function arguments.
  // We do not allow absolute URLs to be passed via $_GET, as this can be an attack vector.
  if (isset($_GET['destination']) && !url_is_external($_GET['destination'])) {
    $destination = drupal_parse_url($_GET['destination']);
    $path = $destination['path'];
    $options['query'] = $destination['query'];
    $options['fragment'] = $destination['fragment'];
  }

  drupal_alter('drupal_goto', $path, $options, $http_response_code);

  // The 'Location' HTTP header must be absolute.
  $options['absolute'] = TRUE;

  $url = $path;

  header('Location: ' . $url, TRUE, $http_response_code);

  // The "Location" header sends a redirect status code to the HTTP daemon. In
  // some cases this can be wrong, so we make sure none of the code below the
  // drupal_goto() call gets executed upon redirection.
  drupal_exit($url);
}

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_alignment_update_projects_alter(&$projects) {
  unset($projects['sbac_alignment']);
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sbac_alignment_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'alignment_node_form') {
    $form['field_education_alignment']['#options'] = array();
    if (arg(0) == 'sbac_resource' && arg(1) == 'ajax') {
      global $user;
      /* let administrator see the entire form */
      if (!in_array('administrator', $user->roles)) {
        $form['additional_settings']['#access'] = FALSE;
        $form['comment_settings']['#access'] = FALSE;
        $form['menu']['#access'] = FALSE;
        $form['path']['#access'] = FALSE;
        $form['revision_information']['#access'] = FALSE;
        $form['title']['#access'] = FALSE;
        //$form['field_resource_reference']['#access'] = FALSE;
      }

      $form['title']['#required'] = FALSE;
      $form['actions']['cancel'] = array(
        '#type' => 'submit',
        '#value' => 'Cancel',
        '#weight' => 6,
      );
      $form['actions']['submit']['#value'] = 'Add Alignment to Resource';
      /* make sure our handler fires first before default handler */
      array_unshift($form['actions']['submit']['#submit'], 'sbac_alignment_form_submit_handler');
    }
  }

  if ($form_id == 'resource_node_form') {
    $form['#after_build'][] = 'sbac_alignment_after_build_form';
  }
}

/**
 * After build function to add the submit handler in.
 *
 * Used to add weights to the eck_media table.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function sbac_alignment_after_build_form($form, $form_state) {
  $form['#submit'][] = 'sbac_alignment_widget_form_element_submit_handler';
  return $form;
}

/**
 * Submit handler to set the weights;
 *
 * @param $form
 * @param $form_state
 */
function sbac_alignment_widget_form_element_submit_handler($form, $form_state) {
  if (isset($form_state['node']->nid) && ($form_state['node']->nid)) {
    if ($form_state['triggering_element']['#value'] == 'Close') {
      // delete any temp reference
      $temp_references = db_query('SELECT * FROM {field_data_field_resource_reference} WHERE deleted = :deleted AND field_resource_reference_target_id = :nid', array(':deleted' => 1, ':nid' => $form_state['node']->nid));
      foreach ($temp_references as $reference) {
        // remove the alignment node which removes the reference as well.
        node_delete($reference->entity_id);
      }
      // if status is 2, set back to 1, they didn't really want to delete it.
      db_query('UPDATE {field_data_field_resource_reference} SET deleted = :deleted WHERE field_resource_reference_target_id = :target_id AND deleted = :deleted2', array(':deleted' => 0, ':target_id' => $form_state['node']->nid, ':deleted2' => 2));
    }
    else {
      // temp reference, they clicked save, permanently save the reference now.
      db_query('UPDATE {field_data_field_resource_reference} SET deleted = :deleted WHERE field_resource_reference_target_id = :target_id AND deleted = :deleted2', array(':deleted' => 0, ':target_id' => $form_state['node']->nid, ':deleted2' => 1));
      // now check if a reference is supposed to be removed, if they clicked save and a status of 2 exists, remove the reference
      $remove_references = db_query('SELECT * FROM {field_data_field_resource_reference} WHERE deleted = :deleted AND field_resource_reference_target_id = :nid', array(':deleted' => 2, ':nid' => $form_state['node']->nid));
      foreach ($remove_references as $reference) {
        // remove the alignment node which removed the reference as well.
        node_delete($reference->entity_id);
      }
    }
  }
}

/**
 * Implements hook_form_submit_handler()
 *
 * @param $form
 * @param $form_state
 */
function sbac_alignment_form_submit_handler(&$form, &$form_state) {
  if (isset($_GET['nid'])) {
    /* set title (hidden but required) to field-notation value as per wireframe */
    $form_state['values']['title'] = 'VIEW - ' . $_GET['nid']; //@TODO KS - Get dot notation from the tags
    /* set resource-ref (hidden but required) to parent node-id */
    $form_state['values']['field_resource_reference']['und'][0]['target_id'] = $_GET['nid'];
  }
}

function _sbac_alignment_child_lookup($alignment_type, $id) {
  // Get the vocab we are going to look through
  $vocab = taxonomy_vocabulary_machine_name_load($alignment_type);
  // Do the query to find the related items
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocab->vid, '=')
    ->fieldCondition('field_alignment_crosswalk', 'value', $id, '=');
  $result = $query->execute();
  // If there were results, get the tids and return them
  $entities = array();
  if (isset($result['taxonomy_term']) && count($result['taxonomy_term']) > 0) {
    $entities = array_keys($result['taxonomy_term']);
  }

  return $entities;
}

function _sbac_alignment_build_table_row($tid, $selected, $indent = FALSE, $last = FALSE) {
  // Load the term and get the subject, grade, and clam from its parents
  $term = taxonomy_term_load($tid);
  $parents = taxonomy_get_parents_all($tid);
  $subject = array_pop($parents);
  if (strlen($subject->name) > 2) {
    $subject_name = $subject->name;
  } else {
    $subject_name = $subject->field_alignment_shortname[LANGUAGE_NONE][0]['value'];
  }
  $grade = array_pop($parents);
  $claim = array_pop($parents);
  // Get the publication from the term, and set the label for CC-ELA-v1
  $publication = $term->field_alignment_publication[LANGUAGE_NONE][0]['value'];
  if ($publication == 'CC-ELA-v1') {
    $level_title = "Strand/Domain";
  } else {
    $level_title = "Domain";
  }
  // Get the standard name from the term
  $alignment_vocab = taxonomy_vocabulary_machine_name_load(SBAC_ALIGNMENT_VOCAB_NAME);
  if ($term->vid == $alignment_vocab->vid) {
    $name = '<span class="standard-name">' . $term->field_alignment_shortname[LANGUAGE_NONE][0]['value'] . '</span>';
  } else {
    $name = '<span class="standard-name">' . $term->field_alignment_key[LANGUAGE_NONE][0]['value'] . '</span>';
  }
  // Build the id/name based on the parent/child state and the tid
  $id = "-$tid";
  if ($indent) {
    $row_class = 'standard-child';
    if ($last) {
      $row_class .= '-last';
    }
    $id = 'standard-child' . $id;
  } else {
    $row_class = 'standard-parent';
    $id = 'standard-parent' . $id;
  }
  // Mark the items as checked if it is selected
  $checked = '';
  if ($selected) {
    $checked = ' checked="checked"';
  }

  // Return the row array
  return array(
    'data' => array(
      $name,
      "<div class=\"read-more\">
          <a href=\"#\" title=\"Read More\" class=\"\"><i class=\"accessibility foundicon-eyeball\"></i><span>Read More</span></a>
          <div class=\"more description-hover\">
            <div class=\"description-content\">
              <h2>" . $subject_name . "</h2>
              <div class=\"standard-description\">
                <h3>Standard Description</h3>
                " . $term->description . "
              </div>
              <div class=\"standard-grade\">
                <h3>Grade</h3>
                " . ltrim($term->field_alignment_grade[LANGUAGE_NONE][0]['value'], '0') . "
              </div>
              <div class=\"standard-claim\">
                <h3>" . $level_title . "</h3>
                " . $claim->field_alignment_shortname[LANGUAGE_NONE][0]['value'] . "
              </div>
            </div>
          </div>
        </div>",
      '<input type="checkbox" name="' . $id . '" id="' . $id . '" class="standard-check standard-' . $tid . '" value="' . $tid . '"' . $checked . '/>',
    ),
    'class' => array($row_class),
  );
}

function _sbac_alignment_build_table_rows($alignment_array) {
  $rows = array();
  ksort($alignment_array);
  // Go through the selected items and their children and add the rows for these
  foreach ($alignment_array as $tid => $info) {
    $rows[] = _sbac_alignment_build_table_row($tid, $info['selected']);
    $x = 1;
    $child_n = count($info['children']);
    foreach ($info['children'] as $cid => $child) {
      $last = TRUE;
      if ($x < $child_n) {
        $last = FALSE;
      }
      $x++;
      $rows[] = _sbac_alignment_build_table_row($cid, $child['selected'], TRUE, $last);
    }
  }
  return $rows;
}

function _sbac_alignment_table_builder($new, $current, $main_alignment, $first_select = FALSE) {
  $all_terms = array_merge($new, $current);
  if (count($all_terms)) {
    // Make sure we know what the other taxonomy type is
    $other_alignment = SBAC_ALIGNMENT_VOCAB_NAME;
    if ($main_alignment == $other_alignment) {
      $other_alignment = SBAC_ALIGNMENT_TARGET_VOCAB_NAME;
    }
    // Load taxonomy terms
    $terms = taxonomy_term_load_multiple($all_terms);
    // Load the main vocab
    $main_alignment_vocab = taxonomy_vocabulary_machine_name_load($main_alignment);
    // Initialize the array of selected items
    $alignment_selection = array(SBAC_ALIGNMENT_VOCAB_NAME => array(), SBAC_ALIGNMENT_TARGET_VOCAB_NAME => array());

    // Build the tables with the current items (if any)
    foreach ($terms as $tid => $term) {
      // Set the alignment for this term and the other alignment.
      if ($term->vid == $main_alignment_vocab->vid) {
        $current_alignment = $main_alignment;
        $current_other_alignment = $other_alignment;
      } else {
        $current_alignment = $other_alignment;
        $current_other_alignment = $main_alignment;
      }
      // Add the term and it's children
      // Get the unique value for this standard
      $alignment_unique = $term->field_alignment_key[LANGUAGE_NONE][0]['value'];
      // Get the tids of the associated tags from the other standard
      $children = _sbac_alignment_child_lookup($current_other_alignment, $alignment_unique);
      // Go through each child tid and add it with the proper selection state
      foreach ($children as $child) {
        // Mark this term as selected on both tables if this child was selected as a parent item, or if the current parent is new (we select by default)
        if (in_array($child, $all_terms) || ($first_select && in_array($tid, $new))) {
          $alignment_selection[$current_alignment][$tid]['children'][$child]['selected'] = 1;
          $alignment_selection[$current_other_alignment][$child]['selected'] = 1;

          // Load the child term if it isn't already loaded
          if (!isset($terms[$child])) {
            $cterm = taxonomy_term_load($child);
          } else {
            $cterm = $terms[$child];
          }
          // Get the unique value and children tids for this child
          $other_alignment_unique = $cterm->field_alignment_key[LANGUAGE_NONE][0]['value'];
          $other_children = _sbac_alignment_child_lookup($current_alignment, $other_alignment_unique);
          // Mark this child using the same logic as above
          foreach ($other_children as $other_child) {
            if (in_array($other_child, $all_terms)) {
              $alignment_selection[$current_other_alignment][$child]['children'][$other_child]['selected'] = 1;
            } elseif (!isset($alignment_selection[$current_other_alignment][$child]['children'][$other_child]['selected']) ||
              $alignment_selection[$current_other_alignment][$child]['children'][$other_child]['selected'] != 1) {
              $alignment_selection[$current_other_alignment][$child]['children'][$other_child]['selected'] = 0;
            }
          }
        } elseif (!isset($alignment_selection[$current_alignment][$tid]['children'][$child]['selected'])) {
          $alignment_selection[$current_alignment][$tid]['children'][$child]['selected'] = 0;
        }
      }
      // Mark this item as selected
      $alignment_selection[$current_alignment][$tid]['selected'] = 1;
    }

    // The render array for the CC standards
    $ccss_table = array(
      '#theme' => 'table',
      '#header' => array(t('Standard'), array('data' => t('Operations'), 'colspan' => 2)),
      '#rows' => _sbac_alignment_build_table_rows($alignment_selection[SBAC_ALIGNMENT_VOCAB_NAME]),
    );
    // The render array for the target standards
    $target_table = array(
      '#theme' => 'table',
      '#header' => array(t('Target'), array('data' => t('Operations'), 'colspan' => 2)),
      '#rows' => _sbac_alignment_build_table_rows($alignment_selection[SBAC_ALIGNMENT_TARGET_VOCAB_NAME]),
    );

    // The array of rendered tables
    $tables = array(
      'ccss_html' => render($ccss_table),
      'target_html' => render($target_table),
    );
  } else {
    $tables = array(
      'ccss_html' => '',
      'target_html' => '',
    );
  }
  return $tables;
}
