<?php
/**
 * @file
 * Code for the SBAC Alignment feature.
 */
include_once 'sbac_alignment.features.inc';
include_once 'sbac_alignment.theme.inc';
/**
 * Variable Definition
 */
define('SBAC_ALIGNMENT_VOCAB_NAME', 'education_alignment');
define('SBAC_ALIGNMENT_TYPE_VOCAB_NAME', 'alignment_type');
define('SBAC_ALIGNMENT_MAX_DEPTH', 1);
define('SBAC_ALIGNMENT_MOD_PATH', drupal_get_path('module', 'sbac_alignment'));
/**
 * Implements hook_menu().
 */
function sbac_alignment_menu() {
  $items = array();

  //AJAX
  $items['ajax-terms'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_terms_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-alignment-breadcrumbs'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_alignment_breadcrumbs_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-alignment-page'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_alignment_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-alignment-form'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_alignment_form_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );
  $items['ajax-alignment-crud'] = array(
    'title' => 'AJAX',
    'page callback' => 'sbac_alignment_ajax_alignment_crud_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.ajax.inc',
  );

  //FORMS
  $items['alignment-form'] = array(
    'title' => 'AJAX',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sbac_alignment_alignment_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //DEV FUNCTIONS
  $items['test-import'] = array(
    'title' => 'DEV',
    'page callback' => 'sbac_alignment_test_import',
    'access arguments' => array('admin'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.dev.inc',
  );
  $items['ccss-import'] = array(
    'title' => 'DEV',
    'page callback' => 'sbac_alignment_batch_importer_page',
    'access arguments' => array('admin'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.dev.inc',
  );
  $items['delete-vocab'] = array(
    'title' => 'DEV',
    'page callback' => 'sbac_alignment_delete_vocab',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_alignment.dev.inc',
  );

  return $items;
}

/**
 * Form Callback
 * Alignment form.
 */
function sbac_alignment_alignment_form($form, $form_state, $tid = 0) {
  $ref_node = 0;
  if (isset($_GET['tid'])) {
    $tid = $_GET['tid'];
  }

  if (isset($_POST['ref_node'])) {
    $ref_node = $_POST['ref_node'];
  }

  $form['alignment_ref'] = array(
    '#type' => 'hidden',
    '#value' => $ref_node,
    '#default_value' => $ref_node,
    '#attributes' => array(
      'id' => 'alignment_ref',
    ),
  );

  $vocab = taxonomy_vocabulary_machine_name_load(SBAC_ALIGNMENT_VOCAB_NAME);
  $terms = taxonomy_get_tree($vocab->vid, $tid, SBAC_ALIGNMENT_MAX_DEPTH);

  if (!empty($terms)) {
    foreach ($terms as $term) {
      $form['term-' . $term->tid] = array(
        '#type' => 'checkbox',
        '#title' => $term->name,
        '#title_display' => 'none',
      );
    }
  }
  else {
    $form['noterm'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="form-item large-12 columns"><div class="standard">',
      '#suffix' => '</div></div>',
      '#markup' => t('No Common Core Standard Available'),
    );
  }

  //@TODO KS- change to terms
  $form['alignment_type'] = array(
    '#type' => 'select',
    '#title' => 'Choose Alignment Type',
    '#required' => TRUE,
    '#options' => array(
      'Assesses' => 'Assesses',
      'Teaches' => 'Teaches',
      'Requires' => 'Requires'
    ),
  );

  $form['ccss-submit'] = array(
    '#markup' => l(t('Add to Resource'), '#',
      array(
        'attributes' => array(
          'class' => 'form-submit',
          'id' => 'ccss-submit',
        ),
        'external' => TRUE,
      )
    )
  );
  $form['ccss-cancel'] = array(
    '#markup' => l(t('Cancel'), '#',
      array(
        'attributes' => array(
          'class' => 'button ctools-close-modal close',
          'id' => 'ccss-cancel',
        ),
        'external' => TRUE,
      )
    )
  );

  $form['#attached'] = array(
    'css' => array(
      SBAC_ALIGNMENT_MOD_PATH . '/css/alignment.css',
    ),
    'js' => array(
      drupal_get_path('theme', 'sbac') . '/js/custom.js',
    ),
  );

  return $form;
}

/**
 * Custom override
 * Modified drupal_goto to not encode the path
 */
function drupal_custom_goto($path = '', array $options = array(), $http_response_code = 302) {
  // A destination in $_GET always overrides the function arguments.
  // We do not allow absolute URLs to be passed via $_GET, as this can be an attack vector.
  if (isset($_GET['destination']) && !url_is_external($_GET['destination'])) {
    $destination = drupal_parse_url($_GET['destination']);
    $path = $destination['path'];
    $options['query'] = $destination['query'];
    $options['fragment'] = $destination['fragment'];
  }

  drupal_alter('drupal_goto', $path, $options, $http_response_code);

  // The 'Location' HTTP header must be absolute.
  $options['absolute'] = TRUE;

  $url = $path;

  header('Location: ' . $url, TRUE, $http_response_code);

  // The "Location" header sends a redirect status code to the HTTP daemon. In
  // some cases this can be wrong, so we make sure none of the code below the
  // drupal_goto() call gets executed upon redirection.
  drupal_exit($url);
}

/**
 * Helper Function
 * Adds single terms.
 */
function sbac_alignment_add_term($vid, $term, $parent_tid) {
  $parent = (object) array(
    'name' => $term['name'],
    'description' => $term['description'],
    'weight' => 0,
    'vid' => $vid,
    'parent' => $parent_tid,
    'field_alignment_grade' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $grade = truncate($term['fkGradeLevel']),
        ),
      ),
    ),
    'field_alignment_key' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $grade . '|' . $term['key']
        ),
      ),
    ),
    'field_alignment_publication' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $term['fkPublication']
        ),
      ),
    ),
    'field_alignment_shortname' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $term['shortName']
        ),
      ),
    ),
  );
  taxonomy_term_save($parent);
  return $parent;
}

/**
 * Helper function
 * Add terms into the vocab.
 */
function sbac_alignment_add_terms($vid, $terms, $parent_tid = 0) {
  foreach ($terms as $term => $data) {

    $parent = (object) array(
      'name' => $term,
      'description' => (isset($data['desc'])) ? $data['desc'] : '',
      'weight' => 0,
      'vid' => $vid,
      'parent' => $parent_tid,
    );
    taxonomy_term_save($parent);

    if (isset($data['children']) && !empty($data['children'])) {
      sbac_alignment_add_terms($vid, $data['children'], $parent->tid);
    }
  }
}

/**
 * Helper Function
 * Gets the depth of the term.
 */
function sbac_alignment_term_depth($tid) {
  $parent = db_query("SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = :tid", array(':tid' => $tid))->fetchField();
  if ($parent == 0) {
    return 1;
  }
  else {
    return 1 + sbac_alignment_term_depth($parent);
  }
}

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_alignment_update_projects_alter(&$projects) {
  unset($projects['sbac_alignment']);
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sbac_alignment_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'alignment_node_form') {
    $form['field_education_alignment']['#options'] = array();
    if (arg(0) == 'sbac_resource' && arg(1) == 'ajax') {
      global $user;
      /* let administrator see the entire form */
      if (!in_array('administrator', $user->roles)) {
        $form['additional_settings']['#access'] = FALSE;
        $form['comment_settings']['#access'] = FALSE;
        $form['menu']['#access'] = FALSE;
        $form['path']['#access'] = FALSE;
        $form['revision_information']['#access'] = FALSE;
        $form['title']['#access'] = FALSE;
        //$form['field_resource_reference']['#access'] = FALSE;
      }

      $form['title']['#required'] = FALSE;
      $form['actions']['cancel'] = array(
        '#type' => 'submit',
        '#value' => 'Cancel',
        '#weight' => 6,
      );
      $form['actions']['submit']['#value'] = 'Add Alignment to Resource';
      /* make sure our handler fires first before default handler */
      array_unshift($form['actions']['submit']['#submit'], 'sbac_alignment_form_submit_handler');
    }
  }
}

/**
 * Implements hook_form_submit_handler()
 *
 * @param $form
 * @param $form_state
 */
function sbac_alignment_form_submit_handler(&$form, &$form_state) {
  if (isset($_GET['nid'])) {
    /* set title (hidden but required) to field-notation value as per wireframe */
    $form_state['values']['title'] = 'VIEW - ' . $_GET['nid']; //@TODO KS - Get dot notation from the tags
    /* set resource-ref (hidden but required) to parent node-id */
    $form_state['values']['field_resource_reference']['und'][0]['target_id'] = $_GET['nid'];
  }
}

/**
 * Implements hook_node_load();
 */
function sbac_alignment_node_load($nodes, $types) {
  if (!in_array('resource', $types)) {
    return;
  }

  // forcefully populate the alignment term field based on associated
  // alignment nodes
  foreach ($nodes as $node) {
    if ($node->type == 'resource') {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'alignment')
        ->fieldCondition('field_resource_reference', 'target_id', $node->nid);

      $result = $query->execute();

      if (isset($result['node'])) {
        $terms = array();

        foreach ($result['node'] as $item) {
          if ($alignment = node_load($item->nid)) {
            $terms = array_merge_recursive($terms, $alignment->field_education_alignment);
          }
        }

        $node->field_alignment_term = array_merge_recursive($node->field_alignment_term, $terms);
      }
    }
  }
}