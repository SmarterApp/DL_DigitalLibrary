<?php

include_once 'sbac_alignment.theme.inc';
/**
 * @file
 * Code for the SBAC Alignment feature.
 */

include_once 'sbac_alignment.features.inc';
/**
 * Variable Definition
 */
define('SBAC_ALIGNMENT_VOCAB_NAME', 'education_alignment');
define('SBAC_ALIGNMENT_TYPE_VOCAB_NAME', 'alignment_type');
define('SBAC_ALIGNMENT_MAX_DEPTH', 1);
define('SBAC_ALIGNMENT_MOD_PATH', drupal_get_path('module', 'sbac_alignment'));
/**
 * Implements hook_menu().
 *
 */
function sbac_alignment_menu(){
  $items = array();

  $items['ajax-terms'] = array(
    'title'           => 'AJAX',
    'page callback'   => 'sbac_alignment_ajax_terms_callback',
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
  );

  $items['ajax-alignment-breadcrumbs'] = array(
    'title'           => 'AJAX',
    'page callback'   => 'sbac_alignment_ajax_alignment_breadcrumbs_callback',
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
  );

  $items['ajax-alignment-page'] = array(
    'title'           => 'AJAX',
    'page callback'   => 'sbac_alignment_ajax_alignment_page',
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
  );

  $items['ajax-alignment-form'] = array(
    'title'           => 'AJAX',
    'page callback'   => 'sbac_alignment_ajax_alignment_form_callback',
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
  );

  $items['ajax-alignment-crud'] = array(
    'title'           => 'AJAX',
    'page callback'   => 'sbac_alignment_ajax_alignment_crud_callback',
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
  );

  $items['alignment-form'] = array(
    'title'           => 'AJAX',
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('sbac_alignment_alignment_form'),
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
  );

  $items['devfix'] = array(
    'title'           => 'DEV',
    'page callback'   => 'sbac_alignment_devfix',
    'access arguments'=> array('admin'),
    'type'            => MENU_CALLBACK,
    'file'            => 'sbac_alignment.dev.inc',
  );
  $items['devtest'] = array(
    'title'           => 'DEV',
    'page callback'   => 'sbac_alignment_devtest',
    'access arguments'=> array('admin'),
    'type'            => MENU_CALLBACK,
    'file'            => 'sbac_alignment.dev.inc',
  );
  $items['devdelete'] = array(
    'title'           => 'DEV',
    'page callback'   => 'sbac_alignment_devdelete',
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
    'file'            => 'sbac_alignment.dev.inc',
  );

  return $items;
}
function sbac_alignment_ajax_alignment_crud_callback() {
  $op = 'none';
  $nid = 0;
  if(isset($_POST['op'])){
    $op = $_POST['op'];
  }
  if(isset($_POST['nid'])){
    $nid = $_POST['nid'];
  }

  switch($op) {
    case 'delete':
      node_delete($nid);
    break;
  }

  print drupal_json_encode('deleted: ' . $nid);

  exit;
}
function sbac_alignment_ajax_alignment_page($ref_node = null) {
  drupal_add_js(libraries_get_path('jquery.more') . '/jquery.more.js');
  drupal_add_css(libraries_get_path('jquery.more') . '/jquery.more.css');
  drupal_add_js(drupal_get_path('theme', 'sbac') . '/js/custom.js');
  drupal_add_css(drupal_get_path('module', 'sbac_alignment') . '/css/alignment.css');

  $vocab = taxonomy_vocabulary_machine_name_load(SBAC_ALIGNMENT_VOCAB_NAME);
  $terms = taxonomy_get_tree($vocab->vid, 0, SBAC_ALIGNMENT_MAX_DEPTH);

  $output .= '<div id="alignment-page"><input id="ref_node" style="display:none" value="' . $ref_node . '"> ';
  $output .= '<div class="alignment-breadcrumb"></div>';
  $output .= '<div id="alignment-msg"><ul><li style="display:none;"></li></ul></div>';
  $output .= '<div class="alignment-filter">';
  $output .= theme('alignment_tags', array('terms' => $terms, 'level_title' => 'Choose Your Subject Area'));
  $output .= '</div><div class="alignment-form"></div>';
  $output .= '<div class="alignment-buttons"><a href="" id="edit-submit" class="button disabled">Add to Resource</a><a href="" id="ccss-cancel" class="button ctools-close-modal close">Cancel</a></div>';
  $output .= '</div></div>';

  return $output;
}
function sbac_alignment_ajax_alignment_form_callback() {
  $tid = $_POST['tid'];
  $output['html'] = drupal_render(drupal_get_form('sbac_alignment_alignment_form', $tid));
  print drupal_json_encode($output);
  exit;
}
function sbac_alignment_alignment_form($form, $form_state, $tid = 0) {
  $ref_node = 0;
  if(isset($_GET['tid'])) {
    $tid = $_GET['tid'];
  }

  if(isset($_POST['ref_node'])) {
    $ref_node = $_POST['ref_node'];
  }

  $form['alignment_ref'] = array(
    '#type' => 'hidden',
    '#value' => $ref_node,
    '#default_value' => $ref_node,
  );

  $vocab = taxonomy_vocabulary_machine_name_load(SBAC_ALIGNMENT_VOCAB_NAME);
  $terms = taxonomy_get_tree($vocab->vid, $tid, SBAC_ALIGNMENT_MAX_DEPTH);

  if(!empty($terms)) {
    foreach($terms as $term) {
      $form['term-' . $term->tid] = array(
        '#type' => 'checkbox',
        '#title' => $term->name,
        '#title_display' => 'none',
      );
    }
  }
  else {
    $form['noterm'] = array(
      '#type' => 'markup',
      '#prefix' => '<div class="form-item large-12 columns"><div class="standard">',
      '#suffix' => '</div></div>',
      '#markup' => t('No Common Core Standard Available'),
    );
  }

  //@TODO KS- change to terms
  $form['alignment_type'] = array(
    '#type' => 'select',
    '#title' => 'Alignment Type',
    '#required' => TRUE,
    '#options' => array(
      'Assesses' => 'Assesses',
      'Teaches' => 'Teaches',
      'Requires' => 'Requires'
    ),
  );

  $form['ccss-cancel'] = array(
    '#markup' => l(t('Cancel'), '#',
       array(
         'attributes' => array(
           'class' => 'button ctools-close-modal close',
           'id' => 'ccss-cancel',
          ),
         'external' =>  TRUE,
      )
    )
  );
  
  $form['ccss-submit'] = array(
    '#markup' => l(t('submiting'), '#',
       array(
         'attributes' => array(
           'class' => 'button ctools-close-modal close',
           'id' => 'ccss-submit',
          ),
         'external' =>  TRUE,
      )
    )
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add to Resource',
    '#ajax' => array(
      'callback' => 'sbac_alignment_alignment_form_submit',
      'wrapper' => 'checkboxes-div',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

  $form['#attached'] = array(
      'css' => array(
        SBAC_ALIGNMENT_MOD_PATH . '/css/alignment.css',
      ),
      'js' => array(
        drupal_get_path('theme', 'sbac') . '/js/custom.js',
      ),
    );

  return $form;
}
/**
 * Form Submit Handler
 * sbac_alignment_alignment_form
 */
function sbac_alignment_alignment_form_submit(&$form, &$form_state){
  global $user;
  $values = $form_state['input'];

  $alignment_ref = $values['alignment_ref'];
  $alignment_type = $values['alignment_type'];

  foreach($values as $key => $val) {
    if (strpos($key, 'term-') !== FALSE){
      if(!empty($val)) {
        $temp = explode('term-', $key);
        $tid = $temp[1];

        $types = array();
        $vocab = taxonomy_vocabulary_machine_name_load(SBAC_ALIGNMENT_TYPE_VOCAB_NAME);
        $terms = taxonomy_get_tree($vocab->vid, 0, SBAC_ALIGNMENT_MAX_DEPTH);

        foreach($terms as $term) {
          $types[$term->name] = $term->tid;
        }

        //create alignment
        $node = new stdClass();
        $node->title = "resource-$alignment_ref-alignment-$tid";
        node_object_prepare($node);


        $node->type = 'alignment';
        $node->uid = $user->uid;
        $node->field_education_alignment['und'][]['tid'] = $tid;
        $node->field_alignment_type['und'][]['tid'] = $types[$alignment_type];
        $node->field_resource_reference['und'][]['target_id'] = $alignment_ref;
        node_save($node);
        
        $node = node_load($alignment_ref);
        $node->field_alignment_term['und'][]['tid'] = $tid;
        node_save($node);
      }
    }
  }
  drupal_custom_goto('node/' . $alignment_ref . '/edit#edit-group_tags');
}
/**
 * Custom override
 * Modified drupal_goto to not encode the path
 */
function drupal_custom_goto($path = '', array $options = array(), $http_response_code = 302) {
  // A destination in $_GET always overrides the function arguments.
  // We do not allow absolute URLs to be passed via $_GET, as this can be an attack vector.
  if (isset($_GET['destination']) && !url_is_external($_GET['destination'])) {
    $destination = drupal_parse_url($_GET['destination']);
    $path = $destination['path'];
    $options['query'] = $destination['query'];
    $options['fragment'] = $destination['fragment'];
  }

  drupal_alter('drupal_goto', $path, $options, $http_response_code);

  // The 'Location' HTTP header must be absolute.
  $options['absolute'] = TRUE;

  $url = $path;

  header('Location: ' . $url, TRUE, $http_response_code);

  // The "Location" header sends a redirect status code to the HTTP daemon. In
  // some cases this can be wrong, so we make sure none of the code below the
  // drupal_goto() call gets executed upon redirection.
  drupal_exit($url);
}
/**
 * AJAX Callback
 */
function sbac_alignment_ajax_alignment_breadcrumbs_callback() {
  $output = $terms = array();
  $parents = taxonomy_get_parents_all($_POST['tid']);
  $output['html'] = theme('alignment_breadcrumbs', array('terms' => array_reverse($parents)));
  print drupal_json_encode($output);
  exit;
}

/**
 * Helper Function
 */
function sbac_alignment_add_term($vid, $term, $parent_tid) {
  $parent = (object) array(
    'name' => $term['name'],
    'description' => $term['description'],
    'weight' => 0,
    'vid' => $vid,
    'parent' => $parent_tid,
    'field_alignment_grade' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $grade = truncate($term['fkGradeLevel']),
        ),
      ),
    ),
    'field_alignment_key' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $grade . '|' . $term['key']
        ),
      ),
    ),
    'field_alignment_publication' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $term['fkPublication']
        ),
      ),
    ),
    'field_alignment_shortname' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $term['shortName']
        ),
      ),
    ),
  );
  taxonomy_term_save($parent);
  return $parent;
}
/**
 * Helper function
 *
 * Add terms into the vocab.
 */
function sbac_alignment_add_terms ($vid, $terms, $parent_tid = 0) {
  foreach($terms as $term => $data) {

    $parent = (object) array(
      'name' => $term,
      'description' => (isset($data['desc']))? '' : $data['desc'],
      'weight' => 0,
      'vid' => $vid,
      'parent' => $parent_tid,
    );
    taxonomy_term_save($parent);

    if (isset($data['children']) && !empty($data['children'])) {
      sbac_alignment_add_terms($vid, $data['children'], $parent->tid);
    }
  }
}
/**
 * AJAX Callback
 */
function sbac_alignment_ajax_terms_callback() {
  $subject_array = $output_array = array();
  $ela_titles = array(
    'Choose Your Subject Area',
    'Choose Your Grade',
    'Choose Your Claim',
    'Choose Your Target',
    'Select Your Common Core State Standard(s)',
  );
  $ma_titles = array(
    'Choose Your Subject Area',
    'Choose Your Grade',
    'Choose Your Claim',
    'Choose Your Domain',
    'Choose Your Target',
    'Choose Your Emphasis',
    'Select Your Common Core State Standard(s)',
  );

  $vocab = taxonomy_vocabulary_machine_name_load(SBAC_ALIGNMENT_VOCAB_NAME);
  $parent = taxonomy_term_load($_POST['parent']);
  if(isset($_POST['remove'])) {
    $temp = array_shift(taxonomy_get_parents($parent->tid));
    if(empty($temp)) {
      $parent->tid = 0;
    }
    else {
      $parent = $temp;
    }
  }

  $output_array['parent'] = $parent;
  $terms = taxonomy_get_tree($vocab->vid, $parent->tid, SBAC_ALIGNMENT_MAX_DEPTH);

  $publication = $parent->field_alignment_publication['und'][0]['value'];
  $output_array['publication'] = (empty($publication))? 0 : $publication;

  $output_array['depth'] = $depth = sbac_alignment_term_depth($parent->tid);

  if($publication == 'SBAC-MA-v1') {
    $level_title = $ma_titles[$depth];
  }
  else {
    $level_title = $ela_titles[$depth];
  }


  $output_array['tids'] = array();
  foreach ($terms as $term) {
    $output_array['tids'][] = $term;
    $children = taxonomy_get_children($term->tid);
    $output_array['children'][] = $children;

    $options = array(
      'attributes' => array(
        'id' => 'term-' . $term->tid,
        'class' => 'sbac-custom-term button',
        'tid' => $term->tid,
      ),
      'html' => TRUE,
    );
    $subject_array[] = l($term->name, '#', $options);
  }

  $output_array['tids_count'] = count($output_array['tids']);

  $output .= theme('alignment_tags', array('terms' => $terms, 'level_title' => $level_title));
  $output_array['html'] = $output;

  print drupal_json_encode($output_array);
  exit;
}
/**
 *
 */
function sbac_alignment_term_depth($tid) {
  $parent = db_query("SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = :tid", array(':tid' => $tid))->fetchField();
  if($parent == 0) {
    return 1;
  }else  {
    return 1+sbac_alignment_term_depth($parent);
  }
}
/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_alignment_update_projects_alter(&$projects) {
  unset($projects['sbac_alignment']);
}
/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sbac_alignment_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'alignment_node_form') {
    $form['field_education_alignment']['#options'] = array();
    //if (arg(0) == 'sbac_resource' && arg(1) == 'ajax') {//@TODO KS - rmeove
      global $user;
      /* let administrator see the entire form */
      //if (!in_array('administrator', $user->roles)) { //@TODO KS - rmeove
        $form['additional_settings']['#access'] = FALSE;
        $form['comment_settings']['#access'] = FALSE;
        $form['menu']['#access'] = FALSE;
        $form['path']['#access'] = FALSE;
        $form['revision_information']['#access'] = FALSE;
        $form['title']['#access'] = FALSE;
        //$form['field_resource_reference']['#access'] = FALSE;
      //}//@TODO KS - rmeove

      $form['title']['#required'] = FALSE;
      $form['actions']['cancel'] = array(
        '#type' => 'submit',
        '#value' => 'Cancel',
        '#weight' => 6,
      );
      $form['actions']['submit']['#value'] = 'Add Alignment to Resource';
      /* make sure our handler fires first before default handler */
      array_unshift($form['actions']['submit']['#submit'], 'sbac_alignment_form_submit_handler');
    //}//@TODO KS - rmeove
  }
}
/**
 * Implements hook_form_submit_handler()
 *
 * @param $form
 * @param $form_state
 */
function sbac_alignment_form_submit_handler(&$form, &$form_state) {
  if (isset($_GET['nid'])) {
    /* set title (hidden but required) to field-notation value as per wireframe */
    $form_state['values']['title'] = 'VIEW - ' . $_GET['nid']; //@TODO KS - Get dot notation from the tags
    /* set resource-ref (hidden but required) to parent node-id */
    $form_state['values']['field_resource_reference']['und'][0]['target_id'] = $_GET['nid'];
  }
}














































//
