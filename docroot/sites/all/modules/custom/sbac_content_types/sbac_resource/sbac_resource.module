<?php
/**
 * @file
 * Code for the SBAC resource feature.
 */

include_once 'sbac_resource.features.inc';
include_once 'sbac_resource.forms.inc';
include_once 'sbac_resource.theme.inc';

// Count.
define('SBAC_RESOURCE_MY_RESOURCES_COUNT', 'sbac-my-resources-count');
define('SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_COUNT', 'sbac-digital-library-resources-count');
define('SBAC_RESOURCE_RESOURCE_REVIEW', 'sbac-resoruce-review-count');

// View Mode.
define('SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE', 'sbac-dl-view-mode');
define('SBAC_RESOURCE_MY_RESOURCES_VIEW_MODE', 'sbac-mr-view-mode');
define('SBAC_RESOURCE_RESOURCE_REVIEW_VIEW_MODE', 'sbac-rr-view-mode');

define('SBAC_RESOURCE_ALL_NODE_FLAG', 0);
define('SBAC_RESOURCE_ALL_USER_FLAG', 0);

define('SBAC_RESOURCE_REVIEWER_ROLE', 'resource_reviewer');
define('SBAC_RESOURCE_PUBLISHER_ROLE', 'resource publisher');

define('SBAC_RESOURCE_SMART_SEARCH_URL_VAR_NAME', 'sbac-smart-search-last-url');
define('SBAC_RESOURCE_SMART_SEARCH_URL_HISTORY_VAR_NAME', 'sbac-smart-search-url-history');
define('SBAC_RESOURCE_SMART_SEARCH_HIDE_FILTERS', 'sbac-smart-search-hide-filters');
define('SBAC_RESOURCE_SMART_SEARCH_SHOW_STATUS', 'sbac-smart-search-show-status');

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_resource_update_projects_alter(&$projects) {
  unset($projects['sbac_resource']);
}

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function sbac_resource_menu() {
  $items = array();

  $items['sbac_resource/%ctools_js/add-alignment'] = array(
    'page callback' => 'sbac_resource_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac_resource/%ctools_js/filter-by-alignment'] = array(
    'page callback' => 'sbac_resource_filter_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac_resource/%ctools_js/submit-resource'] = array(
    'page callback' => 'sbac_resource_submit_resource_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac_resource/%ctools_js/delete-resource'] = array(
    'page callback' => 'sbac_resource_delete_resource_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac_resource/%ctools_js/save-all-changes'] = array(
    'page callback' => 'sbac_resource_save_all_changes_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac-resource/%ctools_js/unsubmit-resource-modal'] = array(
    'page callback' => 'sbac_resource_unsubmit_resource_modal',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['digital-library-resources'] = array(
    'title' => 'Digital Library Resources',
    'page callback' => 'sbac_resource_digital_library_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => -50,
    'file' => 'sbac_resource.menu_callbacks.inc',
  );

  $items['my-resources'] = array(
    'title' => 'My Resources',
    'page callback' => 'sbac_resource_my_resources_page',
    'access callback' => 'sbac_resource_my_resources_access_callback',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => -48,
    'file' => 'sbac_resource.menu_callbacks.inc',
  );

  $items['resource-review'] = array(
    'title' => 'Resource Review',
    'page callback' => 'sbac_resource_resource_review_page',
    'access callback' => 'sbac_resource_resource_review_access_callback',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => -49,
    'file' => 'sbac_resource.menu_callbacks.inc',
  );

  $items['dlr-smart-search'] = array(
    'title' => 'Digital Library Resources',
    'page callback' => 'sbac_resource_smart_search_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'sbac_resource.menu_callbacks.inc',
  );

  $items['admin/sbac/smart-search-builder'] = array(
    'title' => 'Smart Search Query Builder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sbac_resource_smart_search_builder_form'),
    'access arguments' => array('configure sbac'),
    'type' => MENU_CALLBACK,
    'weight' => 10,
    'file' => 'sbac_resource.forms.inc',
  );

  $items['admin/structure/types/manage/%node_type/messages'] = array(
    'title' => 'Messages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sbac_resource_form_messages'),
    'access arguments' => array(4),
    'access callback' => array('sbac_resource_form_messages_access'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'file' => 'sbac_resource.admin.inc',
  );

  $items['sbac-resource/url-exists'] = array(
    'page callback' => 'sbac_resource_url_exists_ajax',
    'access arguments' => array('access content'),
    'title' => 'URL Exist',
  );

  return $items;
}

/**
 * Outputs the profile fields.
 *
 * @param $node
 */
function sbac_resource_profile_fields(&$node) {
  $resource_node = $node['node'];
  // Subjects and Domains
  if (isset($resource_node->field_subject['und']['0'])) {
    $resource_node->resource_profile_left['subjects']['title'] = 'Subjects and Domains';
    $resource_node->resource_profile_left['subjects']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_subject);
  }

  // Common Core State Standards
  if (isset($resource_node->field_alignment_term['und']['0'])) {
    $resource_node->resource_profile_left['ccss']['title'] = 'Common Core State Standards';
    $resource_node->resource_profile_left['ccss']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_alignment_term, TRUE);
  }

  // Grades
  if (isset($resource_node->field_grades['und']['0'])) {
    $resource_node->resource_profile_left['grades']['title'] = 'Grades';
    $resource_node->resource_profile_left['grades']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_grades);
  }

  // Intended End Use
  if (isset($resource_node->field_intended_end_user['und']['0'])) {
    $resource_node->resource_profile_left['end_use']['title'] = 'Intended End Users';
    $resource_node->resource_profile_left['end_use']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_intended_end_user);
  }

  // Intended Student Populations
  if (isset($resource_node->field_intended_student['und']['0'])) {
    $resource_node->resource_profile_left['student_pop']['title'] = 'Intended Student Populations';
    $resource_node->resource_profile_left['student_pop']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_intended_student);
  }

  // Media Types
  if (isset($resource_node->field_digital_media_type['und']['0'])) {
    $resource_node->resource_profile_left['media']['title'] = 'Media Types';
    $resource_node->resource_profile_left['media']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_digital_media_type);
  }

  // Educational Use
  if (isset($resource_node->field_educational_use['und']['0'])) {
    $resource_node->resource_profile_left['educational']['title'] = 'Educational Use';
    $resource_node->resource_profile_left['educational']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_educational_use);
  }

  // Technologies for use in classroom
  if (isset($resource_node->field_classroom_technologies['und']['0'])) {
    $resource_node->resource_profile_left['classroom']['title'] = 'Technologies Required for use in Classroom';
    $resource_node->resource_profile_left['classroom']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_classroom_technologies);
  }

  // Geographics Settings
  if (isset($resource_node->field_geographical_settings['und']['0'])) {
    $resource_node->resource_profile_left['geo']['title'] = 'Geographics Settings';
    $resource_node->resource_profile_left['geo']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_geographical_settings);
  }

  // Smarter Balanced Keywords
  if (isset($resource_node->field_smarter_balanced_keyword['und']['0'])) {
    $resource_node->resource_profile_left['smarter']['title'] = 'Smarter Balanced Keywords';
    $resource_node->resource_profile_left['smarter']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_smarter_balanced_keyword);
  }

  // License for primary material
  if (isset($resource_node->field_license['und']['0'])) {
    $resource_node->resource_profile_left['primary']['title'] = 'License For Primary Material';
    $resource_node->resource_profile_left['primary']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_license);
  }

  // License for a secondary material
  if (isset($resource_node->field_license_secondary['und']['0'])) {
    $resource_node->resource_profile_left['secondary']['title'] = 'Licenses For Secondary Material';
    $resource_node->resource_profile_left['secondary']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_license_secondary);
  }

  // Focus
  if (isset($resource_node->field_attributes['und']['0'])) {
    $resource_node->resource_profile_right['attributes']['title'] = 'Attributes of the Formative Assessment Process';
    $resource_node->resource_profile_right['attributes']['content'] = sbac_resource_get_taxonomy_terms($resource_node->field_attributes);
  }

  $node['node'] = $resource_node;
}

/**
 * @param $field
 * @return string
 */
function sbac_resource_get_taxonomy_terms($field, $ccss = FALSE) {
  $terms = array();
  foreach ($field['und'] as $key => $term) {
    if ($ccss) {
      $terms[] = $term['taxonomy_term']->field_alignment_shortname['und'][0]['value'];
    }
    else {
      $terms[] = $term['taxonomy_term']->name;
    }
  }

  $list = theme('item_list', array('items' => $terms, 'title' => '', 'type' => 'ul', 'attributes' => array('class' => 'field-content')));
  return $list;
}

/**
 * Returns the related resources for a given nid.
 *
 * @param $nid
 * @return string
 */
function sbac_resource_related_resources($nid) {
  $output = '';

  if ($nid) {
    $resource_node = node_load($nid);
    if ($resource_node) {
      $output = theme('sbac_resource_related_resources_header');
      $related_resources = sbac_resource_get_related_resources($resource_node);
      if ($related_resources) {
        if (count($related_resources) > 3) {
          drupal_add_js(drupal_get_path('module', 'sbac_resource') . '/js/sbac_resource.related_resources.js');
        }
        $output .= sbac_share_create_resource_card($related_resources);
      }
      else {
        $output .= theme('sbac_resource_no_related_resources');
      }
    }
  }

  return $output;
}

/**
 * Takes the baseline resource node and compares the subject,
 * grade and attributes to find related resources.
 *
 * @param $node
 * @return array
 */
function sbac_resource_get_related_resources($baseline_node) {
  // create baseline, then create query, then weight/sort, then return array list.
  $related_resources = array();
  $baseline_subjects = array();
  if (isset($baseline_node->field_subject['und'][0]['tid'])) {
    foreach ($baseline_node->field_subject['und'] as $key => $term) {
      $baseline_subjects[] = $term['tid'];
    }
  }
  $baseline_grades = array();
  if (isset($baseline_node->field_grades['und'][0]['tid'])) {
    foreach ($baseline_node->field_grades['und'] as $key => $term) {
      $baseline_grades[] = $term['tid'];
    }
  }
  $baseline_attributes = array();
  if (isset($baseline_node->field_attributes['und'][0]['tid'])) {
    foreach ($baseline_node->field_attributes['und'] as $key => $term) {
      $baseline_attributes[] = $term['tid'];
    }
  }

  /**
   *  Baseline Resource:  Subjects A, B, C; Grades 1, 2; Formative Assessment X, Y
   *
   *  To determine the nine (9) related resources, the system undergoes a layered comparison:
   *
   *  Subjects A OR Subjects B OR Subjects C AND
   *  Grades 1 OR Grades 2 AND
   *  Formative Assessment X OR Formative Assessment Y
   *
   *  If a resource does not match any of the subject tags (A, B, C) it is not subjected to the other filters.
   */
  // Compare baseline subjects against all other resource nodes.
  if ($baseline_subjects) {
    $baseline_subjects_string = implode(',', $baseline_subjects);
    // Check against baseline subjects.
    $query = "
            SELECT
              n.nid,
              s.field_subject_tid AS subject
            FROM {node} n
            JOIN {workbench_moderation_node_history} w ON n.nid = w.nid AND n.vid = w.vid
            JOIN {field_data_field_subject} s ON n.nid = s.entity_id AND n.vid = s.revision_id
            WHERE n.type = 'resource'
            AND w.state = 'published'
            AND w.current = 1
            AND s.field_subject_tid IN (" . $baseline_subjects_string . ")
            AND n.nid <> " . $baseline_node->nid;

    $result = db_query($query);
    $subject_nids = array();
    foreach ($result as $row) {
      $subject_nids[$row->nid] = $row->nid;
    }

    // Compare baseline subjects against all other resource nodes that had the same baseline grades
    if ($subject_nids) {
      $baseline_grades_string = implode(',', $baseline_grades);
      if ($baseline_grades) {
        $subject_nids = implode(',', $subject_nids);
        $query = "
            SELECT
              n.nid,
              g.field_grades_tid AS subject
            FROM {node} n
            JOIN {workbench_moderation_node_history} w ON n.nid = w.nid AND n.vid = w.vid
            JOIN {field_data_field_grades} g ON n.nid = g.entity_id AND n.vid = g.revision_id
            WHERE n.type = 'resource'
            AND w.state = 'published'
            AND w.current = 1
            AND n.nid IN (" . $subject_nids . ")
            AND g.field_grades_tid IN (" . $baseline_grades_string . ")
            AND n.nid <> " . $baseline_node->nid;
        $result = db_query($query);
        $grade_nids = array();
        foreach ($result as $row) {
          $grade_nids[$row->nid] = $row->nid;
        }

        // Compare baseline attributes against all other resource nodes that had the same baseline grades and subjects.
        if ($grade_nids) {
          $baseline_attributes_string = implode(',', $baseline_attributes);
          if ($baseline_attributes) {
            $grade_nids = implode(',', $grade_nids);
            $query = "
              SELECT
                n.nid,
                a.field_attributes_tid AS subject
              FROM {node} n
              JOIN {workbench_moderation_node_history} w ON n.nid = w.nid AND n.vid = w.vid
              JOIN {field_data_field_attributes} a ON n.nid = a.entity_id AND n.vid = a.revision_id
              WHERE n.type = 'resource'
              AND w.state = 'published'
              AND w.current = 1
              AND n.nid IN (" . $grade_nids . ")
              AND a.field_attributes_tid IN (" . $baseline_attributes_string . ")
              AND n.nid <> " . $baseline_node->nid;
            $result = db_query($query);
            $attributes_nids = array();
            foreach ($result as $row) {
              $attributes_nids[$row->nid] = $row->nid;
            }

            /**
             * Use the first four metadata elements strictly as filters to create the pool of n resources
             * (meaning that all are equally valid and the only rule is that a related resource has at least one
             * match on each of the three attributes), then sort that pool by ratings to get an overall order
             * In this scenario, the ultimate display order is R5, R1 and no other resources
             * Reasoning: both R1 and R5 have at least one match in each category, and R5 has a higher total
             * ratings than R1 since R1 has no reviews.
             */
            // This is the resource pool of nodes.
            if ($attributes_nids) {
              $count = 0;
              foreach ($attributes_nids as $nid) {
                if ($count >= 8) {
                  break;
                }

                $related_views = TRUE;
                $query = "SELECT v.field_unique_views_value AS views
                          FROM {field_data_field_unique_views} v
                          WHERE v.entity_id = " . $nid;
                $result = db_query($query)->fetchObject();
                if ($result !== FALSE) {
                  if ($result->views == 0) {
                    $related_views = FALSE;
                  }
                  else{
                    $related_resources[$nid] = $result->views;
                  }
                }
                else{
                  $related_views = FALSE;
                }

                if (!$related_views) {
                  $query = "SELECT sl.field_student_learning_rating AS learning,
                            pd.field_pro_dev_rating AS pro_dev,
                            eu.field_ease_use_rating AS ease_use
                            FROM {eck_review} r
                            JOIN {field_data_field_student_learning} sl ON r.id = sl.entity_id
                            JOIN {field_data_field_pro_dev} pd ON r.id = pd.entity_id
                            JOIN {field_data_field_ease_use} eu ON r.id = eu.entity_id
                            WHERE r.node_id = " . $nid;
                  $result = db_query($query);
                  if ($result->rowCount()) {
                    foreach ($result as $row) {
                      $total = $row->learning + $row->pro_dev + $row->ease_use;
                      $related_resources[$nid] += $total;
                    }
                  }
                  else {
                    $related_resources[$nid] = 0;
                  }
                }
                $count++;
              }
            }
          }
        }
      }
    }
  }

  // sort related resources by score.
  if (count($related_resources) > 0) {
    global $user;
    $account = $user;
    foreach ($related_resources as $nid => $total_score) {
      $node = node_load($nid);
      // filter out resources that dont exist, or that the user does not have access to see.
      if (!$node || _sbac_resource_determine_state_access($node, $account) == FALSE) {
        unset($related_resources[$nid]);
      }
    }

    arsort($related_resources);
  }

  return $related_resources;
}

/**
 * Builds out the resource card.
 *
 * @param $related_resources
 * @return string
 */
function sbac_share_create_resource_card(&$related_resources) {
  $class = '';
  if (count($related_resources) <= 3) {
    $class = 'static';
  }

  $output = '<div class="resources-container ' . $class . '">';
  $output .= '<ul class="slides">';
  foreach ($related_resources as $nid => $score) {
    $node = node_load($nid);
    if ($node) {
      // hacked all this up into "fields" and some are "classes",
      // did this so i wouldn't have to modify the TPL that much
      // since it was just a copy of the view template.
      $fields = array();
      $fields['nid'] = new stdClass;
      $fields['nid']->raw = $nid;
      $fields['sticky'] = new stdClass;
      $fields['sticky']->raw = $node->sticky;
      $fields['title'] = new stdClass;
      $fields['title']->content = l($node->title, $node->path['alias']);
      $variables = _sbac_resource_grid_image($fields);
      $fields['image'] = $variables['image'];
      $fields['file-type-icon'] = $variables['file-type-icon'];
      $fields['field_alt_body'] = new stdClass;
      $body = (isset($node->field_alt_body['und'][0]['value']) ? $node->field_alt_body['und'][0]['value'] : '');
      $fields['field_alt_body']->content = sbac_resource_truncate($body, 140);
      $fields['state'] = new stdClass;
      $fields['state']->raw = 'published';
      $fields['views'] = (isset($node->field_unique_views['und'][0]['values']) ? $node->field_unique_views['und'][0]['values'] : 0);
      $fields['downloads'] = (isset($node->field_asset_downloads['und'][0]['values']) ? $node->field_asset_downloads['und'][0]['values'] : 0);
      $fields['collaborators'] = 'N Collaborations';
      $fields['subject'] = sbac_share_get_field_terms($node->field_subject);
      $fields['grades'] = sbac_share_get_field_terms($node->field_grades);
      $fields['media_types'] = sbac_share_get_field_terms($node->field_digital_media_type);
      $output .= '<li>' . theme('sbac_resource_card', array('fields' => $fields)) . '</li>';
    }
  }
  $output .= '</ul>';
  $output .= '</div>';
  return $output;
}

/**
 * Helper function to retreive the term name(s).
 *
 * @param $field
 * @return string
 *
 */
function sbac_share_get_field_terms($field) {
  $term_names = array();
  foreach ($field['und'] as $key => $tid) {
    $term = taxonomy_term_load($tid['tid']);
    $term_names[] = $term->name;
  }

  $terms = '';
  if ($term_names) {
    $terms = implode(', ', $term_names);
  }
  return $terms;
}

/**
 * Access callback for my resources menu item.
 *
 * @return bool
 */
function sbac_resource_my_resources_access_callback() {
  global $user;
  if (in_array('resource contributor', $user->roles)) {
    return TRUE;
  }
  if ($user->uid == 1 || in_array('DLRB member', $user->roles) || in_array('digital library administrator', $user->roles) || in_array('system administrator', $user->roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback for resource review menu item.
 *
 * @return bool
 */
function sbac_resource_resource_review_access_callback() {
  global $user;
  if (in_array('resource reviewer', $user->roles)) {
    return TRUE;
  }
  if (in_array('resource publisher', $user->roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback for menu item.
 *
 * @param $node_type
 * @return bool
 */
function sbac_resource_form_messages_access($node_type) {
  if ($node_type->type == 'resource') {
    return user_access('administer site configuration');
  }
  return FALSE;
}

/**
 * Checks if the URL is accessible via GDV.
 */
function sbac_resource_url_exists_ajax() {
  $url = $_POST['url'];
  $status = sbac_resource_url_exist($url);
  $output = array('result' => $status);
  print drupal_json_encode($output);
  exit;
}

/**
 * Checks if the URL is accessible.
 *
 * @param $url
 * @return bool
 */
function sbac_resource_url_exist($url){
  // Curl the google docs viewer url
  // if response contains the wrong message
  // then return false and output the no-preview image.

  $google_url = 'http://docs.google.com/viewer';
  if (isset($_SERVER['HTTPS'])) {
    $google_url = 'https://docs.google.com/viewer';
  }
  $question_url = $google_url . '?url=' . urlencode($url) . '&embedded=true';

  $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
  $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
  $header[] = "Cache-Control: max-age=0";
  $header[] = "Connection: keep-alive";
  $header[] = "Keep-Alive: 300";
  $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
  $header[] = "Accept-Language: en-us,en;q=0.5";
  $header[] = "Pragma: ";

  global $base_url;
  $curl = curl_init($question_url);
  curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
  curl_setopt($curl, CURLOPT_REFERER, $base_url);
  curl_setopt($curl, CURLOPT_ENCODING, "gzip,deflate");
  curl_setopt($curl, CURLOPT_AUTOREFERER, true);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_TIMEOUT, 30);
  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
  $response = curl_exec($curl);
  curl_close($curl);

  $status = FALSE;
  if (strpos($response, "gviewApp.displayError('BAD_REQUEST'") === FALSE) {
    $status = TRUE;
  }

  return $status;
}

/**
 * Implementation of hook_preprocess_node()
 *
 * @param $vars
 */
function sbac_resource_preprocess_node(&$vars) {
  if ($vars['type'] == 'resource') {
    drupal_add_http_header('X-Frame-Options', 'SAMEORIGIN');
    drupal_set_title($vars['title']);
    drupal_add_js(libraries_get_path('jwplayer') . '/jwplayer.js');
    drupal_add_js(drupal_get_path('module', 'sbac_resource') . '/js/sbac_resource.node.js');
    $vars['author'] = ''; $vars['license'] = ''; $vars['owner'] = ''; $vars['resource_type'] = '';
    if (isset($vars['field_focus'][0]['tid'])) {
      $resource_types = array();
      foreach ($vars['field_focus'] as $key => $term) {
        $resource_types[] = $term['taxonomy_term']->name;
      }
      $vars['resource_type'] = implode(', ', $resource_types);
    }
    if (isset($vars['field_author'][0]['safe_value'])) {
      $vars['author'] = htmlspecialchars_decode($vars['field_author'][0]['safe_value']);
    }
    if (isset($vars['field_publisher']['und'][0]['safe_value'])) {
      $vars['owner'] = htmlspecialchars_decode($vars['field_publisher']['und'][0]['safe_value']);
    }
    if (isset($vars['field_license'][0]['taxonomy_term']->name)) {
      $vars['license'] = $vars['field_license'][0]['taxonomy_term']->name;
    }
    // Edit link for DLRB member's.
    global $user;
    if ($user->uid == 1 || in_array('DLRB member', $user->roles) || in_array('digital library administrator', $user->roles) || in_array('system administrator', $user->roles)) {
      $url = url('node/' . $vars['nid'] . '/edit', array('absolute' => TRUE));
      $vars['edit_link'] = l('Edit', $url, array('attributes' => array('class' => array('medium', 'button'))));
    }
    // Documents
    if (isset($vars['document'][0]) || isset($vars['document']['html5'])) {
      // Determine the file type, load up the correct video player, doc viewer or image viewer.
      $viewer = _sbac_resource_preview_content($vars);
      $materials = _sbac_resource_preview_materials($vars);
      $result = sbac_resource_determine_download_ability($vars);
      if ($result['primary'] || $result['secondary']) {
        $vars['download'] = l('Download', 'sbac-media/download/' . $vars['nid'], array('attributes' => array('class' => 'button small right')));
        if ($result['primary'] == FALSE || $result['secondary'] == FALSE) {
          $vars['download_partial'] = TRUE;
        }
      }
      $vars['viewer'] = $viewer['viewer'];
      $vars['viewer_filename'] = $viewer['viewer_filename'];
      $vars['viewer_class'] = $viewer['viewer_class'];
      $vars['materials'] = $materials;
    }
  }
}

/**
 * Determines if the resource button is displayed or not.
 *
 */
function sbac_resource_determine_download_ability(&$vars) {
  global $user;
  $result = array('primary' => FALSE, 'secondary' => FALSE);
  if (isset($vars['document']) && sbac_media_downloadable_scheme($vars['document']) && !in_array(SBAC_SHARE_GUEST, $user->roles)) {
    if (isset($vars['field_resource_actions'][0])) {
      foreach ($vars['field_resource_actions'] as $index => $value) {
        if ($index == 0) { // primary or secondary depending on how drupal served this up.
          if ($value['value'] == 0) {
            $result['primary'] = TRUE;
          }
          if ($value['value'] == 1) {
            $result['secondary'] = TRUE;
          }
        }
        if ($index == 1) { // always secondary
          if ($value['value'] == 1) {
            $result['secondary'] = TRUE;
          }
        }
      }
    }
  }
  return $result;
}

/**
 * Creates the preview content.
 *
 * @param $vars
 * @return string
 */
function _sbac_resource_preview_content(&$vars) {
  $viewer = NULL;
  $html5 = FALSE;
  if (isset($vars['document']['html5'])) {
    $html5 = TRUE;
    $media = $vars['document']['html5'];
    $file = file_load($media->fid);
    $directory = "private://html5/" . floor($vars['nid']/32000) . "/" . $vars['nid'];
    $real_path = drupal_realpath($directory) . '/' . $file->filename;
    $file_data = pathinfo($real_path);
    $source = $directory . '/html5_module/dlcomponents/CoverPage.html';
    $url = file_create_url($source);
    $viewer['viewer_filename'] = ucwords($file_data['filename']);
    $viewer['viewer'] = '<iframe src="' . $url . '" width="850" height="600" style="border: none;"></iframe>';
  }

  if (isset($vars['document'][0]) && $vars['document'][0] && !$html5) {
    $media = $vars['document'][0];
    $type = _sbac_resource_determine_type($media);
    $viewer['viewer_filename'] = $media->filename;
    if ($media->transcript) {
      $viewer['viewer_filename'] .= ' (Transcipt Included)';
    }

    if ($media->fid) {
      $file = file_load($media->fid);
      $url = file_create_url($file->uri);
    }
    else {
      $url = sbac_media_create_embed_url($media);
    }

//    if ($type == 'document' && !sbac_resource_url_exist($url)) {
//      $url = drupal_get_path('module', 'sbac_resource') . '/images/no-preview.jpg';
//      $viewer['viewer'] = theme('image', array('path' => $url));
//      $viewer['viewer_class'] = '';
//      return $viewer;
//    }

    if ($type == 'document') {
      $google_url = 'http://docs.google.com/viewer';
      if (isset($_SERVER['HTTPS'])) {
        $google_url = 'https://docs.google.com/viewer';
      }
      $viewer['viewer'] = '<iframe src="' . $google_url . '?url=' . urlencode($url) . '&embedded=true" width="880" height="400" style="border: none;"></iframe>';
      $viewer['viewer_class'] = 'google-doc';
    }
    else if ($type == 'video') {
      $jwplayer = 'jQuery(document).ready(function () {jwplayer("sbac-jwplayer").setup({ file: "' . $url . '", height: 400, width: 850});});';
      drupal_add_js($jwplayer, array('type' => 'inline', 'weight' => 999));
      $viewer['viewer'] = '<div id="sbac-jwplayer"></div>';
      $viewer['viewer_class'] = '';
    }
    else if ($type == 'image') {
      $viewer['viewer'] = theme('image', array('path' => $url, 'width' => 850, 'height' => 400));
      $viewer['viewer_class'] = '';
    }
    else if ($type == 'schooltube') {
      $viewer['viewer'] = '<div class="flex-video"><iframe width="500" height="375" src="' . $url . '" frameborder="0" allowfullscreen="allowfullscreen" mozallowfullscreen="mozallowfullscreen" webkitallowfullscreen="webkitallowfullscreen"></iframe></div>';
      $viewer['viewer_class'] = '';
    }
    else if ($type == 'teachertube') {
      $viewer['viewer'] = '<div class="flex-video"><iframe width="560" height="315" src="' . $url . '" frameborder="0" allowfullscreen/></iframe></div>';
      $viewer['viewer_class'] = '';
    }
    else if ($type == 'slideshare') {
      $viewer['viewer'] = '<div class="flex-video"><iframe src="' . $url . '" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div>';
      $viewer['viewer_class'] = '';
    }
    else if ($type == 'vimeo') {
      $viewer['viewer'] = '<div class="flex-video"><iframe src="' . $url . '" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></div>';
      $viewer['viewer_class'] = '';
    }
    else if ($type == 'youtube') {
      if (strpos($url, 'youtube') !== FALSE) {
        $url .= '?rel=0'; // Disable related videos.
        $viewer['viewer'] = '<div class="flex-video"><iframe width="560" height="315" src="' . $url . '" frameborder="0" allowfullscreen></iframe></div>';
        $viewer['viewer_class'] = '';
      }
      else {
        $url = drupal_get_path('module', 'sbac_resource') . '/images/no-preview.jpg';
        $viewer['viewer'] = theme('image', array('path' => $url));
        $viewer['viewer_class'] = '';
      }
    }
    else {
      $url = drupal_get_path('module', 'sbac_resource') . '/images/no-preview.jpg';
      $viewer['viewer'] = theme('image', array('path' => $url));
      $viewer['viewer_class'] = '';
    }
  }
  return $viewer;
}

/**
 * Creates the materials dropdown.
 *
 * @param $vars
 * @return array
 */
function _sbac_resource_preview_materials(&$vars) {
  $materials = '';
  $material_urls = array();

  if (isset($vars['document']['html5'])) {
    $type = 'html5';
    $media = $vars['document']['html5'];
    $file = file_load($media->fid);
    $directory = "private://html5/" . floor($vars['nid']/32000) . "/" . $vars['nid'];
    $real_path = drupal_realpath($directory) . '/' . $file->filename;
    $file_data = pathinfo($real_path);
    $source = $directory . '/html5_module/dlcomponents/CoverPage.html';
    $url = file_create_url($source);
    $material_urls[] = l(ucwords($file_data['filename']), $url, array('attributes' => array('sbac-type' => $type)));
  }

  if (isset($vars['document'][0])) {
    foreach ($vars['document'] as $key => $media) {
      if (is_numeric($key)) {
        $type = _sbac_resource_determine_type($media);
        if ($type == 'none') {
          $url = drupal_get_path('module', 'sbac_resource') . '/images/no-preview.jpg';
        }
        else if ($media->fid) {
          $file = file_load($media->fid);
          $url = file_create_url($file->uri);
        }
        else {
          $url = sbac_media_create_embed_url($media);
        }

        $transcript = 0;
        if ($media->transcript) {
          $transcript = 1;
        }

        // check to see whether its public scheme or not, if so not external
        if ($media->fid) {
          $material_urls[] = l(ucwords($media->filename), $url, array('attributes' => array('sbac-type' => $type, 'transcript' => $transcript)));
        }
        else { // embedded media
          if (strpos($media->embed_url, 'youtube')) {
            $url .= '?rel=0';
          }
          $material_urls[] = l(ucwords($media->filename), $url, array('attributes' => array('sbac-type' => $type, 'transcript' => $transcript), 'absolute' => TRUE, 'external' => TRUE));
        }
      }
    }
  }

  if ($material_urls) {
    $materials = '<a class="button small arrow sbac-materials-dropdown" data-dropdown="sbac-materials">'. t('View All Materials'). '<span></span></a>';
    $materials .= theme('item_list', array(
      'items' => $material_urls,
      'attributes' => array(
        'class' => 'materials-dropdown f-dropdown',
        'id' => 'sbac-materials'
      )
    ));
  }

  return $materials;
}

/**
 * Creates the resource media variables.
 *
 * @param $url
 * @param $file
 * @return string
 */
function _sbac_resource_determine_type($media, $return_embed = FALSE) {
  if (!$media->document_id && !$media->fid) {
    $type = _sbac_resource_determine_media($media, $return_embed);
  }
  else {
    $ext = pathinfo($media->filename, PATHINFO_EXTENSION);
    $type = _sbac_resource_determine_extension($ext);
  }
  return $type;
}

/**
 * Determine the media type based on URL.
 *
 * @param $file object
 * @return string
 */
function _sbac_resource_determine_media($media, $return_embed = FALSE) {
  $type = 'embed';
  if ($return_embed) {
    return $type;
  }
  $embedded_video_source = $media->embed_url;
  if (strpos($embedded_video_source, 'schooltube') !== FALSE) {
    $type = 'schooltube';
  }
  if (strpos($embedded_video_source, 'teachertube') !== FALSE) {
    $type = 'teachertube';
  }
  if (strpos($embedded_video_source, 'slideshare') !== FALSE) {
    $type = 'slideshare';
  }
  if (strpos($embedded_video_source, 'youtube') !== FALSE) {
    $type = 'youtube';
  }
  if (strpos($embedded_video_source, 'vimeo') !== FALSE) {
    $type = 'vimeo';
  }
  return $type;
}

/**
 * Determine the filename extension.
 *
 * @param $ext
 * @return string
 */
function _sbac_resource_determine_extension($ext) {
  $media = 'document';

  switch (strtolower($ext)) {
    case 'txt':
    case 'doc':
    case 'docx':
    case 'pdf':
    case 'xls':
    case 'xlsx':
    case 'pptx':
    case 'ppt':
    case 'odt':
    case 'odp':
      $media = 'document';
      break;
    case 'mp4':
    case 'mp3':
    case 'aac':
      $media = 'video';
      break;
    case 'png':
    case 'jpg':
    case 'jpeg':
      $media = 'image';
      break;
    case 'avi':
    case 'mov':
    case 'mpg':
    case 'ods':
      $media = 'none';
      break;
  }
  return $media;
}

/**
 * Determine the filename extension.
 *
 * @param $ext
 * @return string
 */
function _sbac_resource_determine_file_type_icon($ext) {
  $media = 'document';

  switch (strtolower($ext)) {
    case 'txt';
    case 'doc';
    case 'docx';
      $media = 'doc';
      break;
    case 'pdf';
      $media = 'pdf';
      break;
    case 'xls';
    case 'xlsx';
      $media = 'xls';
      break;
    case 'pptx';
    case 'ppt';
      $media = 'ppt';
      break;
    case 'mp4';
    case 'mpg';
    case 'mov';
    case 'avi';
    case 'mp3';
    case 'aac';
      $media = 'video';
      break;
    case 'png';
    case 'jpg';
    case 'jpeg';
      $media = 'image';
      break;
  }

  return $media;
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function sbac_resource_preprocess_page(&$vars) {
  $vars['html5'] = FALSE;
  if (isset($vars['node']) && $vars['node']->type == 'resource') {
    if (isset($vars['page']['#type']) && $vars['page']['#type'] == 'page') {
      unset($vars['tabs']);
      $vars['title'] = $vars['node']->title;
      if (isset($vars['node']->field_html5['und'][0]['value']) && $vars['node']->field_html5['und'][0]['value'] && arg(2) != 'edit') {
        $vars['html5'] = TRUE;
      }
    }
  }

  // Page not found markup.
  if (isset($vars['page']['content']['system_main']['main']['#markup'])) {
    $value = $vars['page']['content']['system_main']['main']['#markup'];
    if (strpos($value, 'could not be found')) {
      drupal_set_title(t('You do not have permission to view this resource'));
      $message = '<p>' . t('The resource you are trying to access is restricted. Select Browse Resources to browse available resources in the Digital Library.') . '</p>';
      $button = l('Browse Resources', 'digital-library-resources', array('attributes' => array('class' => array('medium', 'button'))));
      $vars['page']['content']['system_main']['main']['#markup'] = $message . $button;
    }
  }
}

/**
 * Implements hook_preprocess_html().
 *
 * Determine the page display and toss a class on the body.
 *
 * @param $vars
 */
function sbac_resource_preprocess_html(&$vars) {
  if (arg(0) == 'digital-library-resources' || arg(0) == 'my-resources' || arg(0) == 'resource-review') {
    $display = sbac_resource_determine_grid_or_list();
    if ($display == 'grid_view') {
      $vars['classes_array'][] = 'grid-view';
    }
    else {
      $vars['classes_array'][] = 'list-view';
    }
  }

  // Page not found markup.
  if (isset($vars['page']['content']['system_main']['main']['#markup'])) {
    $value = $vars['page']['content']['system_main']['main']['#markup'];
    if (strpos($value, 'could not be found')) {
      $vars['classes_array'][] = 'sbac-resource-access-denied';
    }
  }
}

/**
 * overide theme_status_messages, in function check if yours, else call theme_status_messages or soemthing
 *
 * @param $theme_registry
 */
function sbac_resource_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['status_messages'])) {
    $theme_registry['status_messages']['function'] = 'sbac_resource_status_messages';
  }
}

/**
 *
 *
 * @param $variables
 * @return string
 */
function sbac_resource_status_messages($variables) {
  $output = '';
  $structured_messages = array();
  $messages = drupal_get_messages('sbac_resource_error');
  if (isset($messages['sbac_resource_error'])) {
    foreach ($messages['sbac_resource_error'] as $message) {
      $elements = explode(':', $message);
      $section = $elements[0];
      $field = $elements[1];
      $error_type = $elements[2];
      $error_message = $elements[3];
      if (isset($elements[4])) {
        $error_message .= ': ' . $elements[4];
      }
      $structured_messages[$section][$error_type][$field] = $error_message;
    }
  }

  $final_messages = array();
  if ($structured_messages) {
    foreach ($structured_messages as $section => $field_errors) {
      if (count($field_errors['group']) > 1) { // Group is needed, create structure, extra Parent label
        foreach ($field_errors['group'] as $field => $error) {
          $final_messages[$section]['messages'][] = $error;
          $final_messages[$section]['group'] = TRUE;
        }
      }
      else {
        $single_message = array_shift($field_errors['single']);
        $final_messages[$section]['messages'][] = $single_message;
      }
    }

    if ($final_messages) {
      $output = sbac_resource_status_messages_output($variables, $final_messages);
    }
  }

  if (!$final_messages) {
    $output = sbac_status_messages($variables);
  }

  return $output;
}

/**
 * Takes the final array structure from sbac_resource_status_messages
 * and builds the desired output.
 *
 * @param $variables
 * @param $final_messages
 */
function sbac_resource_status_messages_output($variables, $final_messages) {
  $output = '';
  foreach ($final_messages as $section => $messages) {
    $header = $section;
    if (isset($messages['group'])) {
      $header = "Please correct the following to continue: ";
    }

    $output .= "<div class='sbac-resource-alert-box alert-box alert'>\n";
    if (isset($messages['group'])) {
      $output .= "<h2 class='sbac-resource-error-section'>" . ucwords($header) . "</h2>\n";
    }
    $output .= " <ul>\n";
    foreach ($messages['messages'] as $message) {
      $output .= '  <li>' . $message . "</li>\n";
    }
    $output .= " </ul>\n";
    $output .= "</div>\n";
  }
  return $output;
}

/**
 * Override drupal core messages with zurb foundation alert-box messages.
 * Customize the colors within the _settings.scss file
 *
 * http://foundation.zurb.com/docs/elements.php#panelEx
 */
function sbac_status_messages($variables) {
  $display = $variables['display'];
  $output = '';

  $status_heading = array(
    'error' => t('Error message'),
    'status' => t('Status message'),
    'warning' => t('Warning message'),
  );
  $status_mapping = array(
    'error' => 'alert',
    'success' => 'success',
    'warning' => 'secondary'
  );
  $error_messages = drupal_get_messages($display);
  foreach ($error_messages as $type => $messages) {
    if ($messages) {
      $type_output = '';
      if (isset($status_mapping[$type])) {
        $type_output .= "<div class=\"drupal-alert-box alert-box $status_mapping[$type]\">\n";
      }
      else {
        $type_output .= "<div class=\"sbac-alert-box alert-box\">\n";
      }

      if (!empty($status_heading[$type])) {
        $type_output .= '<h2 class="element-invisible">' . $status_heading[$type] . "</h2>\n";
      }

      $added_message = FALSE;
      if (count($messages) > 1) {
        $type_output .= " <ul>\n";
        foreach ($messages as $message) {
          if ($message == 'Content permissions have been rebuilt.') {
            continue;
          }
          $type_output .= '  <li>' . $message . "</li>\n";
          $added_message = TRUE;
        }
        $type_output .= " </ul>\n";
      }
      elseif ($messages[0] != 'Content permissions have been rebuilt.') {
        $type_output .= $messages[0];
        $added_message = TRUE;
      }
      $type_output .= "</div>\n";

      if ($added_message) {
        $output .= $type_output;
      }
    }
  }
  return $output;
}

/**
 * Implements hook_node_load().
 *
 * @param $nodes
 * @param $types
 */
function sbac_resource_node_load($nodes, $types) {
  //make sure we are only viewing through the content/* path
  global $user;
  foreach ($nodes as $node) {
    //make sure we are looking at a node along the node path and it is published before we start to count views
    if (match_uri('node/[0-9]+') && $node->type == 'resource' && $node->status == '1') {
      //update the raw data table
      $query = "insert into node_user_paradata (
						uid,
						nid,
						hits)
					values (
						" . $user->uid . ",
						" . $node->nid . ",
						1)
					on duplicate key
						update hits = hits + 1";
      $result = db_query($query);
      //send the denormed data to the node
      $query = "select sum(hits) as hits, count(distinct(uid)) as unique_hits from node_user_paradata where nid=" . $node->nid;
      $result = db_query($query);
      $thisrow = $result->fetchAssoc();
      $node->field_total_views[LANGUAGE_NONE] = array(0 => array('value' => $thisrow['hits']));
      $node->field_unique_views[LANGUAGE_NONE] = array(0 => array('value' => $thisrow['unique_hits']));
      entity_save_field(array('field_total_views', 'field_unique_views'), $node, 'node', $node->nid);
    }

    // Load all media entities and attach them to the resource.
    if ($node->type == 'resource') {
      $media_items = sbac_media_load_items($node->nid);
      $node->document = $media_items;

      $html5_item = sbac_media_load_html5_item($node->nid);
      if ($html5_item !== FALSE) {
        $node->document['html5'] = $html5_item;
      }
    }
  }
}

/**
 * Implemenets hook_workbench_moderation_transition().
 *
 * @param $new_state
 *  The new state of the revision.
 */
function sbac_resource_workbench_moderation_transition($node, $previous_state, $new_state) {
  if ($node->type == 'resource' && $new_state != 'removed') {
    // Necassary to override workbench moderation into publishing the node. Line 1602, function
    // workbench_moderation_node_data(), they query the DB directly to find out if there is a
    // published node. I bruce lee the publish status here.
    db_query('UPDATE {node} SET status = 1 WHERE nid = :nid', array(':nid' => $node->nid));
    db_query('UPDATE {node_revision} SET status = 1 WHERE nid = :nid AND vid = :vid', array(':nid' => $node->nid, ':vid' => $node->vid));
  }
  else if ($node->type == 'resource' && $new_state == 'removed') {
    $node->status = 0;
  }

  // issue, i need to create records for everyone during state transitions, could limit this to "being_reviewed" and "approved".
  // need to put logic in that loops around users for a given role and creates records based on feedback states.
  // this will also be your update script.
  if ($node->type == 'resource') {
    sbac_resource_save_current_state($node);
  }
}

/**
 * Saves the current state to a separate table.
 *
 * @param $node
 */
function sbac_resource_save_current_state($node) {
  if ($node->type == 'resource') {
    global $user;

    // Always save the state for the author.
    $entity = NULL;
    $new_record = sbac_resource_get_state($entity, $node->nid, $node->uid);
    $entity->state = 'author';

    $mem = memory_get_usage(TRUE);
    error_log('sbac_resource_save_current_state: ' . $mem);

    sbac_resource_save_resource_state($entity, $new_record);
    if (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'draft') {
      sbac_resource_delete_resource_state_except($node->nid, $entity->state);
    }

    if (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'needs_review') {
      sbac_resource_save_resource_state_for_all_role($node, SBAC_RESOURCE_REVIEWER_ROLE, 'gk_needs_review');
    }

    if (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'being_reviewed') {
      // new one, if gate keeping in progress, give access to that user, no one else
      $gate_keeper = _sbac_resource_determine_feedback($node->nid, 'gate_keeper', FALSE, 1, 0, 1, 'single');
      $completed_gate_keeper = _sbac_resource_determine_feedback($node->nid, 'gate_keeper', FALSE, 1, 1, 1, 'single');
      if ($gate_keeper) {
        $entity = NULL;
        $new_record = sbac_resource_get_state($entity, $node->nid, $gate_keeper['uid']);
        $entity->state = 'gk_being_reviewed';
        sbac_resource_save_resource_state($entity, $new_record);
        sbac_resource_delete_resource_state_for_all_role($node, SBAC_RESOURCE_REVIEWER_ROLE, 'gk_needs_review');
      }
      else if (!$completed_gate_keeper && !$gate_keeper) {
        sbac_resource_delete_resource_state_given_state($node, 'gk_being_reviewed');
        if (!$completed_gate_keeper) {
          sbac_resource_save_resource_state_for_all_role($node, SBAC_RESOURCE_REVIEWER_ROLE, 'gk_needs_review');
        }
      }

      if ($completed_gate_keeper) {
        // if there is no completed feedback and no current feedback, then its in gk_need_review status
        $completed_feedback = _sbac_resource_determine_feedback($node->nid, 'qc', FALSE, 1, 1, 1, 'set');
        $current_review = _sbac_resource_determine_feedback($node->nid, 'qc', FALSE, 1, 0, 1, 'single');
        if (!$completed_feedback && !$current_review) {
          sbac_resource_save_resource_state_for_all_role($node, SBAC_RESOURCE_REVIEWER_ROLE, 'qc_needs_review');
        }
        else {
          $current_reviews = _sbac_resource_determine_feedback($node->nid, 'qc', FALSE, 1, 0, 1);
          $total_count = count($current_reviews) + count($completed_feedback);
          // if there is current reviews, tag them correctly
          foreach ($current_reviews as $current_review) {
            $entity = NULL;
            $new_record = sbac_resource_get_state($entity, $node->nid, $current_review->uid);
            $entity->state = 'qc_being_reviewed';
            sbac_resource_save_resource_state($entity, $new_record);
          }

          // if there are completed reviews, delete the records, the user can not see it anymore.
          foreach ($completed_feedback as $complete_feedback) {
            $entity = NULL;
            $new_record = sbac_resource_get_state($entity, $node->nid, $complete_feedback->uid);
            if (!$new_record) {
              $entity->state = 'qc_reviewed';
              sbac_resource_save_resource_state($entity, $new_record);
            }
          }

          if ($total_count < 3) {
            // everyone has access and is set to needs review
            sbac_resource_save_resource_state_for_all_role($node, SBAC_RESOURCE_REVIEWER_ROLE, 'qc_needs_review', TRUE);
          }
          else {
            sbac_resource_delete_resource_state_for_all_role($node->nid, SBAC_RESOURCE_REVIEWER_ROLE, 'qc_needs_review');
          }
        }

        //check for "cancelled" review and clean up.
        $cancelled_reviews = _sbac_resource_determine_feedback($node->nid, 'qc', FALSE, 0, 0, 1);
        foreach ($cancelled_reviews as $cancelled_review) {
          $active_review = _sbac_resource_determine_feedback($node->nid, 'qc', $cancelled_review->uid, 1, 0, 1, 'single');
          $completed_review = _sbac_resource_determine_feedback($node->nid, 'qc', $cancelled_review->uid, 1, 1, 1, 'single');
          if (!$active_review && !$completed_review) {
            $entity = NULL;
            $new_record = sbac_resource_get_state($entity, $node->nid, $cancelled_review->uid);
            if (!$new_record) {
              sbac_resource_delete_resource_state($entity);
            }
          }
        }
      }

      _sbac_resource_save_reviewers($node, $user);
    }

    // if the user rejected the resource, delete the previous state and add a state that does allow
    // them to see the resource as a read only param.
    if (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'rejected') {
      if ($node->workbench_moderation['current']->from_state == 'being_reviewed') {
        $gate_keeper = _sbac_resource_determine_feedback($node->nid, 'gate_keeper', FALSE, 1, 1, 1, 'single');
        if ($gate_keeper) {
          $entity = NULL;
          $new_record = sbac_resource_get_state($entity, $node->nid, $gate_keeper['uid'], 'gk_being_reviewed');
          if (!$new_record) {
            sbac_resource_delete_resource_state($entity);
          }
        }
        // delete all qc_reviewed if they exist.
        sbac_resource_delete_resource_state_given_state($node, 'qc_reviewed');

        $entity = NULL;
        $new_record = sbac_resource_get_state($entity, $node->nid, $user->uid);
        if ($new_record) {
          $entity->state = 'gk_view_rejected';
          sbac_resource_save_resource_state($entity, $new_record);
        }
        _sbac_resource_save_reviewers($node, $user);
      }

      if ($node->workbench_moderation['current']->from_state == 'approved') {
        $entity = NULL;
        $new_record = sbac_resource_get_state($entity, $node->nid, $user->uid, 'post_being_reviewed');
        if (!$new_record) {
          sbac_resource_delete_resource_state($entity);
        }

        $entity = NULL;
        $new_record = sbac_resource_get_state($entity, $node->nid, $user->uid);
        if ($new_record) {
          $entity->state = 'post_view_rejected';
          sbac_resource_save_resource_state($entity, $new_record);
        }
      }
    }

    if (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'approved') {
      $post_review_in_progress = _sbac_resource_determine_feedback($node->nid, 'post', FALSE, 1, 0, 1, 'single');
      if ($post_review_in_progress) {
        sbac_resource_delete_resource_state_for_all_role($node, SBAC_RESOURCE_PUBLISHER_ROLE, 'post_needs_review');
        $entity = NULL;
        $new_record = sbac_resource_get_state($entity, $node->nid, $post_review_in_progress['uid']);
        $entity->state = 'post_being_reviewed';
        sbac_resource_save_resource_state($entity, $new_record);
      }
      else {
        $entity = NULL;
        $new_record = sbac_resource_get_state($entity, $node->nid, FALSE, 'post_being_reviewed', 0);
        if (!$new_record) {
          sbac_resource_delete_resource_state($entity);
        }
        sbac_resource_save_resource_state_for_all_role($node, SBAC_RESOURCE_PUBLISHER_ROLE, 'post_needs_review');
      }
      // remove any left over states.
      sbac_resource_delete_resource_state_given_state($node, 'qc_being_reviewed');
      sbac_resource_delete_resource_state_given_state($node, 'qc_reviewed');
    }

    if (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'published') {
      sbac_resource_save_resource_state_for_all_role($node, 'all', 'published');
      if ($node->workbench_moderation['current']->from_state == 'approved') {
        sbac_resource_delete_resource_state_given_state($node, 'post_being_reviewed');
      }
      _sbac_resource_save_reviewers($node, NULL, TRUE);
    }

    // Clean up the table.
    // If the node is in neither state, delete all records associated to this role and node.
    if (isset($node->workbench_moderation['current']->state) &&
      $node->workbench_moderation['current']->state != 'being_reviewed' &&
      $node->workbench_moderation['current']->state != 'needs_review') {
      sbac_resource_delete_resource_state_for_all_role($node, SBAC_RESOURCE_REVIEWER_ROLE, 'gk_being_reviewed');
      sbac_resource_delete_resource_state_for_all_role($node, SBAC_RESOURCE_REVIEWER_ROLE, 'gk_needs_review');
      sbac_resource_delete_resource_state_for_all_role($node, SBAC_RESOURCE_REVIEWER_ROLE, 'qc_being_reviewed');
      sbac_resource_delete_resource_state_for_all_role($node, SBAC_RESOURCE_REVIEWER_ROLE, 'qc_needs_review');
    }

    // if the node is in neither state, delete all records associated to this role and node.
    if (isset($node->workbench_moderation['current']->state) &&
      $node->workbench_moderation['current']->state != 'approved') {
      sbac_resource_delete_resource_state_for_all_role($node, SBAC_RESOURCE_PUBLISHER_ROLE, 'post_being_reviewed');
      sbac_resource_delete_resource_state_for_all_role($node, SBAC_RESOURCE_PUBLISHER_ROLE, 'post_needs_review');
    }
  }
}

/**
 * Implements hook_query_alter().
 *
 * Alters the resource review view since the group by statement doesn't work
 * in the hook_views_query_alter(). This is a bug in views.
 *
 * @param $query
 */
function sbac_resource_query_alter( &$query) {
  if(isset($query->alterMetaData['view']->name) && $query->alterMetaData['view']->name == "resource_review"){
    $query->groupBy("node.nid");
  }
}

/**
 * Get all users by the role name.
 *
 * @param $role_name
 * @return mixed
 */
function sbac_resource_get_users_by_role($role_name) {
  $uids = array();
  // Get role
  $role = user_role_load_by_name($role_name);
  // Query
  $query = "SELECT DISTINCT(ur.uid) FROM {users_roles} AS ur WHERE ur.rid = :rid";
  $result = db_query($query, array(':rid' => $role->rid));
  foreach ($result as $row) {
    $uids[] = $row->uid;
  }
  // Load users.
  $accounts = array();
  $accounts = user_load_multiple($uids);
  return $accounts;
}

/**
 * Inserts / Updates the resource state.
 *
 * @param $entity
 * @param $new_record
 */
function sbac_resource_save_resource_state($entity, $new_record) {
  $mem = memory_get_usage(TRUE);
  error_log('sbac_resource_save_resource_state: ' . $mem);

  if ($new_record) {
    drupal_write_record('sbac_node_resource_state', $entity);
  }
  else {
    drupal_write_record('sbac_node_resource_state', $entity, array('nid', 'uid'));
  }
}

/**
 * Loops through all users given a role and saves the new record.
 *
 * @param $node
 * @param $role_name
 * @param $new_state
 */
function sbac_resource_save_resource_state_for_all_role($node, $role_name, $new_state, $flag_param = FALSE) {
  $mem = memory_get_usage(TRUE);
  error_log('sbac_resource_save_resource_state_for_all_role: ' . $mem);

  $qc_reviewed = NULL;
  if ($flag_param) {
    $result = db_query('SELECT s.* FROM {sbac_node_resource_state} s WHERE s.nid = :nid AND s.state = :state', array(':nid' => $node->nid, ':state' => 'qc_reviewed'));
    foreach ($result as $row) {
      $qc_reviewed[] = 'qc_reviewed::' . $row->uid;
    }
    if (count($qc_reviewed) > 0) {
      $qc_reviewed = implode('::', $qc_reviewed);
    }
  }
  $entity = NULL;
  $flag = $role_name . '::' . $new_state . '::' . $node->nid;
  if ($qc_reviewed) {
    $flag .= '::' . $qc_reviewed;
  }
  $new_record = sbac_resource_get_state($entity, $node->nid, SBAC_RESOURCE_ALL_USER_FLAG, $new_state);
  $entity->state = $new_state;
  $entity->flag = $flag;
  sbac_resource_save_resource_state($entity, $new_record);
}

/**
 * Loops through all users given a role and deletes the record for the given
 * node id. Excluding the uid provided (if one).
 *
 * @param $node
 * @param $role_name
 * @param null $keep_uid
 *
 * $keep_uid = NULL, $states_to_delete = array()
 */
function sbac_resource_delete_resource_state_for_all_role($node, $role_name, $old_state) {
  // Sometimes we get an nid string.
  if (!is_object($node)) {
    $node = node_load($node);
  }

  $mem = memory_get_usage(TRUE);
  error_log('sbac_resource_delete_resource_state_for_all_role: ' . $mem);

  $entity = NULL;
  $new_record = sbac_resource_get_state($entity, $node->nid, SBAC_RESOURCE_ALL_USER_FLAG, $old_state);
  if (!$new_record) {
    sbac_resource_delete_resource_state($entity);
  }
}

/**
 * Deletes the resource state.
 *
 * @param $node
 * @param $old_state
 */
function sbac_resource_delete_resource_state_given_state($node, $old_state) {
  $entity = NULL;
  $new_record = sbac_resource_get_state($entity, $node->nid, NULL, $old_state);
  if (!$new_record) {
    db_delete('sbac_node_resource_state')
      ->condition('nid', $node->nid)
      ->condition('state', $old_state)
      ->execute();
  }
}

/**
 * Remove all resource states related to this NID except the given state.
 *
 * @param $nid
 * @param $state
 */
function sbac_resource_delete_resource_state_except($nid, $state) {
  db_delete('sbac_node_resource_state')
    ->condition('nid', $nid)
    ->condition('state', $state, '<>')
    ->execute();
}

/**
 * Deletes the resource state for the given UID and NID.
 *
 * @param $entity
 */
function sbac_resource_delete_resource_state($entity) {
  if (!isset($entity->nid) || !$entity->nid) {
    return;
  }
  if (!isset($entity->uid) || $entity->uid === FALSE) {
    return;
  }
  if (!isset($entity->state) || !$entity->state) {
    return;
  }

  $mem = memory_get_usage(TRUE);
  error_log('sbac_resource_delete_resource_state: ' . $mem);

  if ($entity->uid == 0) {
    db_delete('sbac_node_resource_state')
      ->condition('nid', $entity->nid)
      ->condition('uid', $entity->uid)
      ->condition('state', $entity->state)
      ->condition('flag', $entity->flag)
      ->execute();
  }
  else {
    db_delete('sbac_node_resource_state')
      ->condition('nid', $entity->nid)
      ->condition('uid', $entity->uid)
      ->condition('state', $entity->state)
      ->execute();
  }
}

/**
 * Gets the state object from the custom table.
 *
 * @param $nid
 * @param $uid
 * @param $entity
 * @return bool
 */
function sbac_resource_get_state(&$entity, $nid, $uid = NULL, $state = NULL, $flag = NULL){
  $mem = memory_get_usage(TRUE);
  error_log('sbac_resource_get_state: ' . $mem);

  $query = db_select('sbac_node_resource_state', 'snrs');
  $query->fields('snrs');
  $query->condition('nid', $nid);
  if ($uid != NULL) {
    $query->condition('uid', $uid);
  }
  if ($state != NULL) {
    $query->condition('state', $state);
  }
  if ($flag != NULL) {
    $query->condition('flag', $flag);
  }
  $result = $query->execute()->fetchObject();
  if (!$result) {
    $entity = new stdClass();
    $entity->nid = $nid;
    $entity->uid = $uid;
    $new_record = TRUE;
  }
  else {
    $entity = $result;
    $new_record = FALSE;
  }

  return $new_record;
}

/**
 * Implements hook_node_update();
 *
 * @param $node
 */
function sbac_resource_node_update($node) {
  if ($node->type == 'resource') {
    if (isset($node->workbench_moderation['published'])) {
      $node->workbench_moderation['published']->vid = $node->vid;
    }
  }
}

/**
 * Implements of hook_page_alter().
 *
 * @param $page
 */
function sbac_resource_page_alter(&$page) {
  if (!isset($page['content']['system_main']['#form_id'])) {
  }
  else {
    if (isset($page['content']['system_main']['#form_id']) && $page['content']['system_main']['#form_id'] == 'resource_node_form') {
      $page['help']['system_help']['#markup'] = '';
    }
  }
}

/**
 * Text to display when "Has No License" option is selected on Licensing radio boxes
 * in Resource - Materials
 *
 * @return string
 */
function sbac_resource_licensing_form_has_no_license() {
  $output = '
              <ul>
                <li>Before continuing, you must obtain permission to use the resource in the Digital Library.</li>
                <li>Download, complete and submit the Copyright Clearance Form to resume your submittal.</li>
              </ul>
            ';

  return $output;
}

/**
 * Creates a grid or list button.
 *
 * @return string
 */
function sbac_resource_grid_list_button() {
  switch (arg(0)) {
    case 'my-resources':
      $name = SBAC_RESOURCE_MY_RESOURCES_VIEW_MODE;
      break;
    case 'digital-library-resources':
      $name = SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE;
      break;
    case 'resource-review':
      $name = SBAC_RESOURCE_RESOURCE_REVIEW_VIEW_MODE;
      break;
    default:
      $name = SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE;
      break;
  }
  $path = arg(0);
  if (isset($_SESSION[$name])) {
    $display_mode = $_SESSION[$name];
    if ($display_mode == 'grid_view') {
      $button = l('List View', $path . '/list', array(
          'absolute' => TRUE,
          'attributes' => array(
            'class' => array('sbac-list-layout')
          )
        ));
    }
    else {
      $button = l('Grid View', $path . '/grid', array(
          'absolute' => TRUE,
          'attributes' => array(
            'class' => array('sbac-grid-layout')
          )
        ));
    }
  }
  else {
    $button = l('List View', $path . '/list', array(
        'absolute' => TRUE,
        'attributes' => array(
          'class' => array('sbac-list-layout')
        )
      ));
    if (arg(1) != NULL && arg(1) == 'list') {
      $button = l('Grid View', $path . '/grid', array(
          'absolute' => TRUE,
          'attributes' => array(
            'class' => array('sbac-grid-layout')
          )
        ));
    }
  }

  return $button;
}

/**
 * Implements hook_block_info().
 *
 */
function sbac_resource_block_info() {
  $blocks['sbac_resource_results_count'] = array(
    'info' => t('Search Results Count'),
    'region' => 'sub-header',
    'pages' => "digital-library-resources*\nmy-resources*\nresource-review*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -23,
    'status' => 1,
  );

  $blocks['sbac_resource_create_button'] = array(
    'info' => t('Create New Resource'),
    'region' => 'sub-header',
    'pages' => "my-resources*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'weight' => -22,
    'status' => 1,
  );

  $blocks['sbac_resource_grid_list_button'] = array(
    'info' => t('Grid / List button'),
    'region' => 'search',
    'pages' => "digital-library-resources*\nmy-resources*\nresource-review*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
    'status' => 1,
    'weight' => 0,
  );

  $blocks['sbac_resource_back_button'] = array(
    'info' => t('Back Button'),
    'region' => 'sub-header',
    'pages' => "content*\nterms-of-service",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'status' => 1,
  );

  $blocks['sbac_resource_dl_sort_form'] = array(
    'info' => t('Sort'),
    'region' => 'sub-header',
    'pages' => "digital-library-resources*\n",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -21,
    'status' => 1,
  );

  $blocks['sbac_resource_rr_sort_form'] = array(
    'info' => t('Sort'),
    'region' => 'sub-header',
    'pages' => "resource-review*\n",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -21,
    'status' => 1,
  );

  $blocks['sbac_resource_mr_sort_form'] = array(
    'info' => t('Sort'),
    'region' => 'sub-header',
    'pages' => "my-resources*\n",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -21,
    'status' => 1,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function sbac_resource_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'sbac_resource_results_count':
      switch (arg(0)) {
        case 'my-resources':
          $name = SBAC_SEARCH_MY_RESOURCES_COUNT;
          break;
        case 'digital-library-resources':
          $name = SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_COUNT;
          break;
        case 'resource-review':
          $name = SBAC_SEARCH_RESOURCE_REVIEW_COUNT;
          break;
        default:
          $name = SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_COUNT;
          break;
      }

      $count = 0;
      if (isset($_SESSION[$name])) {
        $count = $_SESSION[$name];
      }
      $block['subject'] = NULL;
      $block['content'] = '<h3 class="left">' . t('Resources (' . $count . ')') . '</h3>';
      break;

    case 'sbac_resource_create_button':
      $block['subject'] = NULL;
      $block['content'] = sbac_resource_create_button();
      break;

    case 'sbac_resource_grid_list_button':
      $block['subject'] = NULL;
      $block['content'] = sbac_resource_grid_list_button();
      break;

    case 'sbac_resource_back_button':
      $block['subject'] = NULL;
      $previous_url = $_SERVER['HTTP_REFERER'];
      global $base_url;
      if (strpos($previous_url, $base_url) !== FALSE) {
        $previous_url = str_replace($base_url, '', $previous_url);
      }
      $block['content'] = '<a onclick="window.history.back(); return false;" href="' . $previous_url . '" class="button">Back</a>';
      break;
    case 'sbac_resource_dl_sort_form':
      $block['subject'] = NULL;
      $block['content'] = drupal_get_form('sbac_resource_digital_library_sort_form');
      break;
    case 'sbac_resource_rr_sort_form':
      $block['subject'] = NULL;
      $block['content'] = drupal_get_form('sbac_resource_resource_review_sort_form');
      break;
    case 'sbac_resource_mr_sort_form':
      $block['subject'] = NULL;
      $block['content'] = drupal_get_form('sbac_resource_my_resources_sort_form');
      break;
  }
  return $block;
}

/**
 * Implements hook_block_info_alter().
 *
 * @param $blocks
 * @param $theme
 * @param $code_blocks
 */
function sbac_resource_block_info_alter(&$blocks, $theme, $code_blocks) {
  $blocks['system']['navigation']['status'] = FALSE;
  $blocks['workbench']['block']['status'] = FALSE;

  if (isset($blocks['sbac_resource']['sbac_resource_results_count']) && $theme == 'SBAC') {
    $blocks['sbac_resource']['sbac_resource_results_count']['pages'] = "digital-library-resources*\nmy-resources*\nresource-review*";
  }
  if (isset($blocks['sbac_resource']['sbac_resource_create_button']) && $theme == 'SBAC') {
    $blocks['sbac_resource']['sbac_resource_create_button']['pages'] = "my-resources*";
  }
  if (isset($blocks['sbac_resource']['sbac_resource_grid_list_button']) && $theme == 'SBAC') {
    $blocks['sbac_resource']['sbac_resource_grid_list_button']['pages'] = "digital-library-resources*\nmy-resources*\nresource-review*";
  }
}

/**
 * Create button
 *
 * @return null|string
 */
function sbac_resource_create_button() {
  global $user;
  $content = NULL;

  // Resource contributor button.
  if (in_array('resource contributor', $user->roles)) {
    $content = l('Create New Resource', 'node/add/resource', array(
      'absolute' => TRUE,
      'attributes' => array('class' => array('small', 'button')),
      'query' => array('destination' => arg(0)),
    ));
  }

  // DLRB admin / member button.
  if ($user->uid == 1 || in_array('DLRB member', $user->roles) || in_array('digital library administrator', $user->roles) || in_array('system administrator', $user->roles)) {
    $create_urls[] = l('Resource', 'node/add/resource', array('attributes' => array('class' => array('create-resource')), 'absolute' => TRUE, 'external' => TRUE, 'query' => array('type' => 'resource')));
    $create_urls[] = l('Content Module', 'node/add/resource', array('attributes' => array('class' => array('create-module')), 'absolute' => TRUE, 'external' => TRUE, 'query' => array('type' => 'module')));
    $content = '<a class="button small arrow sbac-create-resource-dropdown" data-dropdown="sbac-create-resource">'. t('Create'). '<span></span></a>';
    $content .= theme('item_list', array(
      'items' => $create_urls,
      'attributes' => array(
        'class' => 'materials-dropdown f-dropdown',
        'id' => 'sbac-create-resource'
      )
    ));
  }
  return $content;
}

/**
 * Cleans the text and remove's any malicious text.
 *
 * @param $form_state
 */
function sbac_resource_clean_text(&$form_state) {
  foreach ($form_state['values'] as $field_name => $field) {
    if (is_array($field) && isset($field['und'][0]['value']) && $field['und'][0]['value'] != NULL) {
      $form_state['values'][$field_name]['und'][0]['value'] = filter_xss($field['und'][0]['value']);
    }
    if ($field_name == 'title' && $field != NULL) {
      $form_state['values']['title'] = filter_xss($field);
    }
  }
}

/**
 * Determines if the display is grid / list.
 *
 * @param string $page can be 'dl', 'mr' or 'rr' (for each page).
 * @return string
 */
function sbac_resource_determine_grid_or_list() {
  switch (arg(0)) {
    case 'my-resources':
      $name = SBAC_RESOURCE_MY_RESOURCES_VIEW_MODE;
      break;
    case 'digital-library-resources':
      $name = SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE;
      break;
    case 'resource-review':
      $name = SBAC_RESOURCE_RESOURCE_REVIEW_VIEW_MODE;
      break;
    default:
      $name = SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE;
      break;
  }

  if (isset($_SESSION[$name])) {
    $display = $_SESSION[$name];
    if (arg(1) == 'list') {
      $display = 'list_view';
    }
    else {
      if (arg(1) == 'grid') {
        $display = 'grid_view';
      }
    }
    $_SESSION[$name] = $display;
  }
  else {
    // By default show grid layout with link to list layout
    $display = 'grid_view';
    if (arg(1) == 'list') {
      $display = 'list_view';
    }
    // Add session variable to persist for users session.
    $_SESSION[$name] = $display;
  }
  return $display;
}

/**
 * Truncates Resources.
 *
 * @param $html
 * @param int $maxLength
 * @return string
 */
function sbac_resource_truncate($html, $maxLength = 100) {
  mb_internal_encoding("UTF-8");
  $printedLength = 0;
  $position = 0;
  $tags = array();
  $newContent = '';

  $html = $content = preg_replace("/<img[^>]+\>/i", "", $html);

  while ($printedLength < $maxLength && preg_match('{</?([a-z]+)[^>]*>|&#?[a-zA-Z0-9]+;}', $html, $match, PREG_OFFSET_CAPTURE, $position)) {
    list($tag, $tagPosition) = $match[0];
    // Print text leading up to the tag.
    $str = mb_strcut($html, $position, $tagPosition - $position);
    if ($printedLength + mb_strlen($str) > $maxLength) {
      $newstr = mb_strcut($str, 0, $maxLength - $printedLength);
      $newstr = preg_replace('~\s+\S+$~', '', $newstr);
      $newContent .= $newstr;
      $printedLength = $maxLength;
      break;
    }
    $newContent .= $str;
    $printedLength += mb_strlen($str);
    if ($tag[0] == '&') {
      // Handle the entity.
      $newContent .= $tag;
      $printedLength++;
    }
    else {
      // Handle the tag.
      $tagName = $match[1][0];
      if ($tag[1] == '/') {
        // This is a closing tag.
        $openingTag = array_pop($tags);
        assert($openingTag == $tagName); // check that tags are properly nested.
        $newContent .= $tag;
      }
      else {
        if ($tag[mb_strlen($tag) - 2] == '/') {
          // Self-closing tag.
          $newContent .= $tag;
        }
        else {
          // Opening tag.
          $newContent .= $tag;
          $tags[] = $tagName;
        }
      }
    }

    // Continue after the tag.
    $position = $tagPosition + mb_strlen($tag);
  }

  // Print any remaining text.
  if ($printedLength < $maxLength && $position < mb_strlen($html)) {
    $newstr = mb_strcut($html, $position, $maxLength - $printedLength);
    $newstr = preg_replace('~\s+\S+$~', '', $newstr);
    $newContent .= $newstr;
  }

  // Close any open tags.
  while (!empty($tags)) {
    $newContent .= sprintf('</%s>', array_pop($tags));
  }

  return $newContent;
}

/**
 * Updates the average rating score.
 *
 * @param $nid
 * @param null $exclude
 */
function sbac_resource_update_average_rating_score($nid, $exclude = NULL) {
  // Initialize variables.
  $entity_type = 'review';
  $all_reviews = array();
  $scores = array();

  // Query all reviews for the node.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', 'end_use')
    ->propertyCondition('node_id', $nid, '=');

  // Compute the totals without this id. Used for when deleting a review.
  if (!empty($exclude)) {
    $query->propertyCondition('id', $exclude, '!=');
  }

  $result = $query->execute();
  if ($result[$entity_type]) {
    $review_ids = array_keys($result[$entity_type]);
    $all_reviews = entity_load($entity_type, $review_ids);
  }

  // Loop through results and pull the avg score value for each review.
  if (!empty($all_reviews)) {
    foreach ($all_reviews as $ent_id => $review) {
      $review_data = entity_metadata_wrapper($entity_type, $review);
      if (isset($review_data->field_avg_rating)) {
        $scores[$ent_id] = $review_data->field_avg_rating->value();
      }
    }
  }

  $overall_avg = 0;
  if (!empty($scores)) {
    $overall_total = 0;
    foreach ($scores as $score) {
      $overall_total += $score;
    }
    $overall_avg = $overall_total / count($scores);
  }

  $resource_node = node_load($nid);
  if (!empty($resource_node)) {
    // Cant do full node save, workbench moderation doesnt like it.
    $resource_node->field_node_avg_rating[LANGUAGE_NONE][0]['value'] = $overall_avg;
    entity_save_field(array('field_node_avg_rating'), $resource_node, 'node', $nid);
  }
}

/**
 * Implements hook_entity_delete().
 *
 * @param $entity
 * @param $type
 */
function sbac_resource_entity_delete($entity, $type) {
  if ($type == 'review') {
    // Ensure the average rating for the node gets recalculated when a review is deleted.
    $entity_wrapper = entity_metadata_wrapper($type, $entity);
    $nid = $entity_wrapper->node_id->value();
    $eid = $entity_wrapper->id->value();
    sbac_resource_update_average_rating_score($nid, $eid);
  }
}

/**
 * Implements hook_node_access().
 *
 * @param $node
 * @param $op
 * @param $account
 */
function sbac_resource_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'resource') {
    $access = sbac_resource_determine_access($node, $account, $op);
    if (!$access) {
      variable_set('site_404', '');
      return NODE_ACCESS_DENY;
    }
    else {
      return NODE_ACCESS_ALLOW;
    }
  }
}

/**
 * Determines access to the node. Currently state and workflow determine this.
 *
 * @param $nid
 * @param $uid
 * @param $op
 * @return bool
 */
function sbac_resource_determine_access($node, $account, $op) {
  // state access
  $access = _sbac_resource_determine_state_access($node, $account);
  if ($access || (isset($_SERVER['HTTP_REFERER']) && strpos($_SERVER['HTTP_REFERER'], 'resource-review') === TRUE)) {
    // workflow access
    $access = _sbac_resource_determine_workflow_access($node, $account, $op);
  }
  return $access;
}

/**
 * Determine workflow access.
 *
 * @param $node
 * @param $account
 * @param $op = create, update, delete, view
 * @return bool
 */
function _sbac_resource_determine_workflow_access($node, $account, $op) {
  $access = FALSE;

  if ($op == 'create') {
    $access = TRUE;
  }

  if (isset($node->workbench_moderation['current']->state)) {
    $state = $node->workbench_moderation['current']->state;
    $query = db_select('sbac_node_resource_state', 's');
    $query->fields('s');
    $query->condition('s.nid', $node->nid);
    switch ($state) {
      case 'draft':
        // author has access view/edit
        $query->condition('s.uid', $account->uid);
        $query->condition('s.state', 'author');
        $result = $query->execute();
        $count = $result->rowCount();
        if ($count) {
          if ($account->uid == $node->uid && ($op == 'create' || $op == 'update' || $op == 'delete' || $op == 'view')) {
            $access = TRUE;
          }
        }
        break;
      case 'needs_review':
        // author has view
        // resource reviewer has view/edit
        $query->condition('s.uid', 0);
        $query->condition('s.state', 'gk_needs_review');
        $result = $query->execute();
        $count = $result->rowCount();
        if ($count) {
          if (in_array('resource reviewer', $account->roles) && ($op == 'view' || $op == 'update')) {
            $access = TRUE;
          }
        }
        if ($account->uid == $node->uid && $op == 'view') {
          $access = TRUE;
        }
        break;
      case 'being_reviewed':
        // author has view
        // resource reviewer has view/edit
        $all_condition = db_and()->condition('s.state', array('gk_needs_review', 'qc_needs_review'), 'IN')->condition('s.uid', 0);
        $user_condition = db_and()->condition('s.state', array('gk_being_reviewed', 'qc_being_reviewed', 'qc_reviewed'), 'IN')->condition('s.uid', $account->uid);
        $query->condition(db_or()->condition($all_condition)->condition($user_condition));
        $result = $query->execute();
        $count = $result->rowCount();
        if ($count) {
          if (in_array('resource reviewer', $account->roles) && ($op == 'view' || $op == 'update')) {
            $access = TRUE;
          }
        }
        if ($account->uid == $node->uid && $op == 'view') {
          $access = TRUE;
        }
        break;
      case 'approved':
        // author has view
        // resource publisher has view/edit
        $all_condition = db_and()->condition('s.state', 'post_needs_review')->condition('s.uid', 0);
        $user_condition = db_and()->condition('s.state', 'post_being_reviewed')->condition('s.uid', $account->uid);
        $query->condition(db_or()->condition($all_condition)->condition($user_condition));
        $result = $query->execute();
        $count = $result->rowCount();
        if ($count) {
          if (in_array('resource publisher', $account->roles) && ($op == 'view' || $op == 'update')) {
            $access = TRUE;
          }
        }
        if ($account->uid == $node->uid && $op == 'view') {
          $access = TRUE;
        }
        break;
      case 'published':
        // everyone has view
        // author has view
        // admin/dlrb member/moderator have view/edit
        $query->condition('s.uid', 0);
        $query->condition('s.state', 'published');
        $result = $query->execute();
        $count = $result->rowCount();
        if ($count) {
          if ($op == 'view') {
            $access = TRUE;
          }
          if ((in_array('admininstrator', $account->roles) ||
              in_array('DLRB member', $account->roles) ||
              in_array('moderator', $account->roles)) && (
              $op == 'view' || $op == 'update' || $op == 'delete')) {
            $access = TRUE;
          }
        }
        if ($account->uid == $node->uid && $op == 'view') {
          $access = TRUE;
        }
        break;
      case 'returned':
        // author has view/edit
        // resource reviewer has view
        // resource puslisher has view
        $query->condition('s.uid', 0);
        $query->condition('s.state', 'returned');
        $result = $query->execute();
        $count = $result->rowCount();
        if ($count) {
          if (in_array('resource reviewer', $account->roles) && $op == 'view') {
            $access = TRUE;
          }
          if (in_array('resource publisher', $account->roles) && $op == 'view') {
            $access = TRUE;
          }
        }
        if ($account->uid == $node->uid && $op == 'view') {
          $access = TRUE;
        }
        break;
      case 'rejected':
        // author has view/edit
        // resource reviewer has view
        // resource publisher has view
        $query->condition('s.uid', $account->uid);
        $condition = db_or()->condition('s.state', 'gk_view_rejected')->condition('s.state', 'post_view_rejected');
        $query->condition($condition);
        $result = $query->execute();
        $count = $result->rowCount();
        if ($count) {
          if (in_array('resource reviewer', $account->roles) && $op == 'view') {
            $access = TRUE;
          }
          if (in_array('resource publisher', $account->roles) && $op == 'view') {
            $access = TRUE;
          }
        }
        if ($account->uid == $node->uid && ($op == 'view' || $op == 'update')) {
          $access = TRUE;
        }
        break;
      case 'removed':
        // author has view/edit
        if ($account->uid == $node->uid && ($op == 'view' || $op == 'update')) {
          $access = TRUE;
        }
        break;
    }
  }

  return $access;
}

/**
 * Given the node and account, see if the user has access
 * to view given the state of the node.
 *
 * @param $node
 * @param $account
 * @param $op
 * @return bool
 */
function _sbac_resource_determine_state_access($node, $account) {
  $all_states = array();
  $access = FALSE;
  if (isset($node->field_view_permissions['und'][0]['value'])) {
    // 0 is all states, 1 is specific states
    $view_permissions = $node->field_view_permissions['und'][0]['value'];
    if ($view_permissions == 0) {
      $all_states = array();
    }
    else {
      if (isset($node->field_view_permissions_per_state['und'])) {
        foreach ($node->field_view_permissions_per_state['und'] as $key => $tid) {
          $all_states[] = $tid['tid'];
        }
      }
    }
  }
  // if the array is empty, then the user has access.
  if (empty($all_states)) {
    $access = TRUE;
    return $access;
  }
  else {
    $user = sbac_central_get_user_with_states($all_states, $account->uid);
    if ($user) {
      $access = TRUE;
    }
  }
  return $access;
}

/**
 * Add a user to the field_recent_reviewers field
 * @param $node
 * @param $account
 * @param bool $reset
 */
function _sbac_resource_save_reviewers(&$node, $account = NULL, $reset = FALSE, $remove = FALSE) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  if ($reset) {
    $node->field_recent_reviewers[LANGUAGE_NONE] = array();
    field_attach_update('node', $node);
    return;
  }
  if (!empty($node->field_recent_reviewers[LANGUAGE_NONE])) {
    foreach ($node->field_recent_reviewers[LANGUAGE_NONE] as $index => $reviewer) {
      if ($reviewer['target_id'] == $account->uid) {
        unset($node->field_recent_reviewers[LANGUAGE_NONE][$index]);
      }
    }
  }
  if (!$remove) {
    $node->field_recent_reviewers[LANGUAGE_NONE][] = array(
      'target_id' => $account->uid,
    );
  }
  field_attach_update('node', $node);
}
