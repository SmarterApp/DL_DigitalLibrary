<?php
/**
 * @file
 * Code for the SBAC resource feature.
 */

include_once 'sbac_resource.features.inc';
include_once 'sbac_resource.forms.inc';
include_once 'sbac_resource.theme.inc';

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_resource_update_projects_alter(&$projects) {
  unset($projects['sbac_resource']);
}

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function sbac_resource_menu() {
  $items = array();

  $items['sbac_resource/%ctools_js/add-alignment'] = array(
    'page callback' => 'sbac_resource_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac_resource/%ctools_js/submit-resource'] = array(
    'page callback' => 'sbac_resource_submit_resource_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac_resource/%ctools_js/delete-resource'] = array(
    'page callback' => 'sbac_resource_delete_resource_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac-resource/download/%node'] = array(
    'page callback' => 'sbac_resource_download_contents',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );

  $items['sbac-resource/download/%node'] = array(
    'page callback' => 'sbac_resource_download_contents',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
  );

  $items['digital-library-resources'] = array(
    'title' => 'Digital Library Resources',
    'page callback' => 'sbac_resource_digital_library_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => -50,
  );

  $items['admin/structure/types/manage/%node_type/messages'] = array(
    'title' => 'Messages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sbac_resource_form_messages'),
    'access arguments' => array(4),
    'access callback' => array('sbac_resource_form_messages_access'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'file' => 'sbac_resource.admin.inc',
  );

  return $items;
}

/**
 * Packages and downloads all materials into a zip.
 *
 * @param $node
 */
function sbac_resource_download_contents($node) {
  if ($node && isset($node->document)) {
    // check to make sure there is public:// resources to download
    if (sbac_resource_downloadable_scheme($node->document)) {
      $destination = variable_get('file_public_path', conf_path() . '/files') . '/resource_zips/';
      if (!file_exists($destination)) {
        mkdir($destination);
      }

      module_load_include('api.inc', 'cmis');
      try {
        // See if Alfresco is available.
        $repository = cmis_get_repository();
        $alfresco = variable_get('cmis_repositories');
        // Authenticate user and receive a ticket.
        $data = drupal_json_encode(array('username' => $alfresco['default']['user'], 'password' => $alfresco['default']['password']));
        $options = array(
          'method' => 'POST',
          'data' => $data,
          'headers' => array('Content-Type' => 'application/json'),
        );
        $response = drupal_http_request($alfresco['default']['login_url'], $options);
        if ($response->code == 200 && $response->data) {
          $ticket = NULL;
          $data = drupal_json_decode($response->data);
          if ($data && isset($data['data']['ticket'])) {
            $ticket = $data['data']['ticket'];
          }

          // If we recieved a ticket, lets get the zip file.
          if ($ticket) {
            $comma = '';
            $document_ids = '';
            foreach ($node->document as $media) {
              if ($media->document_id) {
                $document_ids .= $comma . str_replace('workspace://SpacesStore/', '', $media->document_id);
                $comma = ',';
              }
            }

            // Get the zip contents.
            $url = $alfresco['default']['zip_url'] . '?nodes=' . $document_ids . '&filename=' . $node->nid . '&noaccent=true&alf_ticket=' . $ticket;
            $opts = array(
              CURLOPT_URL =>$url,
              CURLINFO_CONTENT_TYPE => "text/xml",
              CURLOPT_BINARYTRANSFER => TRUE,
              CURLOPT_RETURNTRANSFER => TRUE
            );

            $ch = curl_init();
            curl_setopt_array($ch, $opts);
            $data = curl_exec($ch);
            $info = curl_getinfo($ch);
            curl_close($ch);

            if ($info['http_code'] == 200) {
              $filename = 'download_' . REQUEST_TIME . '.zip';
              header("Content-Type: application/x-gzip");
              header("Content-disposition: attachment; filename=" . $filename);
              echo $data;
            }
          }
        }
      }
      catch (CMISException $e) {
        // cmis_error_handler('sbac_documents_presave_document', $e);
      }
    }
  }
}

/**
 * Function to check if there are any downloadable files.
 *
 * @param $files
 * @return bool
 */
function sbac_resource_downloadable_scheme($documents) {
  foreach ($documents as $media) {
    if ($media->document_id) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for menu item.
 *
 * @param $node_type
 * @return bool
 */
function sbac_resource_form_messages_access($node_type) {
  if ($node_type->type == 'resource') {
    return user_access('administer site configuration');
  }
  return FALSE;
}

/**
 * Implementation of hook_preprocess_node()
 *
 * @param $vars
 */
function sbac_resource_preprocess_node(&$vars) {
  if ($vars['type'] == 'resource') {
    drupal_add_js(libraries_get_path('jwplayer') . '/jwplayer.js');
    drupal_add_js(drupal_get_path('module', 'sbac_resource') . '/js/sbac_resource.node.js');
    $vars['author'] = ''; $vars['license'] = ''; $vars['owner'] = '';
    if (isset($vars['field_author'][0]['safe_value'])) {
      $vars['author'] = $vars['field_author'][0]['safe_value'];
    }
    if (isset($vars['field_publisher']['und'][0]['safe_value'])) {
      $vars['owner'] = $vars['field_publisher']['und'][0]['safe_value'];
    }
    if (isset($vars['field_license'][0]['taxonomy_term']->name)) {
      $vars['license'] = $vars['field_license'][0]['taxonomy_term']->name;
    }
    if (isset($vars['document'][0])) {
      // Determine the file type, load up the correct video player, doc viewer or image viewer.
      $viewer = _sbac_resource_preview_content($vars);
      $materials = _sbac_resource_preview_materials($vars);
      if (isset($vars['document']) && sbac_resource_downloadable_scheme($vars['document'])) {
        $vars['download'] = l('Download', 'sbac-resource/download/' . $vars['nid'], array('attributes' => array('class' => 'button small right')));
      }
      $vars['viewer'] = $viewer['viewer'];
      $vars['viewer_filename'] = $viewer['viewer_filename'];
      $vars['materials'] = $materials;
    }
  }
}

/**
 * Creates the preview content.
 *
 * @param $vars
 * @return string
 */
function _sbac_resource_preview_content(&$vars) {
  $viewer = NULL;
  if ($vars['document'][0]) {
    $media = $vars['document'][0];
    $type = _sbac_resource_determine_type($media);
    $viewer['viewer_filename'] = $media->filename;
    // @TODO: Need to build URL;
    $url = 'http://haha.com';

    if ($type == 'document') {
      $viewer['viewer'] = '<iframe src="http://docs.google.com/viewer?url=' . $url . '&embedded=true" width="850" height="400" style="border: none;"></iframe>';
    }
    else if ($type == 'video') {
      $jwplayer = 'jQuery(document).ready(function () {jwplayer("sbac-jwplayer").setup({ file: "' . $url . '", height: 400, width: 850});});';
      drupal_add_js($jwplayer, array('type' => 'inline', 'weight' => 999));
      $viewer['viewer'] = '<div id="sbac-jwplayer"></div>';
    }
    else if ($type == 'image') {
      $viewer['viewer'] = theme('image', array('path' => $url, 'width' => 850, 'height' => 400));
    }
    // replace with theming functions, preprocess theme functions haven't been implemented (except for schooltube), although templates have been
    else if ($type == 'schooltube') {
      $viewer['viewer'] = '<div class="flex-video"><iframe width="500" height="375" src="' . $url . '" frameborder="0" allowfullscreen="allowfullscreen" mozallowfullscreen="mozallowfullscreen" webkitallowfullscreen="webkitallowfullscreen"></iframe></div>';
    }
    else if ($type == 'teachertube') {
      $viewer['viewer'] = '<div class="flex-video"><iframe width="560" height="315" src="' . $url . '" frameborder="0" allowfullscreen/></iframe></div>';
    }
    else if ($type == 'slideshare') {
      $viewer['viewer'] = '<div class="flex-video"><iframe src="' . $url . '" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div>';
    }
    else if ($type == 'vimeo') {
      $viewer['viewer'] = '<div class="flex-video"><iframe src="' . $url . '" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></div>';
    }
    else if ($type == 'youtube') {
      $url .= '?rel=0'; // Disable related videos.
      $viewer['viewer'] = '<div class="flex-video"><iframe width="560" height="315" src="' . $url . '" frameborder="0" allowfullscreen></iframe></div>';
    }      
    else {
      $url = drupal_get_path('module', 'sbac_resource') . '/images/no-preview.jpg';
      $viewer['viewer'] = theme('image', array('path' => $url));
    }
  }
  return $viewer;
}

/**
 * Creates the materials dropdown.
 *
 * @param $vars
 * @return array
 */
function _sbac_resource_preview_materials(&$vars) {
  $materials = '';
  $material_urls = array();

  if (isset($vars['document'][0])) {
    foreach ($vars['document'] as $key => $media) {
      $type = _sbac_resource_determine_type($media);
      // @TODO: create the url for the media items.
      $url = 'http://hahah.com';
      if ($type == 'none') {
        $url = drupal_get_path('module', 'sbac_resource') . '/images/no-preview.jpg';
      }

      // check to see whether its public scheme or not, if so not external
      if ($media->document_id) {
        $material_urls[] = l(ucwords($media->filename), $url, array('attributes' => array('sbac-type' => $type)));
      }
      else { // embedded media
        if (strpos($media->embed_url, 'youtube')) {
          $url .= '?rel=0';
        }
        $material_urls[] = l(ucwords($media->filename), $url, array('attributes' => array('sbac-type' => $type), 'absolute' => TRUE, 'external' => TRUE));
      }
    }
  }

  if ($material_urls) {
    $materials = '<a class="button small arrow sbac-materials-dropdown" data-dropdown="sbac-materials">'. t('View All Materials'). '<span></span></a>';
    $materials .= theme('item_list', array(
      'items' => $material_urls,
      'attributes' => array(
        'class' => 'materials-dropdown f-dropdown',
        'id' => 'sbac-materials'
      )
    ));
  }

  return $materials;
}

/**
 * Creates the resource media variables.
 *
 * @param $url
 * @param $file
 * @return string
 */
function _sbac_resource_determine_type($media) {
  $type = 'document';

  if (!$media->document_id && !$media->fid) {
    $type = _sbac_resource_determine_media($media);
  }
  else {
    $ext = pathinfo($media->filename, PATHINFO_EXTENSION);
    $type = _sbac_resource_determine_extension($ext);
  }

  return $type;
}

/**
 * Determine the media type based on URL.
 *
 * @param $file object
 * @return string
 */
function _sbac_resource_determine_media($media) {
  $type = 'embed';
  $mimetype = file_get_mimetype($media->filename);
  preg_match('#video/(.*)#i', $mimetype, $matches);
  if (isset($matches[1]) && $matches[1]) {
    return $matches[1];
  } 
  return $type;
}

/**
 * Determine the filename extension.
 *
 * @param $ext
 * @return string
 */
function _sbac_resource_determine_extension($ext) {
  $media = 'document';

  switch (strtolower($ext)) {
    case 'txt';
    case 'doc';
    case 'docx';
    case 'pdf';
    case 'xls';
    case 'xlsx';
    case 'pptx';
    case 'ppt';
    case 'odt';
    case 'odp';
      $media = 'document';
      break;
    case 'mp4';
    case 'mov';
    case 'mp3';
    case 'aac';
      $media = 'video';
      break;
    case 'png';
    case 'jpg';
    case 'jpeg';
      $media = 'image';
      break;
    case 'mpg';
    case 'avi';
    case 'ods';
      $media = 'none';
      break;
  }
  return $media;
}

/**
 * Determine the filename extension.
 *
 * @param $ext
 * @return string
 */
function _sbac_resource_determine_file_type_icon($ext) {
  $media = 'document';

  switch (strtolower($ext)) {
    case 'txt';
    case 'doc';
    case 'docx';
      $media = 'doc';
      break;
    case 'pdf';
      $media = 'pdf';
      break;
    case 'xls';
    case 'xlsx';
      $media = 'xls';
      break;
    case 'pptx';
    case 'ppt';
      $media = 'ppt';
      break;
    case 'mp4';
    case 'mpg';
    case 'mov';
    case 'avi';
    case 'mp3';
    case 'aac';
      $media = 'video';
      break;
    case 'png';
    case 'jpg';
    case 'jpeg';
      $media = 'image';
      break;
  }

  return $media;
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function sbac_resource_preprocess_page(&$vars) {
  if (isset($vars['node']->type) && $vars['node']->type == 'resource') {
    if (isset($vars['page']['#type']) && $vars['page']['#type'] == 'page') {
      unset($vars['tabs']);
    }
  }
}

/**
 * Implements hook_preprocess_html().
 *
 * Determine the page display and toss a class on the body.
 *
 * @param $vars
 */
function sbac_resource_preprocess_html(&$vars) {
  if (arg(0) == 'digital-library-resources') {
    $display = sbac_resource_determine_grid_or_list();
    if ($display == 'grid_view') {
      $vars['classes_array'][] = 'grid-view';
    }
    else {
      $vars['classes_array'][] = 'list-view';
    }
  }
}

/**
 * overide theme_status_messages, in function check if yours, else call theme_status_messages or soemthing
 *
 * @param $theme_registry
 */
 function sbac_resource_theme_registry_alter(&$theme_registry) {
   if (isset($theme_registry['status_messages'])) {
     $theme_registry['status_messages']['function'] = 'sbac_resource_status_messages';
   }
 }

/**
 *
 *
 * @param $variables
 * @return string
 */
function sbac_resource_status_messages($variables) {
  $output = '';
  $structured_messages = array();
  $messages = drupal_get_messages('sbac_resource_error');
  if (isset($messages['sbac_resource_error'])) {
    foreach ($messages['sbac_resource_error'] as $message) {
      $elements = explode(':', $message);
      $section = $elements[0];
      $field = $elements[1];
      $error_type = $elements[2];
      $error_message = $elements[3];
      $structured_messages[$section][$error_type][$field] = $error_message;
    }
  }

  $final_messages = array();
  if ($structured_messages) {
    foreach ($structured_messages as $section => $field_errors) {
      if (count($field_errors['group']) > 1) { // Group is needed, create structure, extra Parent label
        foreach ($field_errors['group'] as $field => $error) {
          $final_messages[$section]['messages'][] = $error;
          $final_messages[$section]['group'] = TRUE;
        }
      }
      else {
        $single_message = array_shift($field_errors['single']);
        $final_messages[$section]['messages'][] = $single_message;
      }
    }

    if ($final_messages) {
      $output = sbac_resource_status_messages_output($variables, $final_messages);
    }
  }

  if (!$final_messages) {
    $output = sbac_status_messages($variables);
  }

  return $output;
}

/**
 * Takes the final array structure from sbac_resource_status_messages
 * and builds the desired output.
 *
 * @param $variables
 * @param $final_messages
 */
function sbac_resource_status_messages_output($variables, $final_messages) {
  $output = '';
  foreach ($final_messages as $section => $messages) {
    $header = $section;
    if (isset($messages['group'])) {
      $header = "Please correct the following to continue: ";
    }

    $output .= "<div class='sbac-resource-alert-box alert-box alert'>\n";
    if (isset($messages['group'])) {
      $output .= "<h2 class='sbac-resource-error-section'>" . ucwords($header) . "</h2>\n";
    }
    $output .= " <ul>\n";
    foreach ($messages['messages'] as $message) {
      $output .= '  <li>' . $message . "</li>\n";
    }
    $output .= " </ul>\n";
    $output .= "</div>\n";
  }
  return $output;
}

/**
 * Override drupal core messages with zurb foundation alert-box messages.
 * Customize the colors within the _settings.scss file
 *
 * http://foundation.zurb.com/docs/elements.php#panelEx
 */
function sbac_status_messages($variables) {
  $display = $variables['display'];
  $output = '';

  $status_heading = array(
    'error' => t('Error message'),
    'status' => t('Status message'),
    'warning' => t('Warning message'),
  );
  $status_mapping = array(
    'error' => 'alert',
    'success' => 'success',
    'warning' => 'secondary'
  );
  $error_messages = drupal_get_messages($display);
  foreach ($error_messages as $type => $messages) {
    if ($messages) {
      if (isset($status_mapping[$type])) {
        $output .= "<div class=\"alert-box $status_mapping[$type]\">\n";
      }
      else {
        $output .= "<div class=\"alert-box\">\n";
      }

      if (!empty($status_heading[$type])) {
        $output .= '<h2 class="element-invisible">' . $status_heading[$type] . "</h2>\n";
      }
      if (count($messages) > 1) {
        $output .= " <ul>\n";
        foreach ($messages as $message) {
          $output .= '  <li>' . $message . "</li>\n";
        }
        $output .= " </ul>\n";
      }
      else {
        if ($messages) {
          $output .= $messages[0];
        }
      }
      $output .= "</div>\n";
    }
  }
  return $output;
}

/**
 * Populates contextual filters with data if provided.
 *
 * @param $view
 *   The view object.
 *
 */
function _sbac_resource_apply_filters(&$view) {
  $view_filters = $view->display_handler->get_option('filters');

  // Current filter session - create the args where needed.
  if (isset($_SESSION['sbac-current-filters']) && $_SESSION['sbac-current-filters'] != '') {
    $current_filters = $_SESSION['sbac-current-filters'];
    $filters = explode('::', $current_filters);
    if ($filters) {
      foreach ($filters as $filter) {
        $filter_info = explode(':', $filter);
        if ($filter_info && sizeof($filter_info) == 2) {
          $vid = $filter_info[0];
          $tid = $filter_info[1];
          if ($vid && $tid) {
            $vocabulary = taxonomy_vocabulary_load($vid);
            $term = taxonomy_term_load($tid);
            if ($vocabulary && $term) {
              switch ($vocabulary->machine_name) {
                case 'attributes':
                  $view_filters['field_attributes_tid']['value'][] = $tid;
                  $view_filters['field_attributes_tid']['operator'] = 'and';
                  break;
                case 'focus':
                  $view_filters['field_focus_tid']['value'][] = $tid;
                  $view_filters['field_focus_tid']['operator'] = 'and';
                  break;
                case 'grades':
                  $view_filters['field_grades_tid']['value'][] = $tid;
                  $view_filters['field_grades_tid']['operator'] = 'and';
                  break;
                case 'intended_student_populations':
                  $view_filters['field_intended_student_tid']['value'][] = $tid;
                  $view_filters['field_intended_student_tid']['operator'] = 'and';
                  break;
                case 'digital_media_type':
                  $view_filters['field_digital_media_type_tid']['value'][] = $tid;
                  $view_filters['field_digital_media_type_tid']['operator'] = 'and';
                  break;
                case 'subject':
                  $view_filters['field_subject_tid']['value'][] = $tid;
                  $view_filters['field_subject_tid']['operator'] = 'and';
                  break;
                case 'geographical_settings':
                  $view_filters['field_geographical_settings_tid']['value'][] = $tid;
                  $view_filters['field_geographical_settings_tid']['operator'] = 'and';
                  break;
                case 'educational_use':
                  $view_filters['field_educational_use_tid']['value'][] = $tid;
                  $view_filters['field_educational_use_tid']['operator'] = 'and';
                  break;
                case 'intended_end_user':
                  $view_filters['field_intended_end_user_tid']['value'][] = $tid;
                  $view_filters['field_intended_end_user_tid']['operator'] = 'and';
                  break;
                case 'smarter_balanced_keyword':
                  $view_filters['field_smarter_balanced_keyword_tid']['value'][] = $tid;
                  $view_filters['field_smarter_balanced_keyword_tid']['operator'] = 'and';
                  break;
                case 'technologies_for_classroom_use':
                  $view_filters['field_classroom_technologies_tid']['value'][] = $tid;
                  $view_filters['field_classroom_technologies_tid']['operator'] = 'and';
                  break;
              }
            }
          }
        }
      }
    }
    $view->display_handler->set_option('filters', $view_filters);
  }
  // Not searching/filtering, so we default to the user's profile data for filtering
  else {
    global $user;

    if (in_array(FEEDBACK_REVIEWER_RID, array_keys($user->roles))) {
      $account = user_load($user->uid);

      $get_tid = function($element) {
        return $element['tid'];
      };

      foreach ($view_filters as &$field) {
        $field['group'] = 1;
      }

      $subject_tid_all = 153;
      $grade_tid_all = 122; 

      // subject
      if (!isset($view_filters['field_subject_tid']['value'])) {
        $view_filters['field_subject_tid']['value'] = array();
      }

      $view_filters['field_subject_tid']['operator'] = 'or';
      $view_filters['field_subject_tid']['group'] = 2;

      if ($subjects = field_get_items('user', $account, 'field_subject_s_')) {
        $subjects = array_map($get_tid, $subjects);

        // not subject specific - remove filters
        if (in_array($subject_tid_all, $subjects)) {
          unset($view_filters['field_subject_tid']);
        }
        else {
          $view_filters['field_subject_tid']['value'][] = $subject_tid_all;
          $view_filters['field_subject_tid']['value'] += $subjects;
        }
      }

      // grade
      if (!isset($view_filters['field_grades_tid']['value'])) {
        $view_filters['field_grades_tid']['value'] = array();
      }

      $view_filters['field_grades_tid']['operator'] = 'or';
      $view_filters['field_grades_tid']['group'] = 2;

      if ($grades = field_get_items('user', $account, 'field_grade_level_s_')) {
        $grades = array_map($get_tid, $grades);
        
        // not grade specific - remove filters
        if (in_array($grade_tid_all, $grades)) {
          unset($view_filters['field_grades_tid']);
        }
        else {
          $view_filters['field_grades_tid']['value'][] = $grade_tid_all;
          $view_filters['field_grades_tid']['value'] += $grades;
        }
      }
      
      $groups = array(
        'operator' => 'AND',
        'groups' => array(
          1 => 'AND',
        ),
      );

      if (isset($view_filters['field_subject_tid']) || isset($view_filters['field_grades_tid'])) {
        $groups['groups'][2] = 'OR';
      }
      
      $view->display_handler->set_option('filter_groups', $groups);
      $view->display_handler->set_option('filters', $view_filters);
    }
  }
}

/**
 * Menu Callback.
 *
 * @return string
 */
function sbac_resource_digital_library_page() {
  $no_results = NULL;
  (isset($_SESSION['sbac-search-keywords']) ? $search_string = $_SESSION['sbac-search-keywords'] : $search_string = '');
  (isset($_SESSION['sbac-current-filters']) ? $current_filters = $_SESSION['sbac-current-filters'] : $current_filters = '');
  $display = sbac_resource_determine_grid_or_list();
  // Add appropriate JS.
  drupal_add_js(drupal_get_path('module', 'sbac_search') . '/js/sbac_search.categories.js');

  // Load up the view.
  $view = views_get_view('resources');
  $view->set_display($display);
  _sbac_resource_apply_filters($view);
  $view->pre_execute();
  $view->execute();
  $view->_post_execute();
  $resource_layout_view = $view->preview();
  $_SESSION['sbac_search_count'] = $view->total_rows;
  // dpq($view->build_info['query']);

  // if there is 0 rows.
  $count = count($view->result);
  if (!$count && ($search_string != '' || $current_filters != '')) {
    // Get all results
    $resource_layout_view = views_embed_view('all_resources', $display);

    // Reset variables
    $_SESSION['sbac-current-filters'] = '';
    $_SESSION['sbac-search-keywords'] = '';
    $_COOKIE['sbac_search_categories_closed'] = TRUE;

    // Set error message
    if ($search_string && strlen($search_string) < 3) {
      drupal_get_messages();
      $no_results = '<h3>You must enter 3 characters or more.</h3>';
      $no_results .= '<p>Please try a different search term or browse any of the resources below that ';
      $no_results .= 'have been identified for you using the subject(s) and grade(s) in your profile.</p>';
    }
    else if ($search_string) {
      $no_results = '<h3>Your search for "' . $search_string . '" returned no results.</h3>';
      $no_results .= '<p>Please try a different search term or browse any of the resources below that ';
      $no_results .= 'have been identified for you using the subject(s) and grade(s) in your profile.</p>';
    }
    else {
      $no_results = '<h3>Your search returned no results.</h3>';
      $no_results .= '<p>Please try a different search term or browse any of the resources below that ';
      $no_results .= 'have been identified for you using the subject(s) and grade(s) in your profile.</p>';
    }
  }

  $view->destroy();
  menu_set_active_item('digital-library-resources');
  return theme('digital_library', array('resource_layout_view' => $resource_layout_view, 'no_results' => $no_results));
}

/**
 * Alter the query after it's prepared and cached.
 *
 * Any module performing a search should call
 * drupal_alter('apachesolr_query', $query). That function then invokes this
 * hook. It allows modules to modify the query object and its parameters.
 *
 * A module implementing HOOK_apachesolr_query_alter() may set
 * $query->abort_search to TRUE to flag the query to be aborted.
 *
 * @param DrupalSolrQueryInterface $query
 *   An object implementing DrupalSolrQueryInterface. No need for &.
 */
function sbac_resource_apachesolr_query_alter(DrupalSolrQueryInterface $query) {
  // I only want to see articles by the admin.
  //
  // NOTE: this "is_uid" filter does NOT refer to the English word "is"
  // It is a combination of flags representing Integer-Single, which is
  // abbreviated with the letters i and s.
  //
  // @see the <dynamicField> definitions in schema.xml or schema-solr3.xml
  $var = '';
}

/**
 * Implements hook_cron().
 *
 * Cleanup routine for temporary nodes that may have been abandoned during Resource creation.
 * ie. Resource CT creates a node
 */
function sbac_resource_cron() {
// @TODO Meet criteria to delete nodes that are just hanging in creation state after a certain amount of time.
//  $secsback = 60 * 60 * 2; // 2h
//  $sql = "SELECT n.nid AS nid FROM {node} n JOIN {field_data_field_temp} t ON n.nid = t.entity_id ";
//  $sql .= "WHERE n.type = :resource AND t.field_temp_value = :temp AND (UNIX_TIMESTAMP() - n.created) > :secsback";
//  $result = db_query($sql, array(':resource' => 'resource', ':temp' => 1, ':secsback' => $secsback));
//  foreach ($result as $record) {
//    node_delete($record->nid);
//  }
}



/**
 * Implements hook_node_load().
 *
 * @param $nodes
 * @param $types
 */
function sbac_resource_node_load($nodes, $types) {
  //make sure we are only viewing through the content/* path
  global $user;
  foreach ($nodes as $node) {
    //make sure we are looking at a node along the node path and it is published before we start to count views
    if (match_uri('node/[0-9]+') && $node->type == 'resource' && $node->status == '1') {
      //update the raw data table
      $query = "insert into node_user_paradata (
						uid,
						nid,
						hits)
					values (
						" . $user->uid . ",
						" . $node->nid . ",
						1)
					on duplicate key
						update hits = hits + 1";
      $result = db_query($query);
      //send the denormed data to the node
      $query = "select sum(hits) as hits, count(distinct(uid)) as unique_hits from node_user_paradata where nid=" . $node->nid;
      $result = db_query($query);
      $thisrow = $result->fetchAssoc();
      $node->field_total_views[LANGUAGE_NONE] = array(0 => array('value' => $thisrow['hits']));
      $node->field_unique_views[LANGUAGE_NONE] = array(0 => array('value' => $thisrow['unique_hits']));
      entity_save_field(array('field_total_views', 'field_unique_views'), $node, 'node', $node->nid);
    }

    // Load all media entities and attach them to the resource.
    if ($node->type == 'resource') {
      $media_items = sbac_media_load_items($node->nid);
      $node->document = $media_items;
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * @param $node
 */
function sbac_resource_node_presave($node) {
  if (isset($node->nid) && $node->nid) {
    if (isset($node->document)) {
      foreach ($node->document as $key => $media) {
        if ($media->fid != NULL) {
          $file = file_load($media->fid);
          //this file still exists on Drupal so we have to load it...{
          if ($file !== FALSE) {
            sbac_resource_create_file_from_cmis($node, $file, $media); // Create new doc
            //file_delete($file); //delete the file from drupal
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 *
 * @param $node
 */
function sbac_resource_node_delete($node) {
  if (isset($node->document)) {
    foreach ($node->document as $key => $media) {
      if ($media->document_id) {
        sbac_resource_delete_file_from_cmis($node, $media);
      }
    }
  }

  //now remove the folder from alfresco
  sbac_resource_delete_folder_from_cmis($node);
}

/**
 * Adds the file to Alfresco.
 *
 * @param $node, $i = file index
 */
 function sbac_resource_create_file_from_cmis(&$node, $file, $media) {
  module_load_include('api.inc', 'cmis');
  $folder_path = '/Assets/' . floor($node->nid/32000) . "/" . $node->nid;
  try {
	  $repository = cmis_get_repository();
	  //test to see of the folder is there
	  $root_folder=cmisapi_getObjectByPath($repository->repositoryId, '/Assets');
	  try {
		  $folder = cmisapi_getObjectByPath($repository->repositoryId, '/Assets/' . floor($node->nid/32000) . "/" . $node->nid);
	  }
	  catch (CMISException $e) {
	  //do nothing
	  }

    if (!is_object($folder)) { //no resource folder
      //is the parent folder there?
      try {
        $parent_folder = cmisapi_getObjectByPath($repository->repositoryId, '/Assets/' . floor($node->nid/32000));
      }
      catch (CMISException $e) {
        //cmis_error_handler('sbac_documents_presave_document', $e);
      }

      //ok, the parent folder is there, now try to create the child folder
      if (is_object($parent_folder)) {
        try {
          $folder=cmisapi_createFolder($repository->repositoryId, $parent_folder->id, $node->nid);
        }
        catch (CMISException $e) {
          //cmis_error_handler('sbac_documents_presave_document', $e);
        }
      }
      else {
        try {
          //neither folder is there, so we have to create both the parent and the child (resource node) folders
          $parent_folder=cmisapi_createFolder($repository->repositoryId, $root_folder->id, floor($node->nid/32000));
          $folder=cmisapi_createFolder($repository->repositoryId, $parent_folder->id, $node->nid);
        }
        catch (CMISException $e) {
          //cmis_error_handler('sbac_documents_presave_document', $e);
        }
      }
    }

    // Set the folder object to the /Assets/$cardinal/$node->nid
    $folder = cmisapi_getObjectByPath($repository->repositoryId, '/Assets/' . floor($node->nid/32000) . "/" . $node->nid);
    $document = cmisapi_createDocument($repository->repositoryId, $folder->id, $file->filename, array(), file_get_contents($file->uri), $file->filemime);

    // Save the new document id.
    $media->document_id = $document->id;
    entity_save('media', $media);

    //update the doc with the drupalId
    $alfresco=variable_get('cmis_repositories');
    $ch = curl_init();
    // Set the url, number of POST vars, POST data and login details
    curl_setopt($ch,CURLOPT_URL, $alfresco['default']['update_url']);
    curl_setopt($ch,CURLOPT_POST, 1);
    curl_setopt($ch,CURLOPT_POSTFIELDS, 'data=' . json_encode(array('nodeRef'=>$document->id, 'drupalId'=>$node->nid)));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch,CURLOPT_USERPWD,$alfresco['default']['user']. ":" . $alfresco['default']['password']);
    $result = curl_exec ($ch);
    curl_close ($ch);
  }
  catch (CMISException $e) {
    // cmis_error_handler('sbac_documents_presave_document', $e);
  }
}


/**
 * Deletes the file from Alfresco.
 *
 * @param $node, $i = file index
 */
function sbac_resource_delete_file_from_cmis(&$node, &$media) {
  module_load_include('api.inc', 'cmis');
  try {
    $repository = cmis_get_repository();
    $cmis_object_properties = cmisapi_getProperties($repository->repositoryId, $media->document_id);
    cmisapi_deleteObject($repository->repositoryId, $cmis_object_properties->id);
    entity_delete('media', $media->id);
    return TRUE;
  } 
  catch (CMISException $e) {
    // cmis_error_handler('sbac_documents_delete_document', $e);
    return FALSE;
  }
}

/**
 * Deletes the file from Alfresco.
 *
 * @param $node, $i = file index
 */
function sbac_resource_delete_folder_from_cmis(&$node) {
  module_load_include('api.inc', 'cmis');
  try {
    $repository = cmis_get_repository();
	  $folder = cmisapi_getObjectByPath($repository->repositoryId, '/Assets/' . floor($node->nid/32000) . "/" . $node->nid);
    //hack commented out until we separate the alfresco environments
	  //cmisapi_deleteObject($repository->repositoryId, $folder->id);
  } 
  catch (CMISException $e) {
    // cmis_error_handler('sbac_documents_delete_document', $e);
  }
}

/**
 * Allows modules to respond to state transitions.
 *
 * @param $node
 *  The node that is being transitioned.
 *
 * @param $previous_state
 *  The state of the revision before the transition occurred.
 *
 * @param $new_state
 *  The new state of the revision.
 */
function sbac_resource_workbench_moderation_transition($node, $previous_state, $new_state) {
  if ($node->type == 'resource') {
    // Necassary to override workbench email into publishing the node. Line 1602, function
    // workbench_moderation_node_data(), they query the DB directly to find out if there is a
    // published node. I bruce lee the publish status here.
    db_query('UPDATE {node} SET status = 1 WHERE nid = :nid', array(':nid' => $node->nid));
    db_query('UPDATE {node_revision} SET status = 1 WHERE nid = :nid AND vid = :vid', array(':nid' => $node->nid, ':vid' => $node->vid));
  }
}

/**
 * Implements hook_node_update();
 *
 * @param $node
 */
function sbac_resource_node_update($node) {
  if ($node->type == 'resource') {
    if (isset($node->workbench_moderation['published'])) {
      $node->workbench_moderation['published']->vid = $node->vid;
    }
  }
}

/**
 * Helper function for Resource form magic.
 * We need to create a node when a user enters a Resource CT form so
 * that we can tie Alignment reference back to the node it belongs to.
 *
 * @param $node
 */
function sbac_resource_create_node(&$form, &$form_state) {
  $form['#limit_validation_errors'] = array();
  $form_state['values'] = array();
  $form_state['values']['workbench_moderation_state_new'] = 'draft';
  $form_state['values']['workbench_moderation_state_current'] = 'creation';
  node_form_submit($form, $form_state);
  drupal_get_messages(NULL, TRUE);
}

/**
 * Implements of hook_page_alter().
 *
 * @param $page
 */
function sbac_resource_page_alter(&$page) {
  if (!isset($page['content']['system_main']['#form_id'])) {
  }
  else {
    if (isset($page['content']['system_main']['#form_id']) && $page['content']['system_main']['#form_id'] == 'resource_node_form') {
      $page['help']['system_help']['#markup'] = '';
    }
  }
}

/**
 * Text to display when "Has No License" option is selected on Licensing radio boxes
 * in Resource - Materials
 *
 * @return string
 */
function sbac_resource_licensing_form_has_no_license() {
  $output = '
              <ul>
                <li>Before continuing, you must obtain permission to use the resource in the Digital Library.</li>
                <li>Download, complete and submit the Copyright Clearance Form to resume your submittal.</li>
              </ul>
            ';

  return $output;
}

/**
 * Creates a grid or list button.
 *
 * @return string
 */
function sbac_resource_grid_list_button() {
  $path = 'digital-library-resources';
  if (isset($_SESSION['dlp-view-mode'])) {
    $display_mode = $_SESSION['dlp-view-mode'];
    if ($display_mode == 'grid_view') {
      $button = l('List View', $path . '/list', array(
        'absolute' => TRUE,
        'attributes' => array(
          'class' => array('sbac-list-layout')
        )
      ));
    }
    else {
      $button = l('Grid View', $path . '/grid', array(
        'absolute' => TRUE,
        'attributes' => array(
          'class' => array('sbac-grid-layout')
        )
      ));
    }
  }
  else {
    $button = l('List View', $path . '/list', array(
      'absolute' => TRUE,
      'attributes' => array(
        'class' => array('sbac-list-layout')
      )
    ));
    if (arg(1) != NULL && arg(1) == 'list') {
      $button = l('Grid View', $path . '/grid', array(
        'absolute' => TRUE,
        'attributes' => array(
          'class' => array('sbac-grid-layout')
        )
      ));
    }
  }

  return $button;
}

/**
 * Implements hook_block_info().
 *
 */
function sbac_resource_block_info() {
  $blocks['sbac_resource_results_count'] = array(
    'info' => t('Search Results Count'),
    'region' => 'sub-header',
    'pages' => 'digital-library-resources*',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -23,
    'status' => 1,
  );

  $blocks['sbac_resource_create_button'] = array(
    'info' => t('Create New Resource'),
    'region' => 'sub-header',
    'pages' => 'digital-library-resources*',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'weight' => -22,
    'status' => 1,
  );

  $blocks['sbac_resource_grid_list_button'] = array(
    'info' => t('Grid / List button'),
    'region' => 'search',
    'pages' => "digital-library-resources*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
    'status' => 1,
    'weight' => 0,
  );

  $blocks['sbac_resource_back_button'] = array(
    'info' => t('Back Button'),
    'region' => 'sub-header',
    'pages' => "content*\nterms-of-service",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'status' => 1,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function sbac_resource_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'sbac_resource_results_count':
      $count = 0;
      if (isset($_SESSION["sbac_search_count"])) {
        $count = $_SESSION["sbac_search_count"];
      }
      $block['subject'] = NULL;
      $block['content'] = '<h3 class="left">' . t('Resources (' . $count . ')') . '</h3>';
      break;

    case 'sbac_resource_create_button':
      $block['subject'] = NULL;
      global $user;
      $content = NULL;
      if (in_array('resource contributor', $user->roles)) {
        $content = l('Create New Resource', 'node/add/resource', array(
          'absolute' => TRUE,
          'attributes' => array('class' => array('small', 'button'))
        ));
      }
      $block['content'] = $content;
      break;

    case 'sbac_resource_grid_list_button':
      $block['subject'] = NULL;
      $block['content'] = sbac_resource_grid_list_button();
      break;

    case 'sbac_resource_back_button':
      $block['subject'] = NULL;
      $block['content'] = "<a href='/digital-library-resources' class='button'>Back</a>";
      break;
  }
  return $block;
}

/**
 * Implements hook_block_info_alter().
 *
 * @param $blocks
 * @param $theme
 * @param $code_blocks
 */
function sbac_resource_block_info_alter(&$blocks, $theme, $code_blocks) {
  $blocks['system']['navigation']['status'] = FALSE;
  $blocks['workbench']['block']['status'] = FALSE;
}

/**
 * Cleans the text and remove's any malicious text.
 *
 * @param $form_state
 */
function sbac_resource_clean_text(&$form_state) {
  foreach ($form_state['values'] as $field_name => $field) {
    if (is_array($field) && isset($field['und'][0]['value']) && $field['und'][0]['value'] != NULL) {
      $form_state['values'][$field_name]['und'][0]['value'] = filter_xss($field['und'][0]['value']);
    }
    if ($field_name == 'title' && $field != NULL) {
      $form_state['values']['title'] = filter_xss($field);
    }
  }
}

/**
 * Determines if the display is grid / list.
 *
 * @return string
 */
function sbac_resource_determine_grid_or_list() {
  if (isset($_SESSION['dlp-view-mode'])) {
    $display = $_SESSION['dlp-view-mode'];
    if (arg(1) == 'list') {
      $display = 'list_view';
    }
    else {
      if (arg(1) == 'grid') {
        $display = 'grid_view';
      }
    }
    $_SESSION['dlp-view-mode'] = $display;
  }
  else {
    // By default show grid layout with link to list layout
    $display = 'grid_view';
    if (arg(1) == 'list') {
      $display = 'list_view';
    }
    // Add session variable to persist for users session.
    $_SESSION['dlp-view-mode'] = $display;
  }
  return $display;
}

/**
 * Implements hook_apachesolr_ENTITY_TYPE_exclude();
 *
 * This is invoked for each entity from the type of ENTITY_TYPE that is being
 * inspected to be added to the index. if any module returns TRUE, 
 * the entity is skipped for indexing.
 *
 * @param string $entity_id
 * @param object $row
 *   A complete set of data from the indexing table.
 * @param string $env_id
 *   The machine name of the environment.
 * @return boolean
 */
function sbac_resource_apachesolr_node_exclude($entity_id, $row, $env_id) {
  // Never index a node if it has no title. Yes, this can happen...
  if ($row->entity_type == 'node' && $row->bundle == 'resource') {
    $node = node_load($row->entity_id);
    if ($node && $node->title == NULL) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Truncates Resources.
 *
 * @param $html
 * @param int $maxLength
 * @return string
 */
function sbac_resource_truncate($html, $maxLength=100){
    mb_internal_encoding("UTF-8");
    $printedLength = 0;
    $position = 0;
    $tags = array();
    $newContent = '';

    $html = $content = preg_replace("/<img[^>]+\>/i", "", $html);

    while ($printedLength < $maxLength && preg_match('{</?([a-z]+)[^>]*>|&#?[a-zA-Z0-9]+;}', $html, $match, PREG_OFFSET_CAPTURE, $position))
    {
        list($tag, $tagPosition) = $match[0];
        // Print text leading up to the tag.
        $str = mb_strcut($html, $position, $tagPosition - $position);
        if ($printedLength + mb_strlen($str) > $maxLength){
            $newstr = mb_strcut($str, 0, $maxLength - $printedLength);
            $newstr = preg_replace('~\s+\S+$~', '', $newstr);  
            $newContent .= $newstr;
            $printedLength = $maxLength;
            break;
        }
        $newContent .= $str;
        $printedLength += mb_strlen($str);
        if ($tag[0] == '&') {
            // Handle the entity.
            $newContent .= $tag;
            $printedLength++;
        } else {
            // Handle the tag.
            $tagName = $match[1][0];
            if ($tag[1] == '/') {
              // This is a closing tag.
              $openingTag = array_pop($tags);
              assert($openingTag == $tagName); // check that tags are properly nested.
              $newContent .= $tag;
            } else if ($tag[mb_strlen($tag) - 2] == '/'){
          // Self-closing tag.
            $newContent .= $tag;
        } else {
          // Opening tag.
          $newContent .= $tag;
          $tags[] = $tagName;
        }
      }

      // Continue after the tag.
      $position = $tagPosition + mb_strlen($tag);
    }

    // Print any remaining text.
    if ($printedLength < $maxLength && $position < mb_strlen($html))
      {
        $newstr = mb_strcut($html, $position, $maxLength - $printedLength);
        $newstr = preg_replace('~\s+\S+$~', '', $newstr);
        $newContent .= $newstr;
      }

    // Close any open tags.
    while (!empty($tags))
      {
        $newContent .= sprintf('</%s>', array_pop($tags));
      }

    return $newContent;
}