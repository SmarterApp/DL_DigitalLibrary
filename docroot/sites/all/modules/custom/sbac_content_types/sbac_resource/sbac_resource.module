<?php
/**
 * @file
 * Code for the SBAC resource feature.
 */

include_once 'sbac_resource.features.inc';
include_once 'sbac_resource.forms.inc';
include_once 'sbac_resource.theme.inc';

// Count.
define('SBAC_RESOURCE_MY_RESOURCES_COUNT', 'sbac-my-resources-count');
define('SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_COUNT', 'sbac-digital-library-resources-count');
define('SBAC_RESOURCE_RESOURCE_REVIEW', 'sbac-resoruce-review-count');

// View Mode.
define('SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE', 'sbac-dl-view-mode');
define('SBAC_RESOURCE_MY_RESOURCES_VIEW_MODE', 'sbac-mr-view-mode');
define('SBAC_RESOURCE_RESOURCE_REVIEW_VIEW_MODE', 'sbac-rr-view-mode');

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_resource_update_projects_alter(&$projects) {
  unset($projects['sbac_resource']);
}

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function sbac_resource_menu() {
  $items = array();

  $items['sbac_resource/%ctools_js/add-alignment'] = array(
    'page callback' => 'sbac_resource_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac_resource/%ctools_js/submit-resource'] = array(
    'page callback' => 'sbac_resource_submit_resource_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac_resource/%ctools_js/delete-resource'] = array(
    'page callback' => 'sbac_resource_delete_resource_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['sbac_resource/%ctools_js/save-all-changes'] = array(
    'page callback' => 'sbac_resource_save_all_changes_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'sbac_resource.forms.inc',
  );

  $items['digital-library-resources'] = array(
    'title' => 'Digital Library Resources',
    'page callback' => 'sbac_resource_digital_library_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => -50,
    'file' => 'sbac_resource.menu_callbacks.inc',
  );

  $items['my-resources'] = array(
    'title' => 'My Resources',
    'page callback' => 'sbac_resource_my_resources_page',
    'access callback' => 'sbac_resource_my_resources_access_callback',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => -48,
    'file' => 'sbac_resource.menu_callbacks.inc',
  );

  $items['resource-review'] = array(
    'title' => 'Resource Review',
    'page callback' => 'sbac_resource_resource_review_page',
    'access callback' => 'sbac_resource_resource_review_access_callback',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => -49,
    'file' => 'sbac_resource.menu_callbacks.inc',
  );

  $items['admin/structure/types/manage/%node_type/messages'] = array(
    'title' => 'Messages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sbac_resource_form_messages'),
    'access arguments' => array(4),
    'access callback' => array('sbac_resource_form_messages_access'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'file' => 'sbac_resource.admin.inc',
  );

  return $items;
}

/**
 * Access callback for my resources menu item.
 *
 * @return bool
 */
function sbac_resource_my_resources_access_callback() {
  global $user;
  if (in_array('resource contributor', $user->roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback for resource review menu item.
 *
 * @return bool
 */
function sbac_resource_resource_review_access_callback() {
  global $user;
  if (in_array('resource reviewer', $user->roles)) {
    return TRUE;
  }
  if (in_array('resource publisher', $user->roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Access callback for menu item.
 *
 * @param $node_type
 * @return bool
 */
function sbac_resource_form_messages_access($node_type) {
  if ($node_type->type == 'resource') {
    return user_access('administer site configuration');
  }
  return FALSE;
}

/**
 * Implementation of hook_preprocess_node()
 *
 * @param $vars
 */
function sbac_resource_preprocess_node(&$vars) {
  if ($vars['type'] == 'resource') {
    drupal_add_js(libraries_get_path('jwplayer') . '/jwplayer.js');
    drupal_add_js(drupal_get_path('module', 'sbac_resource') . '/js/sbac_resource.node.js');
    $vars['author'] = ''; $vars['license'] = ''; $vars['owner'] = '';
    if (isset($vars['field_author'][0]['safe_value'])) {
      $vars['author'] = $vars['field_author'][0]['safe_value'];
    }
    if (isset($vars['field_publisher']['und'][0]['safe_value'])) {
      $vars['owner'] = $vars['field_publisher']['und'][0]['safe_value'];
    }
    if (isset($vars['field_license'][0]['taxonomy_term']->name)) {
      $vars['license'] = $vars['field_license'][0]['taxonomy_term']->name;
    }
    // Edit link for DLRB member's.
    global $user;
    if (in_array('DLRB member', $user->roles)) {
      $url = url('node/' . $vars['nid'] . '/edit', array('absolute' => TRUE));
      $vars['edit_link'] = l('Edit', $url, array('attributes' => array('class' => array('medium', 'button'))));
    }
    // Documents
    if (isset($vars['document'][0])) {
      // Determine the file type, load up the correct video player, doc viewer or image viewer.
      $viewer = _sbac_resource_preview_content($vars);
      $materials = _sbac_resource_preview_materials($vars);
      if (isset($vars['document']) && sbac_media_downloadable_scheme($vars['document'])) {
        $vars['download'] = l('Download', 'sbac-media/download/' . $vars['nid'], array('attributes' => array('class' => 'button small right')));
      }
      $vars['viewer'] = $viewer['viewer'];
      $vars['viewer_filename'] = $viewer['viewer_filename'];
      $vars['materials'] = $materials;
    }
  }
}

/**
 * Creates the preview content.
 *
 * @param $vars
 * @return string
 */
function _sbac_resource_preview_content(&$vars) {
  $viewer = NULL;
  if ($vars['document'][0]) {
    $media = $vars['document'][0];
    $type = _sbac_resource_determine_type($media);
    $viewer['viewer_filename'] = $media->filename;

    if ($media->fid) {
      $file = file_load($media->fid);
      $url = file_create_url($file->uri);
    }
    else {
      $url = sbac_media_create_embed_url($media);
    }

    if ($type == 'document') {
      $google_url = 'http://docs.google.com/viewer';
      if (isset($_SERVER['HTTPS'])) {
        $google_url = 'https://docs.google.com/viewer';
      }
      $viewer['viewer'] = '<iframe src="' . $google_url . '?url=' . $url . '&embedded=true" width="850" height="400" style="border: none;"></iframe>';
    }
    else if ($type == 'video') {
      $jwplayer = 'jQuery(document).ready(function () {jwplayer("sbac-jwplayer").setup({ file: "' . $url . '", height: 400, width: 850});});';
      drupal_add_js($jwplayer, array('type' => 'inline', 'weight' => 999));
      $viewer['viewer'] = '<div id="sbac-jwplayer"></div>';
    }
    else if ($type == 'image') {
      $viewer['viewer'] = theme('image', array('path' => $url, 'width' => 850, 'height' => 400));
    }
    // replace with theming functions, preprocess theme functions haven't been implemented (except for schooltube), although templates have been
    else if ($type == 'schooltube') {
      $viewer['viewer'] = '<div class="flex-video"><iframe width="500" height="375" src="' . $url . '" frameborder="0" allowfullscreen="allowfullscreen" mozallowfullscreen="mozallowfullscreen" webkitallowfullscreen="webkitallowfullscreen"></iframe></div>';
    }
    else if ($type == 'teachertube') {
      $viewer['viewer'] = '<div class="flex-video"><iframe width="560" height="315" src="' . $url . '" frameborder="0" allowfullscreen/></iframe></div>';
    }
    else if ($type == 'slideshare') {
      $viewer['viewer'] = '<div class="flex-video"><iframe src="' . $url . '" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div>';
    }
    else if ($type == 'vimeo') {
      $viewer['viewer'] = '<div class="flex-video"><iframe src="' . $url . '" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe></div>';
    }
    else if ($type == 'youtube') {
      $url .= '?rel=0'; // Disable related videos.
      $viewer['viewer'] = '<div class="flex-video"><iframe width="560" height="315" src="' . $url . '" frameborder="0" allowfullscreen></iframe></div>';
    }      
    else {
      $url = drupal_get_path('module', 'sbac_resource') . '/images/no-preview.jpg';
      $viewer['viewer'] = theme('image', array('path' => $url));
    }
  }
  return $viewer;
}

/**
 * Creates the materials dropdown.
 *
 * @param $vars
 * @return array
 */
function _sbac_resource_preview_materials(&$vars) {
  $materials = '';
  $material_urls = array();

  if (isset($vars['document'][0])) {
    foreach ($vars['document'] as $key => $media) {
      $type = _sbac_resource_determine_type($media);
      if ($media->fid) {
        $file = file_load($media->fid);
        $url = file_create_url($file->uri);
      }
      else if ($type == 'none') {
        $url = drupal_get_path('module', 'sbac_resource') . '/images/no-preview.jpg';
      }
      else {
        $url = sbac_media_create_embed_url($media);
      }

      // check to see whether its public scheme or not, if so not external
      if ($media->fid) {
        $material_urls[] = l(ucwords($media->filename), $url, array('attributes' => array('sbac-type' => $type)));
      }
      else { // embedded media
        if (strpos($media->embed_url, 'youtube')) {
          $url .= '?rel=0';
        }
        $material_urls[] = l(ucwords($media->filename), $url, array('attributes' => array('sbac-type' => $type), 'absolute' => TRUE, 'external' => TRUE));
      }
    }
  }

  if ($material_urls) {
    $materials = '<a class="button small arrow sbac-materials-dropdown" data-dropdown="sbac-materials">'. t('View All Materials'). '<span></span></a>';
    $materials .= theme('item_list', array(
      'items' => $material_urls,
      'attributes' => array(
        'class' => 'materials-dropdown f-dropdown',
        'id' => 'sbac-materials'
      )
    ));
  }

  return $materials;
}

/**
 * Creates the resource media variables.
 *
 * @param $url
 * @param $file
 * @return string
 */
function _sbac_resource_determine_type($media, $return_embed = FALSE) {
  if (!$media->document_id && !$media->fid) {
    $type = _sbac_resource_determine_media($media, $return_embed);
  }
  else {
    $ext = pathinfo($media->filename, PATHINFO_EXTENSION);
    $type = _sbac_resource_determine_extension($ext);
  }
  return $type;
}

/**
 * Determine the media type based on URL.
 *
 * @param $file object
 * @return string
 */
function _sbac_resource_determine_media($media, $return_embed = FALSE) {
  $type = 'embed';
  if ($return_embed) {
    return $type;
  }
  $embedded_video_source = $media->embed_url;
  if (strpos($embedded_video_source, 'schooltube') !== FALSE) {
    $type = 'schooltube';
  }
  if (strpos($embedded_video_source, 'teachertube') !== FALSE) {
    $type = 'teachertube';
  }
  if (strpos($embedded_video_source, 'slideshare') !== FALSE) {
    $type = 'slideshare';
  }
  if (strpos($embedded_video_source, 'youtube') !== FALSE) {
    $type = 'youtube';
  }
  if (strpos($embedded_video_source, 'vimeo') !== FALSE) {
    $type = 'vimeo';
  }
  return $type;
}

/**
 * Determine the filename extension.
 *
 * @param $ext
 * @return string
 */
function _sbac_resource_determine_extension($ext) {
  $media = 'document';

  switch (strtolower($ext)) {
    case 'txt';
    case 'doc';
    case 'docx';
    case 'pdf';
    case 'xls';
    case 'xlsx';
    case 'pptx';
    case 'ppt';
    case 'odt';
    case 'odp';
    case 'ods';
      $media = 'document';
      break;
    case 'mp4';
    case 'mov';
    case 'mp3';
    case 'aac';
      $media = 'video';
      break;
    case 'png';
    case 'jpg';
    case 'jpeg';
      $media = 'image';
      break;
    case 'mpg';
    case 'avi';
      $media = 'none';
      break;
  }
  return $media;
}

/**
 * Determine the filename extension.
 *
 * @param $ext
 * @return string
 */
function _sbac_resource_determine_file_type_icon($ext) {
  $media = 'document';

  switch (strtolower($ext)) {
    case 'txt';
    case 'doc';
    case 'docx';
      $media = 'doc';
      break;
    case 'pdf';
      $media = 'pdf';
      break;
    case 'xls';
    case 'xlsx';
      $media = 'xls';
      break;
    case 'pptx';
    case 'ppt';
      $media = 'ppt';
      break;
    case 'mp4';
    case 'mpg';
    case 'mov';
    case 'avi';
    case 'mp3';
    case 'aac';
      $media = 'video';
      break;
    case 'png';
    case 'jpg';
    case 'jpeg';
      $media = 'image';
      break;
  }

  return $media;
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function sbac_resource_preprocess_page(&$vars) {
  if (isset($vars['node']->type) && $vars['node']->type == 'resource') {
    if (isset($vars['page']['#type']) && $vars['page']['#type'] == 'page') {
      unset($vars['tabs']);
    }
  }
}

/**
 * Implements hook_preprocess_html().
 *
 * Determine the page display and toss a class on the body.
 *
 * @param $vars
 */
function sbac_resource_preprocess_html(&$vars) {
  if (arg(0) == 'digital-library-resources' || arg(0) == 'my-resources' || arg(0) == 'resource-review') {
    $display = sbac_resource_determine_grid_or_list();
    if ($display == 'grid_view') {
      $vars['classes_array'][] = 'grid-view';
    }
    else {
      $vars['classes_array'][] = 'list-view';
    }
  }
}

/**
 * overide theme_status_messages, in function check if yours, else call theme_status_messages or soemthing
 *
 * @param $theme_registry
 */
 function sbac_resource_theme_registry_alter(&$theme_registry) {
   if (isset($theme_registry['status_messages'])) {
     $theme_registry['status_messages']['function'] = 'sbac_resource_status_messages';
   }
 }

/**
 *
 *
 * @param $variables
 * @return string
 */
function sbac_resource_status_messages($variables) {
  $output = '';
  $structured_messages = array();
  $messages = drupal_get_messages('sbac_resource_error');
  if (isset($messages['sbac_resource_error'])) {
    foreach ($messages['sbac_resource_error'] as $message) {
      $elements = explode(':', $message);
      $section = $elements[0];
      $field = $elements[1];
      $error_type = $elements[2];
      $error_message = $elements[3];
      if (isset($elements[4])) {
        $error_message .= ': ' . $elements[4];
      }
      $structured_messages[$section][$error_type][$field] = $error_message;
    }
  }

  $final_messages = array();
  if ($structured_messages) {
    foreach ($structured_messages as $section => $field_errors) {
      if (count($field_errors['group']) > 1) { // Group is needed, create structure, extra Parent label
        foreach ($field_errors['group'] as $field => $error) {
          $final_messages[$section]['messages'][] = $error;
          $final_messages[$section]['group'] = TRUE;
        }
      }
      else {
        $single_message = array_shift($field_errors['single']);
        $final_messages[$section]['messages'][] = $single_message;
      }
    }

    if ($final_messages) {
      $output = sbac_resource_status_messages_output($variables, $final_messages);
    }
  }

  if (!$final_messages) {
    $output = sbac_status_messages($variables);
  }

  return $output;
}

/**
 * Takes the final array structure from sbac_resource_status_messages
 * and builds the desired output.
 *
 * @param $variables
 * @param $final_messages
 */
function sbac_resource_status_messages_output($variables, $final_messages) {
  $output = '';
  foreach ($final_messages as $section => $messages) {
    $header = $section;
    if (isset($messages['group'])) {
      $header = "Please correct the following to continue: ";
    }

    $output .= "<div class='sbac-resource-alert-box alert-box alert'>\n";
    if (isset($messages['group'])) {
      $output .= "<h2 class='sbac-resource-error-section'>" . ucwords($header) . "</h2>\n";
    }
    $output .= " <ul>\n";
    foreach ($messages['messages'] as $message) {
      $output .= '  <li>' . $message . "</li>\n";
    }
    $output .= " </ul>\n";
    $output .= "</div>\n";
  }
  return $output;
}

/**
 * Override drupal core messages with zurb foundation alert-box messages.
 * Customize the colors within the _settings.scss file
 *
 * http://foundation.zurb.com/docs/elements.php#panelEx
 */
function sbac_status_messages($variables) {
  $display = $variables['display'];
  $output = '';

  $status_heading = array(
    'error' => t('Error message'),
    'status' => t('Status message'),
    'warning' => t('Warning message'),
  );
  $status_mapping = array(
    'error' => 'alert',
    'success' => 'success',
    'warning' => 'secondary'
  );
  $error_messages = drupal_get_messages($display);
  foreach ($error_messages as $type => $messages) {
    if ($messages) {
      if (isset($status_mapping[$type])) {
        $output .= "<div class=\"alert-box $status_mapping[$type]\">\n";
      }
      else {
        $output .= "<div class=\"alert-box\">\n";
      }

      if (!empty($status_heading[$type])) {
        $output .= '<h2 class="element-invisible">' . $status_heading[$type] . "</h2>\n";
      }
      if (count($messages) > 1) {
        $output .= " <ul>\n";
        foreach ($messages as $message) {
          $output .= '  <li>' . $message . "</li>\n";
        }
        $output .= " </ul>\n";
      }
      else {
        if ($messages) {
          $output .= $messages[0];
        }
      }
      $output .= "</div>\n";
    }
  }
  return $output;
}

/**
 * Implements hook_node_load().
 *
 * @param $nodes
 * @param $types
 */
function sbac_resource_node_load($nodes, $types) {
  //make sure we are only viewing through the content/* path
  global $user;
  foreach ($nodes as $node) {
    //make sure we are looking at a node along the node path and it is published before we start to count views
    if (match_uri('node/[0-9]+') && $node->type == 'resource' && $node->status == '1') {
      //update the raw data table
      $query = "insert into node_user_paradata (
						uid,
						nid,
						hits)
					values (
						" . $user->uid . ",
						" . $node->nid . ",
						1)
					on duplicate key
						update hits = hits + 1";
      $result = db_query($query);
      //send the denormed data to the node
      $query = "select sum(hits) as hits, count(distinct(uid)) as unique_hits from node_user_paradata where nid=" . $node->nid;
      $result = db_query($query);
      $thisrow = $result->fetchAssoc();
      $node->field_total_views[LANGUAGE_NONE] = array(0 => array('value' => $thisrow['hits']));
      $node->field_unique_views[LANGUAGE_NONE] = array(0 => array('value' => $thisrow['unique_hits']));
      entity_save_field(array('field_total_views', 'field_unique_views'), $node, 'node', $node->nid);
    }

    // Load all media entities and attach them to the resource.
    if ($node->type == 'resource') {
      $media_items = sbac_media_load_items($node->nid);
      $node->document = $media_items;
    }
  }
}

/**
 * Implements hook_node_delete().
 *
 * @param $node, $i = file index
 */
function sbac_resource_node_delete($node) {
  $i = 0;
  if (isset($node->field_file['und'])) {
    while ($i < count($node->field_file['und'])) {
  	  if (isset($node->field_document_id['und'][$i]['value']) && $node->field_document_id['und'][$i]['value']) {
  		  sbac_resource_delete_file_from_cmis($node->field_document_id['und'][$i]['value'], $i);
  		  unset($node->field_document_id['und'][$i]);
  	  }
      
  	  $i++;
    }
  }
}

/**
 * The state of the revision before the transition occurred.
 * @param $node, $i = file index
 */
function sbac_resource_delete_file_from_cmis($document_id, $i) 
{
  module_load_include('api.inc', 'cmis');
  try {
    $start = microtime_float();

    $repository = cmis_get_repository();
    $cmis_object_properties = cmisapi_getProperties($repository->repositoryId, $document_id);
    cmisapi_deleteObject($repository->repositoryId, $cmis_object_properties->id);

    $end = microtime_float();
    $difference = $end - $start;

    watchdog('sbac', 'did delete in: ' . $difference . ' seconds');
  } 
  catch (CMISException $e) {
    // cmis_error_handler('sbac_documents_delete_document', $e);
  }
}

/**
 * Implemenets hook_workbench_moderation_transition().
 *
 * @param $new_state
 *  The new state of the revision.
 */
function sbac_resource_workbench_moderation_transition($node, $previous_state, $new_state) {
  if ($node->type == 'resource' && $new_state != 'removed') {
    // Necassary to override workbench moderation into publishing the node. Line 1602, function
    // workbench_moderation_node_data(), they query the DB directly to find out if there is a
    // published node. I bruce lee the publish status here.
    db_query('UPDATE {node} SET status = 1 WHERE nid = :nid', array(':nid' => $node->nid));
    db_query('UPDATE {node_revision} SET status = 1 WHERE nid = :nid AND vid = :vid', array(':nid' => $node->nid, ':vid' => $node->vid));
  }
  else if ($node->type == 'resource' && $new_state == 'removed') {
    $node->status = 0;
  }
}

/**
 * Implements hook_node_access_records().
 *
 * @param $node
 */
function sbac_resource_node_access_records($node) {
  if ($node->type == 'resource') {
    global $user;
    if (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'being_reviewed') {
      $uids = array();
      $role = user_role_load_by_name('resource reviewer');
      $query = "SELECT DISTINCT(ur.uid) FROM {users_roles} AS ur WHERE ur.rid = :rid";
      $result = db_query($query, array(':rid' => $role->rid));
      foreach ($result as $row) {
        $uids[] = $row->uid;
      }
      $accounts = user_load_multiple($uids);
      if ($accounts) {
        $grants = array(); $not_allowed_to_view = array();
        foreach ($accounts as $account) {
          // Do not show nodes to resource reviewer when the node is in the process of the gate keeper review.
          // So, if this user has a gate keeping review in process, give him access, revoke everyone else.
          $gate_keeper = _sbac_resource_determine_feedback($node->nid, 'gate_keeper', $account->uid, 1, 0, 1, 'set', FALSE);
          if ($gate_keeper) {
            $grants[] = array(
              'realm' => 'gk_review_in_progress',
              'gid' => $account->uid,
              'grant_view' => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 0,
            );
          }

          // Do not show nodes to the resource reviewers when the node has been reviewed by this person and is complete.
          $feedback = _sbac_resource_determine_feedback($node->nid, 'qc', $account->uid, 1, 1, FALSE, 'single');
          if ($feedback) {
            $not_allowed_to_view[] = $account->uid;
            $grants[] = array(
              'realm' => 'self_reviewed',
              'gid' => $account->uid,
              'grant_view' => 0,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 0,
            );
          }
        }

        // Do not show nodes to resource reviewers when the node is being reviewed by 3 people.
        $feedback = _sbac_resource_determine_feedback($node->nid, 'qc', FALSE, 1, FALSE, 1, 'set');
        if (count($feedback) == 3) {
          foreach ($feedback as $review) {
            if (!in_array($review->uid, $not_allowed_to_view)) {
              $grants[] = array(
                'realm' => 'reviewed_by_three',
                'gid' => $review->uid,
                'grant_view' => 1,
                'grant_update' => 0,
                'grant_delete' => 0,
                'priority' => 0,
              );
            }
          }
        }

        // if author of node and state is not equal to x, y, z... always give access.
        // This is so the resource contributor can view his own nodes.

        return $grants;
      }
    }

    if (isset($node->workbench_moderation['current']->state) && $node->workbench_moderation['current']->state == 'approved') {
      $uids = array();
      $role = user_role_load_by_name('resource publisher');
      $query = "SELECT DISTINCT(ur.uid) FROM {users_roles} AS ur WHERE ur.rid = :rid";
      $result = db_query($query, array(':rid' => $role->rid));
      foreach ($result as $row) {
        $uids[] = $row->uid;
      }
      $accounts = user_load_multiple($uids);
      if ($accounts) {
        $grants = array();
        foreach ($accounts as $account) {
          // Do not show nodes to the resource publishers when the node has been reviewed by another resource publisher
          $feedback = _sbac_resource_determine_feedback($node->nid, 'post', $account->uid, 1, 0, 1, 'set', TRUE);
          if ($feedback) {
            $grants[] = array(
              'realm' => 'reviewed_already',
              'gid' => $account->uid,
              'grant_view' => 0,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 0,
            );
          }
        }
        return $grants;
      }
    }
  }
}

/**
 * Implements hook_node_grants().
 *
 * @param $account
 * @param $op
 */
function sbac_resource_node_grants($account, $op) {
  if (in_array('resource reviewer', $account->roles)) {
    $grants['gk_review_in_progress'] = array($account->uid);
    $grants['reviewed_by_three'] = array($account->uid);
    $grants['self_reviewed'] = array($account->uid);
  }

  if (in_array('resource publisher', $account->roles)) {
    $grants['reviewed_already'] = array($account->uid);
  }
  return $grants;
}

function sbac_resource_node_grants_alter(&$grants, $account, $op) {
  $var = '';
}

/**
 * Implements hook_node_update();
 *
 * @param $node
 */
function sbac_resource_node_update($node) {
  if ($node->type == 'resource') {
    if (isset($node->workbench_moderation['published'])) {
      $node->workbench_moderation['published']->vid = $node->vid;
    }
  }
}

/**
 * Implements of hook_page_alter().
 *
 * @param $page
 */
function sbac_resource_page_alter(&$page) {
  if (!isset($page['content']['system_main']['#form_id'])) {
  }
  else {
    if (isset($page['content']['system_main']['#form_id']) && $page['content']['system_main']['#form_id'] == 'resource_node_form') {
      $page['help']['system_help']['#markup'] = '';
    }
  }
}

/**
 * Text to display when "Has No License" option is selected on Licensing radio boxes
 * in Resource - Materials
 *
 * @return string
 */
function sbac_resource_licensing_form_has_no_license() {
  $output = '
              <ul>
                <li>Before continuing, you must obtain permission to use the resource in the Digital Library.</li>
                <li>Download, complete and submit the Copyright Clearance Form to resume your submittal.</li>
              </ul>
            ';

  return $output;
}

/**
 * Creates a grid or list button.
 *
 * @return string
 */
function sbac_resource_grid_list_button() {
  switch (arg(0)) {
    case 'my-resources':
      $name = SBAC_RESOURCE_MY_RESOURCES_VIEW_MODE;
      break;
    case 'digital-library-resources':
      $name = SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE;
      break;
    case 'resource-review':
      $name = SBAC_RESOURCE_RESOURCE_REVIEW_VIEW_MODE;
      break;
    default:
      $name = SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE;
      break;
  }
  $path = arg(0);
  if (isset($_SESSION[$name])) {
    $display_mode = $_SESSION[$name];
    if ($display_mode == 'grid_view') {
      $button = l('List View', $path . '/list', array(
        'absolute' => TRUE,
        'attributes' => array(
          'class' => array('sbac-list-layout')
        )
      ));
    }
    else {
      $button = l('Grid View', $path . '/grid', array(
        'absolute' => TRUE,
        'attributes' => array(
          'class' => array('sbac-grid-layout')
        )
      ));
    }
  }
  else {
    $button = l('List View', $path . '/list', array(
      'absolute' => TRUE,
      'attributes' => array(
        'class' => array('sbac-list-layout')
      )
    ));
    if (arg(1) != NULL && arg(1) == 'list') {
      $button = l('Grid View', $path . '/grid', array(
        'absolute' => TRUE,
        'attributes' => array(
          'class' => array('sbac-grid-layout')
        )
      ));
    }
  }

  return $button;
}

/**
 * Implements hook_block_info().
 *
 */
function sbac_resource_block_info() {
  $blocks['sbac_resource_results_count'] = array(
    'info' => t('Search Results Count'),
    'region' => 'sub-header',
    'pages' => "digital-library-resources*\nmy-resources*\nresource-review*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -23,
    'status' => 1,
  );

  $blocks['sbac_resource_create_button'] = array(
    'info' => t('Create New Resource'),
    'region' => 'sub-header',
    'pages' => "my-resources*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'weight' => -22,
    'status' => 1,
  );

  $blocks['sbac_resource_grid_list_button'] = array(
    'info' => t('Grid / List button'),
    'region' => 'search',
    'pages' => "digital-library-resources*\nmy-resources*\nresource-review*",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
    'status' => 1,
    'weight' => 0,
  );

  $blocks['sbac_resource_back_button'] = array(
    'info' => t('Back Button'),
    'region' => 'sub-header',
    'pages' => "content*\nterms-of-service",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'status' => 1,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function sbac_resource_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'sbac_resource_results_count':
      switch (arg(0)) {
        case 'my-resources':
          $name = SBAC_SEARCH_MY_RESOURCES_COUNT;
          break;
        case 'digital-library-resources':
          $name = SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_COUNT;
          break;
        case 'resource-review':
          $name = SBAC_SEARCH_RESOURCE_REVIEW_COUNT;
          break;
        default:
          $name = SBAC_SEARCH_DIGITAL_LIBRARY_RESOURCES_COUNT;
          break;
      }

      $count = 0;
      if (isset($_SESSION[$name])) {
        $count = $_SESSION[$name];
      }
      $block['subject'] = NULL;
      $block['content'] = '<h3 class="left">' . t('Resources (' . $count . ')') . '</h3>';
      break;

    case 'sbac_resource_create_button':
      $block['subject'] = NULL;
      global $user;
      $content = NULL;
      if (in_array('resource contributor', $user->roles)) {
        $content = l('Create New Resource', 'node/add/resource', array(
          'absolute' => TRUE,
          'attributes' => array('class' => array('small', 'button')),
          'query' => array('destination' => arg(0)),
        ));
      }
      $block['content'] = $content;
      break;

    case 'sbac_resource_grid_list_button':
      $block['subject'] = NULL;
      $block['content'] = sbac_resource_grid_list_button();
      break;

    case 'sbac_resource_back_button':
      $block['subject'] = NULL;
      $previous_url = $_SERVER['HTTP_REFERER'];
      global $base_url;
      if (strpos($previous_url, $base_url) !== FALSE) {
        $previous_url = str_replace($base_url, '', $previous_url);
      }
      $block['content'] = '<a onclick="window.history.back(); return false;" href="' . $previous_url . '" class="button">Back</a>';
      break;
  }
  return $block;
}

/**
 * Implements hook_block_info_alter().
 *
 * @param $blocks
 * @param $theme
 * @param $code_blocks
 */
function sbac_resource_block_info_alter(&$blocks, $theme, $code_blocks) {
  $blocks['system']['navigation']['status'] = FALSE;
  $blocks['workbench']['block']['status'] = FALSE;

  if (isset($blocks['sbac_resource']['sbac_resource_results_count']) && $theme == 'SBAC') {
    $blocks['sbac_resource']['sbac_resource_results_count']['pages'] = "digital-library-resources*\nmy-resources*\nresource-review*";
  }
  if (isset($blocks['sbac_resource']['sbac_resource_create_button']) && $theme == 'SBAC') {
    $blocks['sbac_resource']['sbac_resource_create_button']['pages'] = "my-resources*";
  }
  if (isset($blocks['sbac_resource']['sbac_resource_grid_list_button']) && $theme == 'SBAC') {
    $blocks['sbac_resource']['sbac_resource_grid_list_button']['pages'] = "digital-library-resources*\nmy-resources*\nresource-review*";
  }
}

/**
 * Cleans the text and remove's any malicious text.
 *
 * @param $form_state
 */
function sbac_resource_clean_text(&$form_state) {
  foreach ($form_state['values'] as $field_name => $field) {
    if (is_array($field) && isset($field['und'][0]['value']) && $field['und'][0]['value'] != NULL) {
      $form_state['values'][$field_name]['und'][0]['value'] = filter_xss($field['und'][0]['value']);
    }
    if ($field_name == 'title' && $field != NULL) {
      $form_state['values']['title'] = filter_xss($field);
    }
  }
}

/**
 * Determines if the display is grid / list.
 *
 * @param string $page can be 'dl', 'mr' or 'rr' (for each page).
 * @return string
 */
function sbac_resource_determine_grid_or_list() {
  switch (arg(0)) {
    case 'my-resources':
      $name = SBAC_RESOURCE_MY_RESOURCES_VIEW_MODE;
      break;
    case 'digital-library-resources':
      $name = SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE;
      break;
    case 'resource-review':
      $name = SBAC_RESOURCE_RESOURCE_REVIEW_VIEW_MODE;
      break;
    default:
      $name = SBAC_RESOURCE_DIGITAL_LIBRARY_RESOURCES_VIEW_MODE;
      break;
  }

  if (isset($_SESSION[$name])) {
    $display = $_SESSION[$name];
    if (arg(1) == 'list') {
      $display = 'list_view';
    }
    else {
      if (arg(1) == 'grid') {
        $display = 'grid_view';
      }
    }
    $_SESSION[$name] = $display;
  }
  else {
    // By default show grid layout with link to list layout
    $display = 'grid_view';
    if (arg(1) == 'list') {
      $display = 'list_view';
    }
    // Add session variable to persist for users session.
    $_SESSION[$name] = $display;
  }
  return $display;
}

/**
 * Truncates Resources.
 *
 * @param $html
 * @param int $maxLength
 * @return string
 */
function sbac_resource_truncate($html, $maxLength = 100) {
  mb_internal_encoding("UTF-8");
  $printedLength = 0;
  $position = 0;
  $tags = array();
  $newContent = '';

  $html = $content = preg_replace("/<img[^>]+\>/i", "", $html);

  while ($printedLength < $maxLength && preg_match('{</?([a-z]+)[^>]*>|&#?[a-zA-Z0-9]+;}', $html, $match, PREG_OFFSET_CAPTURE, $position)) {
    list($tag, $tagPosition) = $match[0];
    // Print text leading up to the tag.
    $str = mb_strcut($html, $position, $tagPosition - $position);
    if ($printedLength + mb_strlen($str) > $maxLength) {
      $newstr = mb_strcut($str, 0, $maxLength - $printedLength);
      $newstr = preg_replace('~\s+\S+$~', '', $newstr);
      $newContent .= $newstr;
      $printedLength = $maxLength;
      break;
    }
    $newContent .= $str;
    $printedLength += mb_strlen($str);
    if ($tag[0] == '&') {
      // Handle the entity.
      $newContent .= $tag;
      $printedLength++;
    }
    else {
      // Handle the tag.
      $tagName = $match[1][0];
      if ($tag[1] == '/') {
        // This is a closing tag.
        $openingTag = array_pop($tags);
        assert($openingTag == $tagName); // check that tags are properly nested.
        $newContent .= $tag;
      }
      else {
        if ($tag[mb_strlen($tag) - 2] == '/') {
          // Self-closing tag.
          $newContent .= $tag;
        }
        else {
          // Opening tag.
          $newContent .= $tag;
          $tags[] = $tagName;
        }
      }
    }

    // Continue after the tag.
    $position = $tagPosition + mb_strlen($tag);
  }

  // Print any remaining text.
  if ($printedLength < $maxLength && $position < mb_strlen($html)) {
    $newstr = mb_strcut($html, $position, $maxLength - $printedLength);
    $newstr = preg_replace('~\s+\S+$~', '', $newstr);
    $newContent .= $newstr;
  }

  // Close any open tags.
  while (!empty($tags)) {
    $newContent .= sprintf('</%s>', array_pop($tags));
  }

  return $newContent;
}