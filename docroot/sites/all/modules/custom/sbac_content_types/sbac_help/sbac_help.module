<?php
/**
 * @file
 * Code for the SBAC Help feature.
 */
include_once 'sbac_help.features.inc';

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_help_update_projects_alter(&$projects) {
  unset($projects['sbac_help']);
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function sbac_help_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['views_view__help_topics__block'] = array(
    'template' => 'templates/views-view--help-topics--block',
    'arguments' => array('view' => NULL),
    'original hook' => 'views_view',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
      'sbac_help_preprocess_views_view__help_topics__block',
    ),
  );

  $themes['help_dropdown'] = array(
    'path' => drupal_get_path('module', 'sbac_help') . '/templates',
    'template' => 'help-drop-down',
  );

  return $themes;
}

/*
 * Implements hook_menu().
 */
function sbac_help_menu() {
  $items['get-node-content'] = array(
    'title'         => 'Get Node Content',
    'page callback' => 'sbac_help_get_node_content',
    'access arguments'  => array('access content'),
    'type'          => MENU_CALLBACK,
  );

  $items['welcome-tutorial/remove/%'] = array(
    'title' => 'Welcome Tutorial Remove',
    'page callback' => 'sbac_help_remove',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('send approval emails'),
  );

  return $items;
}

/**
 * Preprocessor for the help_topics__block view.
 *
 * @param $vars
 */
function sbac_help_preprocess_views_view__help_topics__block(&$vars){
	drupal_add_css(drupal_get_path('module','sbac_help') . '/css/help.css');
}

/**
 * Unless disabled or first time user, trigger helper modal overlay
 */
function sbac_help_init() {
  drupal_add_js(drupal_get_path('module','sbac_help') . '/js/help.js');

  global $user;
  // added check to make sure not on path change-password
  if (isset($_COOKIE['Drupal_visitor_sbac_just_logged_in']) && arg(0) != 'change-password') {
    if (!isset($user->data['disable_help']) || (isset($user->data['disable_help']) && $user->data['disable_help'] == 0)) {
      drupal_add_js("jQuery(document).ready(function () { jQuery('.help-modal').colorbox({open:true, inline:true, href: '#helpmodal', width:'80%', height:'600px', onComplete: initSlider}); });", array('type' => 'inline'));
    }
    // remove cookie moved to sbac_help_disable_help function to ensure its removed only when welcome modal is displayed
  }
}

/*
 * Form to enable/disable helper modal
 */
function sbac_help_disable_help() {
  global $user;
  $form = array();

  $form['disable_help'] = array (
    '#type'           => 'checkbox',
    '#title'          => t('Do not show this screen after next Log in') . '<br /><i>' . t('View this screen again by selecting Welcome Tutorial from Help on top menu') . '</i>',
  );

  $form['submit'] = array (
    '#type'           => 'submit',
    '#value'          => 'Close Welcome Tutorial',
  );

  if (!isset($user->data['disable_help'])) {
    $form['disable_help']['#default_value'] = 0;
  }
  else {
    $form['disable_help']['#default_value'] = $user->data['disable_help'];
  }
  // remove cookie only when welcome modal is displayed
  user_cookie_delete('sbac_just_logged_in');
  return $form;
}

/**
 * Submit handler for form submit.
 *
 * @param $form
 * @param $form_state
 */
function sbac_help_disable_help_submit($form, &$form_state) {
  global $user;

  user_save($user, array(
    'data' => array(
      'disable_help' => (int) $form_state['values']['disable_help'],
    )
  ));

  // $url = $form_state['redirect'] = 'digital-library-resources';
  // drupal_goto($url);
}

/**
 * Implements hook_preprocess_page().
 *
 * @param $variables
 */
function sbac_help_preprocess_page(&$variables) {
  global $user;
  $variables['help_dropdown'] = NULL;
  if ($user->uid) {
    $variables['help_dropdown'] = theme('help_dropdown');
  }
}

/**
 * Function callback for get-node-content
 *
 * @param $nid
 */
function sbac_help_get_node_content() {
  $nid = $_GET['nid'];
  if ($nid) {
    $node = node_load($nid, $vid = NULL, $reset = FALSE);
    if ($node) {
      $node_view = node_view($node, $view_mode = 'full', $langcode = NULL);
      $data = array(
        'results' => array(
          'body' => drupal_render($node_view['body']),
          'title' => $node->title
        )
      );
      return drupal_json_output($data);
    }
  }
  exit();
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sbac_help_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'help_page_node_form') {
    unset($form['field_help_permissions']);
    $form['actions']['submit']['#submit'][] = 'sbac_help_remove_previous_resource_tutorial';
  }
}

/**
 * Remove the previously set resource tutorial help page
 *
 * @param $form
 * @param $form_state
 */
function sbac_help_remove_previous_resource_tutorial(&$form, &$form_state) {
  foreach ($form['field_help_page_topic']['und']['#options'] as $key => $value) {
    if ($value == 'Resource Tutorial') {
      $val = $key;
    }
  }
  // Check if Resource Tutorial checkbox is checked
  $nid = $form_state['values']['nid'];
  if (isset($val) && $form_state['input']['field_help_page_topic']['und'][$val]) {
    db_query('DELETE FROM {field_data_field_help_page_topic} WHERE field_help_page_topic_tid = :val AND entity_id <> :nid', array(':val' => $val, ':nid' => $nid));
    db_query('DELETE FROM {field_revision_field_help_page_topic} WHERE field_help_page_topic_tid = :val AND entity_id <> :nid', array(':val' => $val, ':nid' => $nid));
  }
}

/*
 * Implements hook_permission().
 *
 * remove welcome topics from list
 */
function sbac_help_permission() {
  return array(
    'send approval emails' => array(
      'title' => t('remove from list'),
    ),
  );
}

function sbac_help_remove($nid) {
  $node = node_load($nid);
  $node->field_help_page_topic = array();

  node_save($node);
  drupal_goto(drupal_get_origin() . '#topics-tab2');
}

function drupal_get_origin() {
  /* @var $_SERVER HTTP_REFERER works on our servers. */
  $path = $_SERVER['HTTP_REFERER'];
  if (isset($_GET['destination'])) {
    $path = $_GET['destination'];
  }
  return $path;
}

/*
 * Implements hook_form_alter().
 *
 * change "save" to "save order"
 */
function sbac_help_form_views_form_help_topics_page_2_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#value'] = 'Save Order';
  $form['actions']['reset'] = array(
    '#type'   =>  'submit',
    '#value'  =>  'Reset to Alphabetical',
    '#submit' =>  array('sbac_help_delete_draggableviews_weights'),
  );
}

function sbac_help_form_views_form_help_topics_page_4_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#value'] = 'Save Order';
  $form['actions']['submit']['#submit'][] = 'sbac_help_stay_on_welcome_tutorial_tab';
}

function sbac_help_stay_on_welcome_tutorial_tab(&$form, &$form_state) {
  drupal_custom_goto('/admin/help-topics#topics-tab2');
}

/**
 * Delete previous draggableviews weights on sort help topics screen
 *
 * @param $form
 * @param $form_state
 */
function sbac_help_delete_draggableviews_weights(&$form, &$form_state) {
  db_delete('draggableviews_structure')
    ->condition('view_name', 'help_topics')
    ->condition('view_display', 'page_2')
    ->execute();
}

/**
 * Implements hook_query_alter().
 * Only displays help topics associated to user roles.
 * @param  QueryAlterableInterface $query A Query object describing the composite parts of a SQL query.
 */
function sbac_help_query_alter(&$query) {
  if ($query->hasTag('views_help_topics')) {
    global $user;
    $roles = $user->roles;

    $can_view_all = array(
      'DLRB member',
      'help desk',
      'digital library administrator',
      'system administrator',
    );

    $intersect = array_intersect($roles, $can_view_all);

    if ($user->uid == 1 || count($intersect)) {
      return;
    }

    $user_roles = array();

    // Add 'All User Roles'
    $all_roles = taxonomy_get_term_by_name('All User Roles', 'sbac_user_roles');
    $all_roles = array_pop($all_roles);
    if ($all_roles) {
      $user_roles[] = $all_roles->tid;
    }

    foreach($roles as $rid => $role) {
      $term = taxonomy_get_term_by_name($role, 'sbac_user_roles');
      $term = array_pop($term);
      $user_roles[] = $term->tid;
    }

    $query->innerJoin('field_data_field_help_user_roles',
                      'sur',
                      'node.nid = sur.entity_id');
    $query->condition('sur.field_help_user_roles_tid', $user_roles, 'IN');
    $query->groupBy('node.nid');
  }
}