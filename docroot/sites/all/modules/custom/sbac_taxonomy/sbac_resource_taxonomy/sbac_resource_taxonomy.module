<?php
/**
 * @file
 * Code for the SBAC Resource Taxonomy feature.
 */

include_once 'sbac_resource_taxonomy.features.inc';

/**
 * Load the taxonomy terms and get there names.
 *
 * @param $field
 * @param $ccss
 *
 * @return string
 */
function sbac_resource_taxonomy_get_taxonomy_terms($field, $ccss = FALSE) {
  $terms = array();
  foreach ($field['und'] as $key => $term) {
    if ($ccss) {
      if (isset($term['taxonomy_term']->field_alignment_shortname['und'][0]['value'])){
        $terms[] = $term['taxonomy_term']->field_alignment_shortname['und'][0]['value'];
      }
      else {
        $temp_term = taxonomy_term_load($term['tid']);
        if ($temp_term) {
          $terms[] = $temp_term->field_alignment_shortname['und'][0]['value'];
        }
      }
    }
    else {
      if (isset($term['taxonomy_term']->name)) {
        $terms[] = $term['taxonomy_term']->name;
      }
      else {
        $temp_term = taxonomy_term_load($term['tid']);
        if ($temp_term) {
          $terms[] = $temp_term->name;
        }
      }
    }
  }

  $list = theme('item_list', array('items' => $terms, 'title' => '', 'type' => 'ul', 'attributes' => array('class' => 'field-content')));
  return $list;
}

/**
 * Concatenate the term name with the parents term names
 * @param $tid
 * @return string
 */
function sbac_resource_taxonomy_term_concat_parents($tid, $term_name) {
  $parents = array();
  $parents[] = (object) array(
    'tid' => $tid,
    'name' => $term_name,
  );
  $n = 0;
  while ($parent = _sbac_resource_taxonomy_get_parents($parents[$n]->tid)) {
    $parents = array_merge($parents, $parent);
    $n++;
  }
  $names = array();
  foreach ($parents as $p) {
    $names[] = $p->name;
  }
  $names = array_reverse($names);
  return implode(' - ', $names);
}

/**
 * Mimic taxonomy get parent but we don't want to trigger the load hook
 */
function _sbac_resource_taxonomy_get_parents($tid){
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_term_hierarchy', 'h', 'h.parent = t.tid');
  $query->fields('t', array('tid', 'name'));
  $query->condition('h.tid', $tid);
  $query->addTag('term_access');
  $query->orderBy('t.weight');
  $query->orderBy('t.name');
  return $query->execute()->fetchAll();
}

/**
 *  Implements hook_taxonomy_term_load().
 */
function sbac_resource_taxonomy_taxonomy_term_load($terms) {
  foreach ($terms as $term) {
    if ($term->vocabulary_machine_name == 'education_alignment') {
      continue;
    }

    // remove the parent terms. We're implement our own query because we don't want to trigger this load hook again.
    $query = db_select('taxonomy_term_data', 't');
    $query->join('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
    $query->addField('t', 'tid');
    $query->condition('h.parent', $term->tid);
    $query->addTag('term_access');
    $query->orderBy('t.weight');
    $query->orderBy('t.name');
    $children = $query->execute()->fetchCol();
    if (!empty($children)) {
      unset($terms[$term->tid]);
    }
    // concatenate the children name with parents. We're using our own get parent function because we don't want to trigger this hook again.
    $term->name = sbac_resource_taxonomy_term_concat_parents($term->tid, $term->name);
  }
}

/**
 *  Implements hook_form_FORM_ID_alter().
 */
function sbac_resource_taxonomy_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  // because we concatenate the term name in sbac_resource_taxonomy_taxonomy_term_load, we don't want to show this concatenated name in the term edit form
  $form['name']['#default_value'] = db_select('taxonomy_term_data', 't')
    ->condition('t.tid', $form['#term']['tid'])
    ->fields('t', array('name'))
    ->execute()
    ->fetchField();
}

/**
 * Access rule for taxonomy term edit
 *
 * @param $term
 * @return bool
 */
function sbac_resource_taxonomy_edit_taxonomy_access($term) {
  // restrict access for resource forums
  if (isset($term->field_forum_resource_ref) && !empty($term->field_forum_resource_ref[LANGUAGE_NONE])) {
    return sbac_central_user_has_role(array('administrator'));
  }
  else {
    return user_access("edit terms in $term->vid") || user_access('administer taxonomy');
  }
}
