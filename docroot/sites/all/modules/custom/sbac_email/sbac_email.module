<?php
/**
 * @file
 * sbac_email module file.
 */

include_once 'sbac_email.features.inc';

/**
 * Implements hook_node_insert().
 */
function sbac_email_taxonomy_term_insert($term) {
  global $user;

  // Associciate user with forum they have created.
  $loaded_node = node_load($term->field_forum_resource_ref[LANGUAGE_NONE][0]['target_id']);
  $loaded_user = $loaded_node->uid;

  // Make sure the poster is the author.
  if ($loaded_user == $user->uid || arg(0) == 'forums') {
    $term_flag = flag_get_flag('subscribe_term');
    $term_flag->flag('flag', $term->tid, user_load($user->uid), TRUE);
  }
}


/**
 * Implements hook_node_insert().
 */
function sbac_email_node_insert($node) {
  global $user;

  // This is where we subscribe to a forum discussion (topic or resource).
  $flag = flag_get_flag('subscribe_node');
  if (!empty($node->nid)) {
    $flag->flag('flag', $node->nid, user_load($node->uid), TRUE);
    $node_flags = flag_get_entity_flags('node', $node->nid, 'subscribe_node');
  }
  else {
    $flag->flag('flag', $node->nid, user_load($user->uid), TRUE);
  }

  if (module_exists('message_notify')) {
    $tid = $node->field_topic_forum_parent[$node->language][0]['tid'];
    $term_flags = flag_get_entity_flags('taxonomy_term', $tid, 'subscribe_term');
    $options = array(
      'rendered fields' => array(
        'message_notify_email_subject' => 'field_message_rendered_subject',
        'message_notify_email_body' => 'field_message_rendered_body',
      ),
    );

    // Let's make sure the user has flag on and subscriptions on, then send notice.
    foreach ($term_flags as $term_flag) {
      if ($node->uid !== $term_flag->uid) {
        $email_user = flag_get_user_flags('flag', $entity_id = NULL, $term_flag->uid);
        $message = message_create('node_insert', array('uid' => $term_flag->uid));
        $wrapper = entity_metadata_wrapper('message', $message);
        $wrapper->field_node_ref->set($node);

        sbac_email_update_user_unread_count($term_flag->uid);

        if ($task = taskit_get_object('created_topic_node')) {
          $task->addVisibility($task::VISIBILITY_USER);
          $task->addEntity('node', $node->nid);
          $task->addOwningUser($term_flag->uid);
          $task->addTriggeringUser($user->uid);
          $task->save();
        }

        if (!empty($email_user['email'])) {
          message_notify_send_message($message, $options);
        }
      }
    }
  }
}


/**
 * Implements hook_comment_insert().
 *
 * Send a message to the node author when a new comment is created.
 */
function sbac_email_comment_insert($comment) {
  $node = node_load($comment->nid);
  global $user;

  // This is where we subscribe to a comment.
  $flag = flag_get_flag('subscribe_node');
  $flag->flag('flag', $node->nid, user_load($user->uid), TRUE);
  $options = array(
    'rendered fields' => array(
      'message_notify_email_subject' => 'field_message_rendered_subject',
      'message_notify_email_body' => 'field_message_rendered_body',
    ),
  );

  if (module_exists('message_notify')) {
    $flags = flag_get_entity_flags('node', $node->nid, 'subscribe_node');

    // Let's make sure the user has flag on and subscriptions on, then send notice.
    foreach ($flags as $flag) {
      if ($comment->uid !== $flag->uid) {
        $email_user = flag_get_user_flags('flag', $entity_id = NULL, $flag->uid);
        $message = message_create('sbac_email_comment_insert', array('uid' => $flag->uid));
        $wrapper = entity_metadata_wrapper('message', $message);
        $wrapper->field_comment_ref->set($comment);
        sbac_email_update_user_unread_count($flag->uid);

        if ($task = taskit_get_object('created_forum_comment')) {
          $task->addVisibility($task::VISIBILITY_USER);
          $task->addEntity('node', $node->nid);
          $task->addEntity('comment', $comment->cid);
          $task->addOwningUser($flag->uid);
          $task->addTriggeringUser($user->uid);
          $task->save();
        }

        if (!empty($email_user)) {
          message_notify_send_message($message, $options);
        }
      }
    }
  }
}

/**
 * Add to our notifcations table.
 */
function sbac_email_update_user_unread_count($uid) {

  // This builds the count for the red notices pop-up.
  $sql = db_query('SELECT uid FROM {sbac_email_user_unread_notifications_count} WHERE uid = :uid', array(':uid' => $uid));
  $result = db_query($sql)->fetchField();
  if ($result) {

    // Add 1 to count.
    db_update('sbac_email_user_unread_notifications_count')
      ->expression('count', 'count + :count', array(':count' => 1))
      ->condition('uid', $uid)
      ->execute();
  }
  else {

    // Initialize count to 1.
    db_insert('sbac_email_user_unread_notifications_count')
      ->fields(array(
          'uid' => $uid,
          'count' => 1,
        ))
      ->execute();
  }
}

/**
 * Reset our notifcations table.
 */
function sbac_email_init() {

  // When the user visits their profile, consider the notice stale.
  if (arg(0) == 'user' && is_numeric(arg(1))) {
    global $user;

    // Reset unread count.
    $sql = db_query('SELECT uid FROM {sbac_email_user_unread_notifications_count} WHERE uid = :uid', array(':uid' => $user->uid));
    $result = db_query($sql)->fetchField();
    if ($result) {
      db_update('sbac_email_user_unread_notifications_count')
        ->fields(array('count' => 0))
        ->condition('uid', $user->uid)
        ->execute();
    }
  }
}

/**
 * Implements hook_cron()
 */
function sbac_email_daily_cron() {
  $daily = sbac_email_get_subscription('daily');
  foreach ($daily as $subscriber) {
    $array = array($subscriber->uid);
    $view = views_get_view('message_list');
    $view->set_display("master");
    $view->set_arguments($array);
    $view->pre_execute();
    $view->execute();
    $messages = $view->render(); 
    $values = array(
      'arguments' => array(
        '!message-view' => $messages,
      ),
      'uid' => $subscriber->uid,
    );
    if (!empty($view->result)) {
      // Create message
      $message = message_create('daily_email', $values);
      $wrapper = entity_metadata_wrapper('message', $message);
      // Send email
      message_notify_send_message($message);
      // delete message after it is sent so it doesn't show up in digest if a user switches email preferences
      message_delete_multiple(array($message->mid));
      // delete messages so they aren't resent
      foreach ($view->result as $result) {
        $message_array[] = $result->mid;
      }
      message_delete_multiple($message_array);
    }
  }
}

function sbac_email_weekly_cron() {
  $daily = sbac_email_get_subscription('weekly');
  foreach ($daily as $subscriber) {
    $array = array($subscriber->uid);
    $view = views_get_view('message_list');
    $view->set_display("master");
    $view->set_arguments($array);
    $view->pre_execute();
    $view->execute();
    $messages = $view->render(); 
    $values = array(
      'arguments' => array(
        '!message-view' => $messages,
      ),
      'uid' => $subscriber->uid,
    );
    if (!empty($view->result)) {
      // Create message
      $message = message_create('weekly_email', $values);
      $wrapper = entity_metadata_wrapper('message', $message);
      // Send email
      message_notify_send_message($message);
      // delete message after it is sent so it doesn't show up in digest if a user switches email preferences
      message_delete_multiple(array($message->mid));
      // delete messages so they aren't resent
      foreach ($view->result as $result) {
        $message_array[] = $result->mid;
      }
      message_delete_multiple($message_array);
    }
  }
}

/**
 * Gets users with daily or weekly email subscription
 */
function sbac_email_get_subscription($preference) {
  $sql = <<<SQL

    SELECT
      u.uid,
      ep.field_email_preference_value
    FROM {users} u
      LEFT JOIN {field_data_field_email_preference} ep
        ON u.uid = ep.entity_id
    WHERE
      u.status = :status
      AND (ep.field_email_preference_value = :preference)
    GROUP BY
      u.uid
SQL;

  $result = db_query($sql, array(':status' => '1', ':preference' => $preference));

  foreach ($result as $row) {
    $reviewers[] = $row;
  }

  return $reviewers;
}

/**
 * Returns a correctly formatted link to a users profile given a user object
 */
function sbac_email_user_link($user_object) {
  global $base_url;
  $user_name = str_replace(' ', '-', strtolower(sbac_user_format_username($user_object)));
  $user_name_clean = str_replace('.', '', $user_name);

  return $base_url . '/users/' . $user_name_clean;
}