<?php
/**
 * @file
 * Code for the SBAC Favorites feature.
 */

include_once 'sbac_favorites.features.inc';

/**
 * @file.
 * Module to handle all favoriting functionality.
 *
 * Provides:
 *  - Exports the favorite entity type
 *  - Displays and handles the click even to add / remove a favorite
 *  - Creates the favorite listing on the user profile page.
 */

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_favorites_update_projects_alter(&$projects) {
  unset($projects['sbac_favorites']);
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function sbac_favorites_menu() {
  $items = array();

  $items['sbac-favorites-click'] = array(
    'title' => 'SBAC Favorites',
    'page callback' => 'sbac_favorites_ajax_click',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['sbac-favorites-delete-favorite'] = array(
    'title' => 'SBAC Delete Favorites',
    'page callback' => 'sbac_favorites_ajax_delete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['favorite_collection/%'] = array(
    'title' => 'Favorites',
    'page callback' => 'sbac_favorites_page_favorites',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return mixed
 */
function sbac_favorites_theme($existing, $type, $theme, $path) {
  $items['sbac_favorites_no_favorites_resource'] = array(
    'path' => drupal_get_path('theme', 'SBAC') . '/templates/sbac_favorites',
    'template' => 'no-favorites-resource',
  );
  $items['sbac_favorites_resource_tabledrag'] = array(
    'render element' => 'form',
  );

  return $items;
}

/**
 * Get the entity being favorited according to their type
 *
 * @param $id
 * @param $type
 * @return bool|mixed|null
 */
function sbac_favorites_get_entity_by_type($id, $type) {
  $entity = NULL;
  switch ($type) {
    case 'node':
      $entity = node_load($id);
      break;
    case 'term':
      $entity = taxonomy_term_load($id);
      break;
    case 'user':
      $entity = user_load($id);
      break;
    case 'comment':
      $entity = comment_load($id);
      break;
    case 'file':
      $entity = file_load($id);
      break;
  }
  return $entity;
}

/**
 * Adds or deletes the entry from the custom table.
 */
function sbac_favorites_ajax_click($id = null, $uid = null, $cid = null, $type = 'node') {
  global $user;

  if (isset($id)) {
    $_POST['id'] = $id;
  }
  if (isset($uid)) {
    $_POST['uid'] = $uid;
  }
  if (isset($cid)) {
    $_POST['cid'] = $cid;
  }
  if (isset($type)) {
    $_POST['type'] = $type;
  }

  if (!$_POST['id'] || !$_POST['uid'] || !$_POST['type']) {
    drupal_exit();
  }
  // Ensure the user making the ajax request is the user who is logged in.
  if ($user->uid != $_POST['uid']) {
    drupal_exit();
  }

  $cid = check_plain(array_key_exists('cid', $_POST) ? $_POST['cid'] : '0');
  if ('0' !== $cid) {
    $collection = sbac_favorites_get_entity_by_type($cid, 'node');
    if ('collection' !== $collection->type || $user->uid !== $collection->uid) {
      drupal_exit();
    }
  }

  $id = check_plain($_POST['id']);
  $type = check_plain($_POST['type']);
  $entity = sbac_favorites_get_entity_by_type($id, $type);
  $account = user_load($_POST['uid']);
  $is_favorite = $_POST['is_favorite'];

  if (!empty($entity) && $account) {
    // if is_favorite is false, that means, the user wants to add this to his/her favorites.
    if (!$is_favorite) {
      $obj = new stdClass();
      $obj->id = $id;
      $obj->uid = $account->uid;
      $obj->cid = $cid;
      $obj->type = $type;
      $obj->weight = -1000;
      $obj->created = time();
      drupal_write_record('sbac_favorites', $obj);
    }
    else {
      db_delete('sbac_favorites')
        ->condition('id', $id)
        ->condition('uid', $account->uid)
        ->condition('cid', $cid)
        ->condition('type', $type)
        ->execute();
    }
    unset($_SESSION['favorites']['count']);
    $output = array();
    print drupal_json_encode($output);
    drupal_exit();
  }
  else {
    drupal_exit();
  }
}

/**
 * Deletes the favorite entry from the database.
 *
 * @return string
 */
function sbac_favorites_ajax_delete() {
  global $user;
  if (!$_POST['id'] || !$_POST['uid'] || !$_POST['type']) {
    drupal_exit();
  }
  // Ensure the user making the ajax request is the user who is logged in.
  if ($user->uid != $_POST['uid']) {
    drupal_exit();
  }

  $cid = check_plain(array_key_exists('cid', $_POST) ? $_POST['cid'] : '0');
  if ('0' !== $cid) {
    $collection = sbac_favorites_get_entity_by_type($cid, 'node');
    if ('collection' !== $collection->type || $user->uid !== $collection->uid) {
      drupal_exit();
    }
  }

  unset($_SESSION['favorites']['count']);

  db_delete('sbac_favorites')
    ->condition('id', $_POST['id'])
    ->condition('uid', $_POST['uid'])
    ->condition('cid', $cid)
    ->condition('type', $_POST['type'])
    ->execute();
  $output = array();
  print drupal_json_encode($output);
  drupal_exit();
}

/**
 * Returns the count of favorites for the user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_count($uid) {
  if (isset($_SESSION['favorites']['count'])) {
    return $_SESSION['favorites']['count'];
  }

  $resource_favorites = sbac_favorites_get_favorite_resource_list_count($uid);
  $count = $resource_favorites;
  $_SESSION['favorites']['count'] = $count;
  return $count;
}

/**
 * Gets the favorites for a given user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorites($uid, $id = FALSE, $type = 'node') {
  $favorites = array();
  $query = db_select('sbac_favorites', 'sf')
    ->fields('sf', array('id', 'uid', 'cid', 'type', 'weight', 'created'))
    ->condition('sf.uid', $uid)
    ->condition('sf.type', $type);
  if ($id) {
    $query->condition('sf.id', $id);
  }
  $result = $query->orderBy('sf.created', 'DESC')
    ->execute();
  foreach ($result as $row) {
    $favorites[] = $row;
  }
  return $favorites;
}

/**
 * Get the list of favorite resources
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorite_resource_list($uid, $cid = 0) {
  return sbac_favorites_get_favorites_list($uid, 'node', $cid);
}

/**
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorite_resource_list_count($uid) {
  $type = 'node';
  $query = db_select('sbac_favorites', 'sf')
    ->fields('sf', array('id', 'uid', 'weight', 'type', 'created'))
    ->condition('sf.uid', $uid);
  $query->condition('sf.type', $type);
  $query->innerJoin('node', 'n', 'n.nid = sf.id'); // make sure the node hasn't been hard deleted
  $query->innerJoin('workbench_moderation_node_history', 'h', 'n.nid = h.nid AND h.current = 1 AND h.state <> \'removed\''); // make sure the node is not soft deleted
  $result = $query
    ->orderBy('sf.weight', 'ASC')
    ->orderBy('sf.created', 'DESC')
    ->execute()->rowCount();
  return $result;
}

/**
 * Gets the favorites for a given user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorites_list($uid, $type = 'node', $cid = 0) {
  $favorites = array();
  $args = array();
  $query = db_select('sbac_favorites', 'sf')
    ->fields('sf', array('id', 'uid', 'weight', 'type', 'cid', 'created'))
    ->condition('sf.uid', $uid)
    ->condition('sf.cid', $cid);
  if ($type) {
    $query->condition('sf.type', $type);
    if ($type === 'node') {
      $query->innerJoin('node', 'n', 'n.nid = sf.id'); // make sure the node hasn't been hard deleted
      $query->innerJoin('workbench_moderation_node_history', 'h', 'n.nid = h.nid AND h.current = 1 AND h.state <> \'removed\''); // make sure the node is not soft deleted
    }
    elseif ($type === 'term') {
      $query->innerJoin('taxonomy_term_data', 'term', 'term.tid = sf.id');
    }
    elseif ($type === 'collection') {
      $query->innerJoin('node', 'n', 'n.nid = sf.id');
    }
  }
  $result = $query
    ->orderBy('sf.weight', 'ASC')
    ->orderBy('sf.created', 'DESC')
    ->execute();
  foreach ($result as $row) {
    $favorites[] = $row;
  }

  return $favorites;
}

/**
 * Implements hook_module_impelements_alter().
 *
 * @param $implementations
 * @param $hook
 */
function sbac_favorites_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'user_view') {
    if (isset($implementations['sbac_favorites'])) {
      $group = $implementations['sbac_favorites'];
      unset($implementations['sbac_favorites']);
      $implementations['sbac_favorites'] = $group;
    }
  }
}

/**
 * Get the HTML content for profile view.
 *
 * @return string
 */
function sbac_favorites_get_html_content() {
  global $user;
  $account = $user;
  $output = render(drupal_get_form('sbac_favorites_user_favorites', $account));
  $favorites_content  = '<div id="favorites">';
  if (false) {
    $favorites_content .= '<div class="favorites-helpful-info">';
    $favorites_content .= 'Drag and drop items in the list to reorder your favorites';
    $favorites_content .= '</div>';
  }
  $favorites_content .= '<div id="favorites-table">';
  $favorites_content .= $output;
  $favorites_content .= '</div>';
  $favorites_content .= '</div>';
  return $favorites_content;
}

/**
 * The users favorite form.
 *
 * @param $form
 * @param $form_state
 * @param $account
 * @return array
 */
function sbac_favorites_user_favorites($form, &$form_state, $account) {
  $form = array();

  $form['#action'] = '/' . drupal_get_path_alias('user/' . $account->uid) . '#profile-favorites';
  $form['#id'] = 'sbac-user-profile-favorites-form';

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'sbac_favorites') . '/js/sbac_favorites.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'sbac_favorites') . '/css/sbac_favorites.css',
  );

  $form['#tree'] = TRUE;
  $form['tab_container'] = array(
    '#type' => 'container',
    '#theme' => 'sbac_favorites_resource_tabledrag',
  );

  $fav_collection = new \stdClass();
  $fav_collection->nid = 0;
  $fav_collection->id = 0;
  $fav_collection->title = t('Favorites');

  $collections = node_load_multiple(array(), array('type'=>'collection', 'uid'=>$account->uid));
  $collection_ordered = sbac_favorites_get_favorites_list($account->uid, 'collection', 0);
  $collection_list = array_map(function($c) {return $c->id;}, $collection_ordered);
  usort($collections, function($a, $b) use ($collection_list) {
    $sa = array_search($a->nid, $collection_list);
    if ($sa === false) { return 1; }
    $sb = array_search($b->nid, $collection_list);
    if ($sb === false) { return -1; }
    return ($sa - $sb);
  });
  array_unshift($collections, $fav_collection);



  $content = array(
    '#title' => t('Favorites'),
  );

  // @TODO: Order collections by $collection_list order
  $weight = 0;
  foreach ($collections as $collection) {
    $content[$collection->nid . ':0:' . $account->uid . ':' . 'collection'] = array(
      'name' => array(
        '#markup' => '<span class="expander"></span> <span class="favorite-title">'.$collection->title.'</span>',
      ),
      'links' => array(
        '#markup' => l('view', (0 != $collection->nid)
              ? 'node/'.$collection->nid
              : 'favorites/'.$account->name,
          array(
            'attributes' => array(
              'class' => array('sbac-favorites-links-favorite'),
            ),
          )
        )
        .((0 != $collection->nid)
            ?' '.l('edit', 'sbac_collections/nojs/0/'.$collection->nid, array(
              'attributes' => array(
                'class' => array('sbac-favorites-links-favorite', 'ctools-use-modal', 'ctools-modal-collection-form-modal'),
              ),
            ))
            : ''
        ),
      ),
      'id' => array(
        '#type' => 'hidden',
        '#default_value' => $collection->nid,
        '#attributes' => array(
          'class' => array('favorite-item-id'),
        ),
      ),
      'pid' => array(
        '#type' => 'hidden',
        '#default_value' => -1,
        '#attributes' => array(
          'class' => array('favorite-item-pid'),
        ),
      ),
      'weight' => array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => $weight++,
        '#delta' => 100,
        '#title_display' => 'invisible',
        '#attributes' => array(
          'class' => array('favorite-item-weight'),
        ),
      ),
      'type' => array(
        '#type' => 'hidden',
        '#value' => 'collection',
      ),
    );

    $fav_resources = sbac_favorites_get_favorite_resource_list($account->uid, $collection->nid);

    if (!empty($fav_resources)) {
      foreach ($fav_resources as $favorite) {
        $resource = node_load($favorite->id);
        $element = array(
          'name' => array(
            '#markup' => l($resource->title, $resource->path['alias']),
          ),
          'links' => array(
            '#markup' => '<a href="/sbac-favorites-delete-favorite" class="sbac-favorites-delete-favorite" data-nid="' . $resource->nid . '" data-cid="' . $collection->nid . '" data-uid="' . $favorite->uid . '" data-type="' . $favorite->type . '">remove</a>',
          ),
          'id' => array(
            '#type' => 'hidden',
            '#default_value' => $collection->nid.'-'.$resource->nid,
            '#attributes' => array(
              'class' => array('favorite-item-id'),
            ),
          ),
          'pid' => array(
            '#type' => 'hidden',
            '#default_value' => $collection->nid,
            '#attributes' => array(
              'class' => array('favorite-item-pid'),
            ),
          ),
          'weight' => array(
            '#type' => 'weight',
            '#title' => t('Weight'),
            '#default_value' => $favorite->weight,
            '#delta' => 100,
            '#title_display' => 'invisible',
            '#attributes' => array(
              'class' => array('favorite-item-weight'),
            )
          ),
          'type' => array(
            '#type' => 'hidden',
            '#value' => 'node',
          ),
        );
        $content[$favorite->id . ':' . $collection->nid . ':' . $favorite->uid . ':' . $favorite->type] = $element;
      }
    }
  }

  $form['tab_container']['favorites'] = $content;

  $form['tab_container']['buttons'] = array(
    '#type' => 'container',
  );
  $form['tab_container']['buttons']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save Order'),
    '#weight' => -100,
    //      '#attributes' => array('id' => 'sbac-favorites-resource-submit'),
    '#name' => 'sbac-favorites-resource-submit',
    '#ajax' => array(
      'wrapper' => 'sbac-user-profile-favorites-form',
      'callback' => 'sbac_favorites_user_favorites_submit',
      'method' => 'replace',
      'effect' => 'fade'
    ),
  );
  $form['tab_container']['buttons']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#weight' => 100,
    '#attributes' => array(
      'id' => 'sbac-favorites-resource-cancel',
      'class' => array('gray')
    ),
    '#name' => 'sbac-favorites-resource-cancel',
  );

  ctools_include('modal');
  ctools_modal_add_js();

  return $form;
}

/**
 * The form submit.
 *
 * @param $form
 * @param $form_state
 */
function sbac_favorites_user_favorites_submit(&$form, &$form_state) {
  global $user;

  foreach ($form_state['values']['tab_container']['favorites'] as $favorite_id => $item) {
    $identifiers = explode(':', $favorite_id);
    $id = $identifiers[0];
    $cid = $identifiers[1];
    $uid = $identifiers[2];
    $type = $identifiers[3];

    if (0 == $id) {
      // The Favorites collection is always on top
      continue;
    }

    if ('node' !== $type && 'collection' !== $type) {
      drupal_exit();
    }

    if ($user->uid != $uid) {
      drupal_exit();
    }

    db_merge('sbac_favorites')
      ->key(array('id' => $id, 'uid' => $uid, 'cid' => $cid, 'type' => $type))
      ->fields(array('weight' => $item['weight']))
      ->execute();
  }

  return drupal_rebuild_form('sbac_favorites_user_favorites', $form_state);
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function sbac_favorites_preprocess_page(&$vars) {
  if (arg(0) == 'digital-library-resources' || arg(0) == 'my-resources') {
    drupal_add_js(drupal_get_path('module', 'sbac_favorites') . '/js/sbac_favorites.js');
    drupal_add_css(drupal_get_path('module', 'sbac_favorites') . '/css/sbac_favorites.css');
  }
}

/**
 * Implements hook_views_api().
 */
function sbac_favorites_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Generate the 'Add to Favorite' link for a content
 *
 * @param $uid
 * @param $id
 * @param $type
 * @return string
 */
function sbac_favorites_get_favorite_link($uid, $id, $type) {
  $favorites_class = 'sbac-favorites-link-no';
  $favorite_text = t('Add to Favorites');
  $favorites = sbac_favorites_get_favorites($uid, $id, $type);
  if ($favorites) {
    $favorites_class = 'sbac-favorites-link-yes';
  }

  $fav_collection = new \stdClass();
  $fav_collection->nid = 0;
  $fav_collection->title = t('Favorites');
  $collections = node_load_multiple(array(), array('type'=>'collection', 'uid'=>$uid));
  $collection_ordered = sbac_favorites_get_favorites_list($uid, 'collection', 0);
  $collection_list = array_map(function($c) {return $c->id;}, $collection_ordered);
  usort($collections, function($a, $b) use ($collection_list) {
    $sa = array_search($a->nid, $collection_list);
    if ($sa === false) { return 1; }
    $sb = array_search($b->nid, $collection_list);
    if ($sb === false) { return -1; }
    return ($sa - $sb);
  });
  array_unshift($collections, $fav_collection);

  $popup = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'sbac-favorites-collections',
        'f-dropdown',
        'right',
      ),
      'style' => 'display:none;',
      'data-nid' => $id,
      'data-uid' => $uid,
      'data-type' => $type,
    ),
  );

  $element = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'sbac-favorites-collection-list',
      ),
    ),
  );
  foreach ($collections as $collection) {
    $hasFavorite = 'no';
    $collectionType = 'collection';
    if (0 === $collection->nid) {
      $collectionType = 'favorites';
    }
    foreach ($favorites as $favorite) {
      if ($favorite->cid == $collection->nid) {
        $hasFavorite = 'yes';
        break;
      }
    }

    $element['collection-'.$collection->nid] = array(
      '#markup' => l($collection->title, $_GET['q'], array(
        'attributes' => array(
          'class' => array(
            'sbac-favorites-collection',
            'sbac-favorites-collection-'.$collectionType,
            'sbac-favorite-'.$hasFavorite,
          ),
          'data-cid' => $collection->nid,
        )
      )),
    );
  }

  $popup['content'] = $element;

  $popup['buttons'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('sbac-favorites-collection-create-wrapper'),
    ),
  );

  /*
  $popup['buttons']['create'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Create a Collection'), 'sbac_collections/nojs', array(
      'attributes' => array(
        'class' => array(
          'ctools-use-modal',
        ),
      ),
    )),
  );
  */

  $popup['buttons']['form'] = array(
    '#type' => 'form',
    '#action' => url('sbac_collections/nojs/'.$id.'/0'),
    '#method' => 'get',
    'content' => array(
      '#type' => 'button',
      '#button_type' => 'no-submit',
      '#name' => 'sbac-favorites-collection-create',
      '#value' => t('Create a Collection'),
      '#weight' => -100,
      '#attributes' => array(
        'class' => array(
          'tiny',
          'sbac-favorites-collection-create',
          'ctools-use-modal',
          'ctools-modal-collection-form-modal',
        ),
        'id' => 'favorites-create-btn',
        'favorites-create-btn-url' => url('sbac_collections/nojs/'.$id.'/0'),
      ),
    )
  );

//  $popup['buttons']['create_btn'] = array(
//    '#type' => 'button',
//    '#button_type' => 'no-submit',
//    '#name' => 'sbac-favorites-collection-create',
//    '#value' => t('Create a Collection'),
//    '#weight' => -100,
//    '#attributes' => array(
//      'class' => array(
//        'tiny',
//        'sbac-favorites-collection-create',
////        'ctools-use-modal',
//      ),
//      'id' => 'favorites-create-btn',
//      'favorites-create-btn-url' => url('sbac_collections/nojs'),
//    ),
//    /*
//    '#ajax' => array(
//      'wrapper' => 'sbac-user-profile-favorites-form',
//      'callback' => 'sbac_favorites_user_favorites_submit',
//      'method' => 'replace',
//      'effect' => 'fade'
//    ),
//    */
//  );

  $div = drupal_render($popup);

  drupal_add_js(drupal_get_path("module", "sbac_favorites") . "/js/sbac_favorites.js");
  drupal_add_js(drupal_get_path("module", "sbac_collections") . "/js/sbac_collections.ctools.js");
  drupal_add_css(drupal_get_path('module', 'sbac_favorites') . '/css/sbac_favorites.css');
  ctools_include('modal');
  ctools_modal_add_js();
  drupal_add_js(array(
    'collection-form-modal' => array(
//      'closeText' => t('Close Window'),
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 800,
        'height' => 600,
//        'contentBottom' => 800,
      ),
      'animation' => 'fadeIn',
      'modalTheme' => 'CtoolsSbacCollectionsModal',
    ),
  ), 'setting');

  $favorite_link = l($favorite_text, $_GET['q'], array(
    'attributes' => array(
      'class' => array(
        'sbac-favorites-link',
        $favorites_class
      ),
      'id' => $id,
      'uid' => $uid,
      'type' => $type,
    )
  ));

  return $favorite_link.$div;
}

/**
 * Default theme implementation
 *
 * @param $vars
 * @return string
 */
function theme_sbac_favorites_resource_tabledrag($vars) {
  $form = $vars['form'];
  $rows = array();
  foreach (element_children($form['favorites']) as $key) {
    $element = & $form['favorites'][$key];

    $class = array();
    $class[] = 'draggable';
    $indent = '';
    if ($element['type']['#value'] === 'collection') {
      $class[] = 'tabledrag-root';
      $class[] = 'expanded';
      if (preg_match('/^0:0:/', $key)) {
        $class[] = 'collection-favorites';
      }
    } else {
      $class[] = 'tabledrag-leaf';
      $indent = theme('indentation', array('size' => 1));
    }
    unset($element['type']);

    $row = array('data' => array(
      'name' => $indent.drupal_render($element['name']),
      'links' => drupal_render($element['links']),
      'id' => drupal_render($element['id']),
      'pid' => drupal_render($element['pid']),
      'weight' => drupal_render($element['weight']),
    ));

    $rows[$key] = $row;
    $rows[$key]['class'] = $class;
  }
  if (!empty($rows)) {
    $table_id = 'sbac-favorites-resource-table-drag-drop';
    $header = array(
      $form['#title'],
      t(''),
      t(''),
      t(''),
      t(''),
    );
    $output = theme('table', array(
      //'header' => $header,
      'rows' => $rows,
      'attributes' => array('id' => $table_id, 'class' => array('width-auto'))
    ));
    $output .= drupal_render_children($form);

    drupal_add_tabledrag($table_id, 'match', 'parent', 'favorite-item-pid', 'favorite-item-pid', 'favorite-item-id');
    drupal_add_tabledrag($table_id, 'order', 'sibling', 'favorite-item-weight');
    drupal_add_js(drupal_get_path('module', 'sbac_favorites') . '/js/sbac_favorites_tabledrag.js');
    drupal_add_js(drupal_get_path("module", "sbac_collections") . "/js/sbac_collections.ctools.js");
    drupal_add_js(array(
      'collection-form-modal' => array(
  //      'closeText' => t('Close Window'),
        'modalSize' => array(
          'type' => 'fixed',
          'width' => 800,
          'height' => 600,
  //        'contentBottom' => 800,
        ),
        'animation' => 'fadeIn',
        'modalTheme' => 'CtoolsSbacCollectionsModal',
      ),
    ), 'setting');
  }
  else {
    $output = theme('sbac_favorites_no_favorites_resource');
  }
  return $output;
}

/**
 * Implements hook_logout().
 *
 * @param $account
 */
function sbac_favorites_user_logout($account) {
  if (isset($_SESSION['favorites']['count'])) {
    unset($_SESSION['favorites']['count']);
  }
}

function sbac_favorites_page_favorites($uid) {
  /*
  if (!is_numeric($uid)) {
    drupal_access_denied();
    return;
  }
  */

  $user = user_load($uid);
  //$user = user_load_by_name($uid);
  module_load_include("inc", "page_manager", "plugins/tasks/page");

  $subtask_id = "favorites_for_user";
  $output = page_manager_page_execute($subtask_id, $user->uid);
  return render($output);


  $minipanel = panels_mini_load('favorites_for_user');
  if (empty($minipanel) || empty($minipanel->display)) {
    watchdog('sbac_favorites', 'Unable to load minipanel');
  } else if (!empty($minipanel->display)) {
    $display = $minipanel->display;
    $display->args = array('User' => $user);
    var_dump($display);

    $output = panels_render_display($display);

    var_dump($output);
  }

  exit();




  $name = array();
  if (sbac_user_privacy_check('field_first_name', $user)) {
    $fname = field_get_items('user', $user, 'field_first_name');
    if (count($fname)) {
      $name[] = drupal_render(field_view_value('user', $user, 'field_first_name', $fname[0]));
    }
  }
  if (sbac_user_privacy_check('field_first_name', $user)) {
    $lname = field_get_items('user', $user, 'field_last_name');
    if (count($lname)) {
      $name[] = drupal_render(field_view_value('user', $user, 'field_last_name', $lname[0]));
    }
  }
  if (!count($name)) {
    $name[] = $user->name;
  }

  $favorites = sbac_favorites_get_favorite_resource_list($uid, 0);
  $view = views_get_view('my_resources');
  $view->set_display('list_view');

  $content = [];
  $content['title'] = array(
    '#type' => 'markup',
    '#markup' => '<h1 id="page-title" class="title">Favorites Collection <span class="collection-by">by '.implode(' ', $name).'</span></h1>',
  );

  if (!empty($favorites)) {
    foreach ($favorites as $favorite) {
      $resource = node_load($favorite->id);
      $element = array(
        '#type' => 'markup',
        '#markup' => l($resource->title, $resource->path['alias']),
      );
      $content[$favorite->id . ':' . $favorite->type] = $element;
    }
  }

  return render($content);
}
