<?php

/**
 * @file.
 * Module to handle all favoriting functionality.
 *
 * Provides:
 *  - Exports the favorite entity type
 *  - Displays and handles the click even to add / remove a favorite
 *  - Creates the favorite listing on the user profile page.
 */

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_favorites_update_projects_alter(&$projects) {
  unset($projects['sbac_favorites']);
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function sbac_favorites_menu() {
  $items = array();

  $items['sbac-favorites-click'] = array(
    'title' => 'SBAC Favorites',
    'page callback' => 'sbac_favorites_ajax_click',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['sbac-favorites-delete-favorite'] = array(
    'title' => 'SBAC Delete Favorites',
    'page callback' => 'sbac_favorites_ajax_delete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return mixed
 */
function sbac_favorites_theme($existing, $type, $theme, $path) {
  $items['sbac_favorites_no_favorites_resource'] = array(
    'path' => drupal_get_path('module', 'sbac_favorites') . '/templates',
    'template' => 'no-favorites-resource',
  );
  $items['sbac_favorites_no_favorites_forum'] = array(
    'path' => drupal_get_path('module', 'sbac_favorites') . '/templates',
    'template' => 'no-favorites-forum',
  );
  $items['sbac_favorites_resource_tabledrag'] = array(
    'render element' => 'form',
  );
  $items['sbac_favorites_forum_tabledrag'] = array(
    'render element' => 'form',
  );

  return $items;
}

/**
 * Get the entity being favorited according to their type
 *
 * @param $id
 * @param $type
 * @return bool|mixed|null
 */
function sbac_favorites_get_entity_by_type($id, $type) {
  $entity = NULL;
  switch ($type) {
    case 'node':
      $entity = node_load($id);
      break;
    case 'term':
      $entity = taxonomy_term_load($id);
      break;
    case 'user':
      $entity = user_load($id);
      break;
    case 'comment':
      $entity = comment_load($id);
      break;
    case 'file':
      $entity = file_load($id);
      break;
  }
  return $entity;
}

/**
 * Adds or deletes the entry from the custom table.
 */
function sbac_favorites_ajax_click() {
  if (!$_POST['id'] || !$_POST['uid'] || !$_POST['type']) {
    exit;
  }

  $id = check_plain($_POST['id']);
  $type = check_plain($_POST['type']);
  $entity = sbac_favorites_get_entity_by_type($id, $type);
  $account = user_load($_POST['uid']);
  $is_favorite = $_POST['is_favorite'];

  if (!empty($entity) && $account) {
    // if is_favorite is false, that means, the user wants to add this to his/her favorites.
    if (!$is_favorite) {
      $obj = new stdClass();
      $obj->id = $id;
      $obj->uid = $account->uid;
      $obj->type = $type;
      $obj->weight = -1000;
      $obj->created = time();
      drupal_write_record('sbac_favorites', $obj);
    }
    else {
      db_delete('sbac_favorites')
        ->condition('id', $id)
        ->condition('uid', $account->uid)
        ->condition('type', $type)
        ->execute();
    }
    $output = array();
    print drupal_json_encode($output);
    exit;
  }
  else {
    exit;
  }
}

/**
 * Deletes the favorite entry from the database.
 *
 * @return string
 */
function sbac_favorites_ajax_delete() {
  if (!$_POST['id'] || !$_POST['uid'] || !$_POST['type']) {
    return;
  }

  db_delete('sbac_favorites')
    ->condition('id', $_POST['id'])
    ->condition('uid', $_POST['uid'])
    ->condition('type', $_POST['type'])
    ->execute();
  $count = sbac_favorites_get_count($_POST['uid']);
  $output = array();
  if ($count) {
    $output['total'] = $count;
  }
  else {
    $output['total'] = 0;
    $output['no_results'] = theme('sbac_favorites_no_favorites');
  }
  print drupal_json_encode($output);
  exit;
}

/**
 * Returns the count of favorites for the user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_count($uid) {
  $favorites_count = array();
  $sql = "SELECT count(*) AS count FROM {sbac_favorites} sf WHERE uid = :uid";
  $result = db_query($sql, array(':uid' => $uid))->fetchObject();
  if ($result) {
    $favorites_count = $result->count;
  }
  return $favorites_count;
}

/**
 * Gets the favorites for a given user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorites($uid, $id = FALSE, $type = 'node') {
  $favorites = array();
  $query = db_select('sbac_favorites', 'sf')
    ->fields('sf', array('id', 'uid', 'type', 'weight', 'created'))
    ->condition('sf.uid', $uid)
    ->condition('sf.type', $type);
  if ($id) {
    $query->condition('sf.id', $id);
  }
  $result = $query->orderBy('sf.created', 'DESC')
    ->execute();
  foreach ($result as $row) {
    $favorites[] = $row;
  }
  return $favorites;
}

/**
 * Get the list of favorite resources
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorite_resource_list($uid) {
  return sbac_favorites_get_favorites_list($uid, 'node');
}

/**
 * Get the list of favorite forums
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorite_forum_list($uid) {
  return sbac_favorites_get_favorites_list($uid, 'term');
}

/**
 * Gets the favorites for a given user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorites_list($uid, $type = NULL) {
  $favorites = array();
  $args = array();
  $query = db_select('sbac_favorites', 'sf')
    ->fields('sf', array('id', 'uid', 'weight', 'type', 'created'))
    ->condition('sf.uid', $uid);
  if ($type) {
    $query->condition('sf.type', $type);
    if ($type == 'node') {
      $query->innerJoin('node', 'n', 'n.nid = sf.id'); // make sure the node hasn't been deleted
    }
    elseif ($type == 'term') {
      $query->innerJoin('taxonomy_term_data', 'term', 'term.tid = sf.id');
    }
  }
  $result = $query
    ->orderBy('sf.weight', 'ASC')
    ->orderBy('sf.created', 'DESC')
    ->execute();
  foreach ($result as $row) {
    $favorites[] = $row;
  }

  return $favorites;
}

/**
 * Implements hook_module_impelements_alter().
 *
 * @param $implementations
 * @param $hook
 */
function sbac_favorites_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'user_view') {
    $group = $implementations['sbac_favorites'];
    unset($implementations['sbac_favorites']);
    $implementations['sbac_favorites'] = $group;
  }
}

/**
 * Implements hook_user_view().
 *
 * @param $account
 * @param $view_mode
 * @param $langcode
 */
function sbac_favorites_user_view($account, $view_mode, $langcode) {
  // we don't want to add tabs on any other view modes
  if ($view_mode !== 'full') {
    return;
  }

  $output = render(drupal_get_form('sbac_favorites_user_favorites', $account));

  $account->content['sections']['favorites'] = array(
    'title' => t('Favorites'),
    'content' => $output,
    'disabled' => FALSE,
    'class' => 'section-favorites',
    'weight' => -100,
  );
}

/**
 * Displays the user's favorites
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function sbac_favorites_user_favorites($form, &$form_state, $account) {
  $form = array();

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'sbac_favorites') . '/js/sbac_favorites.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'sbac_favorites') . '/css/sbac_favorites.css',
  );

  $form['#tree'] = TRUE;
  $form['tab_container'] = array(
    '#type' => 'vertical_tabs'
  );
  // Resource Tab
  $form['tab_container']['resource_tab'] = array(
    '#type' => 'fieldset',
    '#title' => t('Resources'),
  );
  $form['tab_container']['resource_tab']['content'] = array(
    '#theme' => 'sbac_favorites_resource_tabledrag',
  );
  $fav_resources = sbac_favorites_get_favorite_resource_list($account->uid);
  if (!empty($fav_resources)) {
    foreach ($fav_resources as $favorite) {
      $element = array();
      $resource = node_load($favorite->id);
      $term = taxonomy_term_load($resource->field_focus['und'][0]['tid']);
      switch ($term->name) {
        case 'Combination of Instructional and Professional Learning Resource';
          $type = 'Combination';
          break;
        case 'Professional Learning Resource';
          $type = 'Professional Learning';
          break;
        case 'Instructional Resource';
          $type = 'Instructional';
          break;
      }
      $element['name'] = array(
        '#markup' => l($resource->title, $resource->path['alias']),
      );
      $element['type'] = array(
        '#markup' => $type,
      );
      $element['created'] = array(
        '#markup' => date('M jS g:ia', $favorite->created),
      );
      $element['delete'] = array(
        '#markup' => '<i class="general foundicon-trash" "=""></i><a href="/sbac-favorites-delete-favorite" class="sbac-favorites-delete-favorite" id="' . $resource->nid . '" uid="' . $favorite->uid . '" type="' . $favorite->type . '">Delete</a>',
      );
      $element['weight'] = array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => $favorite->weight,
        '#delta' => 100,
        '#title_display' => 'invisible',
        '#attributes' => array(
          'class' => array('favorite-item-weight')
        )
      );

      $form['tab_container']['resource_tab']['content']['favorites'][$favorite->id . ':' . $favorite->uid . ':' . $favorite->type] = $element;

    }
    $form['tab_container']['resource_tab']['buttons'] = array(
      '#type' => 'container',
    );
    $form['tab_container']['resource_tab']['buttons']['save'] = array(
      '#type' => 'submit',
      '#value' => t('Save Order'),
      '#attributes' => array('id' => 'sbac-favorites-resource-submit'),
      '#name' => 'sbac-favorites-resource-submit'
    );
    $form['tab_container']['resource_tab']['buttons']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('id' => 'sbac-favorites-resource-cancel', 'class' => array('gray')),
      '#name' => 'sbac-favorites-resource-cancel'
    );
  }
  // Forum Tab
  $form['tab_container']['forum_tab'] = array(
    '#type' => 'fieldset',
    '#title' => t('Forums'),
  );
  $form['tab_container']['forum_tab']['content'] = array(
    '#theme' => 'sbac_favorites_forum_tabledrag',
  );
  $fav_forums = sbac_favorites_get_favorite_forum_list($account->uid);
  if (!empty($fav_forums)) {
    foreach ($fav_forums as $favorite) {
      $element = array();
      $forum = taxonomy_term_load($favorite->id);
      $element['name'] = array(
        '#markup' => l($forum->name, 'forums/term/' . $forum->tid),
      );
      $element['created'] = array(
        '#markup' => date('M jS g:ia', $favorite->created),
      );
      $element['delete'] = array(
        '#markup' => '<i class="general foundicon-trash" "=""></i><a href="/sbac-favorites-delete-favorite" class="sbac-favorites-delete-favorite" id="' . $forum->tid . '" uid="' . $favorite->uid . '" type="' . $favorite->type . '">Delete</a>',
      );
      $element['weight'] = array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => $favorite->weight,
        '#delta' => 100,
        '#title_display' => 'invisible',
        '#attributes' => array(
          'class' => array('favorite-item-weight')
        )
      );

      $form['tab_container']['forum_tab']['content']['favorites'][$favorite->id . ':' . $favorite->uid . ':' . $favorite->type] = $element;
    }
    $form['tab_container']['forum_tab']['buttons'] = array(
      '#type' => 'container',
    );
    $form['tab_container']['forum_tab']['buttons']['save'] = array(
      '#type' => 'submit',
      '#value' => t('Save Order'),
      '#attributes' => array('id' => 'sbac-favorites-forum-submit'),
      '#name' => 'sbac-favorites-forum-submit'
    );
    $form['tab_container']['forum_tab']['buttons']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#attributes' => array('id' => 'sbac-favorites-forum-cancel', 'class' => array('gray')),
      '#name' => 'sbac-favorites-forum-cancel'
    );
  }
  return $form;
}

function sbac_favorites_user_favorites_submit($form, &$form_state) {
  $tab = '';
  switch ($form_state['clicked_button']['#attributes']['id']) {
    case 'sbac-favorites-resource-submit':
      $tab = 'resource_tab';
      break;
    case 'sbac-favorites-forum-submit':
      $tab = 'forum_tab';
      break;
  }
  if (!empty($tab)) {
    foreach ($form_state['values']['tab_container'][$tab]['content']['favorites'] as $favorite_id => $item) {
      $identifiers = explode(':', $favorite_id);
      $id = $identifiers[0];
      $uid = $identifiers[1];
      $type = $identifiers[2];
      db_query("UPDATE {sbac_favorites} SET weight = :weight WHERE id = :id AND uid = :uid AND type = :type",
        array(
          ':weight' => $item['weight'],
          ':id' => $id,
          ':uid' => $uid,
          ':type' => $type
        )
      );
    }
  }
  drupal_goto(current_path(), array('fragment' => 'profile-favorites'));
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function sbac_favorites_preprocess_page(&$vars) {
  if (arg(0) == 'digital-library-resources' || arg(0) == 'my-resources') {
    drupal_add_js(drupal_get_path('module', 'sbac_favorites') . '/js/sbac_favorites.js');
    drupal_add_css(drupal_get_path('module', 'sbac_favorites') . '/css/sbac_favorites.css');
  }
}

/**
 * Implements hook_views_api().
 */
function sbac_favorites_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Generate the 'Add to Favorite' link for a content
 *
 * @param $uid
 * @param $id
 * @param $type
 * @return string
 */
function sbac_favorites_get_favorite_link($uid, $id, $type) {
  $favorites_class = 'sbac-favorites-link-no';
  $favorite_text = t('Add to Favorites');
  $favorites = sbac_favorites_get_favorites($uid, $id, $type);
  if ($favorites) {
    $favorites_class = 'sbac-favorites-link-yes';
    $favorite_text = t('Unfavorite');
  }

  drupal_add_js(drupal_get_path("module", "sbac_favorites") . "/js/sbac_favorites.js");
  $favorite_link = l($favorite_text, $_GET['q'], array(
    'attributes' => array(
      'class' => array(
        'sbac-favorites-link',
        $favorites_class
      ),
      'id' => $id,
      'uid' => $uid,
      'type' => $type,
    )
  ));
  return $favorite_link;
}

/**
 * Default theme implementation
 *
 * @param $vars
 * @return string
 */
function theme_sbac_favorites_resource_tabledrag($vars) {
  $form = $vars['form'];
  $rows = array();
  $weight_class = 'favorite-item-weight';
  foreach (element_children($form['favorites']) as $key) {
    $element = & $form['favorites'][$key];
    $element['weight']['#attributes']['class'] = array($weight_class);

    $row = array('data' => array());
    $row['data']['name'] = drupal_render($element['name']);
    $row['data']['type'] = drupal_render($element['type']);
    $row['data']['created'] = drupal_render($element['created']);
    $row['data']['delete'] = drupal_render($element['delete']);
    $row['data']['weight'] = drupal_render($element['weight']);

    $rows[$key] = $row;
    $rows[$key]['class'] = array('draggable');
  }
  if (!empty($rows)) {
    $table_id = 'sbac-favorites-resource-table-drag-drop';
    $header = array(
      t('Resource Name'),
      t('Resource Type'),
      t('Date Added'),
      t(''),
      t(''),
    );
    $output = theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array('id' => $table_id, 'class' => array('width-auto'))
    ));
    $output .= drupal_render_children($form);
    drupal_add_tabledrag($table_id, 'order', 'sibling', $weight_class);
  }
  else {
    $output = theme('sbac_favorites_no_favorites_resource');
  }
  return $output;
}

/**
 * Default theme implementation
 *
 * @param $vars
 * @return string
 */
function theme_sbac_favorites_forum_tabledrag($vars) {
  $form = $vars['form'];
  $rows = array();
  $weight_class = 'favorite-forum-weight';
  foreach (element_children($form['favorites']) as $key) {
    $element = & $form['favorites'][$key];
    $element['weight']['#attributes']['class'] = array($weight_class);

    $row = array('data' => array());
    $row['data']['name'] = drupal_render($element['name']);
    $row['data']['created'] = drupal_render($element['created']);
    $row['data']['delete'] = drupal_render($element['delete']);
    $row['data']['weight'] = drupal_render($element['weight']);

    $rows[$key] = $row;
    $rows[$key]['class'] = array('draggable');
  }
  if (!empty($rows)) {
    $table_id = 'sbac-favorites-forum-table-drag-drop';
    $header = array(
      t('Forum Name'),
      t('Date Added'),
      t(''),
      t(''),
    );
    $output = theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array('id' => $table_id, 'class' => array('width-auto'))
    ));

    $output .= drupal_render_children($form);

    drupal_add_tabledrag($table_id, 'order', 'sibling', $weight_class);
  }
  else {
    $output = theme('sbac_favorites_no_favorites_forum');
  }
  return $output;
}