<?php

/**
 * Implements hook_menu().
 *
 * @return array
 */
function sbac_favorites_menu() {
  $items = array();

  $items['sbac-favorites-click'] = array(
    'title' => 'SBAC Favorites',
    'page callback' => 'sbac_favorites_ajax_click',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['sbac-favorites-delete-favorite'] = array(
    'title' => 'SBAC Delete Favorites',
    'page callback' => 'sbac_favorites_ajax_delete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return mixed
 */
function sbac_favorites_theme($existing, $type, $theme, $path) {
  $items['sbac_favorites_no_favorites'] = array(
    'path' => drupal_get_path('module', 'sbac_favorites') . '/templates',
    'template' => 'no-favorites',
  );

  $items['sbac_favorites_user_list'] = array(
    'render element' => 'form',
  );

  return $items;
}

/**
 * Get the entity being favorited according to their type
 *
 * @param $id
 * @param $type
 * @return bool|mixed|null
 */
function sbac_favorites_get_entity_by_type($id, $type) {
  $entity = NULL;
  switch ($type) {
    case 'node':
      $entity = node_load($id);
      break;
    case 'term':
      $entity = taxonomy_term_load($id);
      break;
    case 'user':
      $entity = user_load($id);
      break;
    case 'comment':
      $entity = comment_load($id);
      break;
    case 'file':
      $entity = file_load($id);
      break;
  }
  return $entity;
}

/**
 * Adds or deletes the entry from the custom table.
 */
function sbac_favorites_ajax_click() {
  if (!$_POST['id'] || !$_POST['uid'] || !$_POST['type']) {
    exit;
  }

  $id = check_plain($_POST['id']);
  $type = check_plain($_POST['type']);
  $entity = sbac_favorites_get_entity_by_type($id, $type);
  $account = user_load($_POST['uid']);
  $is_favorite = $_POST['is_favorite'];

  if (!empty($entity) && $account) {
    // if is_favorite is false, that means, the user wants to add this to his/her favorites.
    if (!$is_favorite) {
      $obj = new stdClass();
      $obj->id = $id;
      $obj->uid = $account->uid;
      $obj->type = $type;
      $obj->weight = -1000;
      $obj->created = time();
      drupal_write_record('sbac_favorites', $obj);
    }
    else {
      db_delete('sbac_favorites')
        ->condition('id', $id)
        ->condition('uid', $account->uid)
        ->condition('type', $type)
        ->execute();
    }
    $output = array();
    print drupal_json_encode($output);
    exit;
  }
  else {
    exit;
  }
}

/**
 * Deletes the favorite entry from the database.
 *
 * @return string
 */
function sbac_favorites_ajax_delete() {
  if (!$_POST['id'] || !$_POST['uid'] || !$_POST['type']) {
    return;
  }

  db_delete('sbac_favorites')
    ->condition('id', $_POST['id'])
    ->condition('uid', $_POST['uid'])
    ->condition('type', $_POST['type'])
    ->execute();
  $count = sbac_favorites_get_count($_POST['uid']);
  $output = array();
  if ($count) {
    $output['total'] = $count;
  }
  else {
    $output['total'] = 0;
    $output['no_results'] = theme('sbac_favorites_no_favorites');
  }
  print drupal_json_encode($output);
  exit;
}

/**
 * Returns the count of favorites for the user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_count($uid) {
  $favorites_count = array();
  $sql = "SELECT count(*) AS count FROM {sbac_favorites} sf WHERE uid = :uid";
  $result = db_query($sql, array(':uid' => $uid))->fetchObject();
  if ($result) {
    $favorites_count = $result->count;
  }
  return $favorites_count;
}

/**
 * Gets the favorites for a given user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorites($uid, $id = FALSE, $type = 'node') {
  $favorites = array();
  $query = db_select('sbac_favorites','sf')
    ->fields('sf', array('id', 'uid','type','weight','created'))
    ->condition('sf.uid', $uid)
    ->condition('sf.type',$type);
  if($id){
    $query->condition('sf.id',$id);
  }
  $result = $query->orderBy('sf.created', 'DESC')
    ->execute();
  foreach ($result as $row) {
    $favorites[] = $row;
  }
  return $favorites;
}

/**
 * Gets the favorites for a given user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorites_list($uid) {
  $favorites = array();
  $args = array();
  // get where weight = -1000;
  $sql = "SELECT sf.id AS id, sf.uid AS uid, sf.weight AS weight, sf.type AS type, sf.created AS created
          FROM {sbac_favorites} sf
          WHERE sf.uid = :uid AND sf.weight = :weight
          ORDER BY sf.created DESC";
  $args[':uid'] = $uid;
  $args[':weight'] = -1000;
  $result = db_query($sql, $args);
  $count = 0;
  foreach ($result as $row) {
    $favorites[$count] = $row;
    $count++;
  }

  // get where weight is not -1000
  $sql = "SELECT sf.id AS id, sf.uid AS uid, sf.weight AS weight, sf.type AS type, sf.created AS created
          FROM {sbac_favorites} sf
          WHERE sf.uid = :uid AND sf.weight <> :weight
          ORDER BY sf.weight";
  $args[':uid'] = $uid;
  $args[':weight'] = -1000;
  $result = db_query($sql, $args);
  foreach ($result as $row) {
    $favorites[$count] = $row;
    $count++;
  }

  return $favorites;
}

/**
 * Implements hook_module_impelements_alter().
 *
 * @param $implementations
 * @param $hook
 */
function sbac_favorites_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'user_view') {
    $group = $implementations['sbac_favorites'];
    unset($implementations['sbac_favorites']);
    $implementations['sbac_favorites'] = $group;
  }
}

/**
 * Implements hook_user_view().
 *
 * @param $account
 * @param $view_mode
 * @param $langcode
 */
function sbac_favorites_user_view($account, $view_mode, $langcode) {
  // we don't want to add tabs on any other view modes
  if ($view_mode !== 'full') {
    return;
  }

  $favorites = sbac_favorites_get_favorites_list($account->uid);
  $output = sbac_favorites_favorites_table($favorites);

  $favorites_content  = '<div id="favorites">';
  if ($favorites) {
    $favorites_content .= '<div class="favorites-helpful-info">';
    $favorites_content .= 'Drag and drop items in the list to reorder your favorites';
    $favorites_content .= '</div>';
  }
  $favorites_content .= '<div id="favorites-table">';
  $favorites_content .= $output;
  $favorites_content .= '</div>';
  $favorites_content .= '</div>';

  $account->content['sections']['favorites'] = array(
    'title' => t('Favorites'),
    'content' => $favorites_content,
    'disabled' => FALSE,
    'class' => 'section-favorites',
    'weight' => -100,
  );
}

/**
 * Builds the favorites output.
 *
 * @param $favorites
 * @return string
 */
function sbac_favorites_favorites_table($favorites) {
  if ($favorites) {
    $form = drupal_get_form('sbac_favorites_user_list', $favorites);
    $output = drupal_render($form);
  }
  else {
    $output = theme('sbac_favorites_no_favorites');
  }

  return $output;
}

/**
 * @param $form
 * @param $form_state
 */
function sbac_favorites_user_list($form, &$form_state, $favorites) {
  $form['#theme'] = 'sbac_favorites_user_list';

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'sbac_favorites') . '/js/sbac_favorites.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module','sbac_favorites').'/css/sbac_favorites.css',
  );

  $form['favorites']['#tree'] = TRUE;

  foreach ($favorites as $favorite) {
    switch($favorite->type){
      case 'node':
        $resource = node_load($favorite->id);
        $element = array();

        $element['name'] = array(
          '#markup' => l($resource->title, $resource->path['alias']),
        );

        $term = taxonomy_term_load($resource->field_focus['und'][0]['tid']);
        $type_value = '';
        switch ($term->name) {
          case 'Combination of Instructional and Professional Learning Resource';
            $type_value = 'Combination';
            break;
          case 'Professional Learning Resource';
            $type_value = 'Professional Learning';
            break;
          case 'Instructional Resource';
            $type_value = 'Instructional';
            break;
        }
        $element['type'] = array(
          '#markup' => $type_value,
        );
        $element['created'] = array(
          '#markup' => date('M jS g:ia', $favorite->created),
        );
        $element['delete'] = array(
          '#markup' => '<i class="general foundicon-trash" "=""></i><a href="/sbac-favorites-delete-favorite" class="sbac-favorites-delete-favorite" id="' . $resource->id . '" uid="' . $favorite->uid . '">Delete</a>',
        );

        $element['weight'] = array(
          '#type' => 'weight',
          '#title' => t('Weight'),
          '#default_value' => $favorite->weight,
          '#delta' => 100,
          '#title_display' => 'invisible',
        );

        $form['favorites'][$favorite->id . ':' . $favorite->uid . ':' . $favorite->type] = $element;
        break;
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Order'),
    '#attributes' => array('id' => 'sbac-favorites-submit'),
  );

	$form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#attributes' => array('id' => 'sbac-favorites-cancel'),
  );

  return $form;
}

/**
 * Submit handler, saves the new weight.
 *
 * @param $form
 * @param $form_state
 */
function sbac_favorites_user_list_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == 'Cancel') {
    //do nothing, just redirect.
  }
  else {
    foreach ($form_state['values']['favorites'] as $favorite_id => $item) {
      $identifiers = explode(':', $favorite_id);
      $id = $identifiers[0];
      $uid = $identifiers[1];
      $type = $identifiers[2];
      db_query("UPDATE {sbac_favorites} SET weight = :weight WHERE id = :id AND uid = :uid AND type = :type",
        array(
          ':weight' => $item['weight'],
          ':id' => $id,
          ':uid' => $uid,
          ':type' => $type)
      );
    }
  }
  drupal_custom_goto('user#profile-favorites');
}

/**
 * Themes the table.
 *
 * @param $variables
 * @return string
 */
function theme_sbac_favorites_user_list($variables) {
  $form = $variables['form'];

  $header = array(
    t('Resource Name'),
    t('Resource Type'),
    t('Date Added'),
    t(''),
    t('Weight'),
  );

  $rows = array();
  foreach (element_children($form['favorites']) as $key) {
    $element = &$form['favorites'][$key];
    $element['weight']['#attributes']['class'] = array('favorite-item-weight');

    $row = array('data' => array());
    $row['data']['name'] = drupal_render($element['name']);
    $row['data']['type'] = drupal_render($element['type']);
    $row['data']['created'] = drupal_render($element['created']);
    $row['data']['delete'] = drupal_render($element['delete']);
    $row['data']['weight'] = drupal_render($element['weight']);

    $rows[$key] = $row;
    $rows[$key]['class'] = array('draggable');
  }

  $table_id = 'sbac-favorites-table-drag-drop';
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id, 'class' => array('width-auto'))));

  $output .= drupal_render_children($form);

  drupal_add_tabledrag($table_id, 'order', 'sibling', 'favorite-item-weight');

  return $output;
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function sbac_favorites_preprocess_page(&$vars) {
  if (arg(0) == 'digital-library-resources' || arg(0) == 'my-resources') {
    drupal_add_js(drupal_get_path('module', 'sbac_favorites') . '/js/sbac_favorites.js');
    drupal_add_css(drupal_get_path('module', 'sbac_favorites') . '/css/sbac_favorites.css');
  }
}

/**
 * Implements hook_views_api().
 */
function sbac_favorites_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Generate the 'Add to Favorite' link for a content
 *
 * @param $uid
 * @param $id
 * @param $type
 * @return string
 */
function sbac_favorites_get_favorite_link($uid, $id, $type){
  $favorites_class = 'sbac-favorites-link-no';
  $favorite_text = t('Add to Favorites');
  $favorites = sbac_favorites_get_favorites($uid, $id, $type);
  if ($favorites) {
    $favorites_class = 'sbac-favorites-link-yes';
    $favorite_text = t('Unfavorite');
  }

  drupal_add_js(drupal_get_path("module", "sbac_favorites") . "/js/sbac_favorites.js");
  $favorite_link = l($favorite_text, $_GET['q'], array(
    'attributes' => array(
      'class' => array(
        'sbac-favorites-link',
        $favorites_class
      ),
      'id' => $id,
      'uid' => $uid,
      'type' => $type,
    )
  ));
  return $favorite_link;
}