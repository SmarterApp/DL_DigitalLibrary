<?php

/**
 * Implements hook_menu().
 *
 * @return array
 */
function sbac_favorites_menu() {
  $items = array();

  $items['sbac-favorites-click'] = array(
    'title' => 'SBAC Favorites',
    'page callback' => 'sbac_favorites_ajax_click',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['sbac-favorites-delete-favorite'] = array(
    'title' => 'SBAC Delete Favorites',
    'page callback' => 'sbac_favorites_ajax_delete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return mixed
 */
function sbac_favorites_theme($existing, $type, $theme, $path) {
  $items['sbac_favorites_no_favorites'] = array(
    'path' => drupal_get_path('module', 'sbac_favorites') . '/templates',
    'template' => 'no-favorites',
  );

  $items['sbac_favorites_user_list'] = array(
    'render element' => 'form',
  );

  return $items;
}

/**
 * Adds or deletes the entry from the custom table.
 */
function sbac_favorites_ajax_click() {
  if (!$_POST['nid'] || !$_POST['uid']) {
    exit;
  }

  $node = node_load($_POST['nid']);
  $account = user_load($_POST['uid']);
  $is_favorite = $_POST['is_favorite'];

  if ($node && $account) {
    // if is_favorite is false, that means, the user wants to add this to his/her favorites.
    if (!$is_favorite) {
      $entity = new stdClass();
      $entity->nid = $node->nid;
      $entity->uid = $account->uid;
      $entity->weight = 0;
      $entity->created = time();
      drupal_write_record('sbac_favorites', $entity);
    }
    else {
      db_delete('sbac_favorites')->condition('nid', $node->nid)->condition('uid', $account->uid)->execute();
    }
    $output = array();
    print drupal_json_encode($output);
    exit;
  }
  else {
    exit;
  }
}

/**
 * Deletes the favorite entry from the database.
 *
 * @return string
 */
function sbac_favorites_ajax_delete() {
  if (!$_POST['nid'] || !$_POST['uid']) {
    return;
  }

  db_delete('sbac_favorites')->condition('nid', $_POST['nid'])->condition('uid', $_POST['uid'])->execute();
  $count = sbac_favorites_get_count($_POST['uid']);
  $output = array();
  if ($count) {
    $output['total'] = $count;
  }
  else {
    $output['total'] = 0;
    $output['no_results'] = theme('sbac_favorites_no_favorites');
  }
  print drupal_json_encode($output);
  exit;
}

/**
 * Returns the count of favorites for the user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_count($uid) {
  $favorites_count = array();
  $sql = "SELECT count(*) AS count FROM {sbac_favorites} sf WHERE uid = :uid";
  $result = db_query($sql, array(':uid' => $uid))->fetchObject();
  if ($result) {
    $favorites_count = $result->count;
  }
  return $favorites_count;
}

/**
 * Gets the favorites for a given user.
 *
 * @param $uid
 * @return array
 */
function sbac_favorites_get_favorites($uid) {
  $favorites = array();
  $sql = "SELECT sf.nid AS nid, sf.uid AS uid, sf.weight AS weight, sf.created AS created
          FROM {sbac_favorites} sf
          WHERE sf.uid = :uid
          ORDER BY sf.weight, sf.created";
  $result = db_query($sql, array(':uid' => $uid));
  foreach ($result as $row) {
    $favorites[] = $row;
  }
  return $favorites;
}

/**
 * Implements hook_module_impelements_alter().
 *
 * @param $implementations
 * @param $hook
 */
function sbac_favorites_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'user_view') {
    $group = $implementations['sbac_favorites'];
    unset($implementations['sbac_favorites']);
    $implementations['sbac_favorites'] = $group;
  }
}

/**
 * Implements hook_user_view().
 *
 * @param $account
 * @param $view_mode
 * @param $langcode
 */
function sbac_favorites_user_view($account, $view_mode, $langcode) {
  // we don't want to add tabs on any other view modes
  if ($view_mode !== 'full') {
    return;
  }

  $favorites = sbac_favorites_get_favorites($account->uid);
  $output = sbac_favorites_favorites_table($favorites);

  $favorites_content  = '<div id="favorites">';
  if ($favorites) {
    $favorites_content .= '<div class="favorites-helpful-info">';
    $favorites_content .= 'Drag and drop items in the list to reorder your favorites';
    $favorites_content .= '</div>';
  }
  $favorites_content .= '<div id="favorites-table">';
  $favorites_content .= $output;
  $favorites_content .= '</div>';
  $favorites_content .= '</div>';

  $account->content['sections']['favorites'] = array(
    'title' => t('Favorites'),
    'content' => $favorites_content,
    'disabled' => FALSE,
    'class' => 'section-favorites',
    'weight' => -100,
  );
}

/**
 * Builds the favorites output.
 *
 * @param $favorites
 * @return string
 */
function sbac_favorites_favorites_table($favorites) {
  if ($favorites) {
    $form = drupal_get_form('sbac_favorites_user_list', $favorites);
    $output = drupal_render($form);
  }
  else {
    $output = theme('sbac_favorites_no_favorites');
  }

  return $output;
}

/**
 * @param $form
 * @param $form_state
 */
function sbac_favorites_user_list($form, &$form_state, $favorites) {
  global $user;
  $form['#theme'] = 'sbac_favorites_user_list';

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'sbac_favorites') . '/js/sbac_favorites.js',
  );
  $form['#attached']['css'] = array(
    drupal_get_path('module','sbac_favorites').'/css/sbac_favorites.css',
  );

  foreach ($favorites as $favorite) {
    $resource = node_load($favorite->nid);
    $element = array();

    $element['name'] = array(
      '#markup' => l($resource->title, $resource->path['alias']),
    );

    $term = taxonomy_term_load($resource->field_focus['und'][0]['tid']);
    $type_value = '';
    switch ($term->name) {
      case 'Combination of Instructional and Professional Learning Resource';
        $type_value = 'Combination';
        break;
      case 'Professional Learning Resource';
        $type_value = 'Professional Learning';
        break;
      case 'Instructional Resource';
        $type_value = 'Instructional';
        break;
    }
    $element['type'] = array(
      '#markup' => $type_value,
    );
    $element['created'] = array(
      '#markup' => date('M jS g:ia', $favorite->created),
    );
    $element['delete'] = array(
      '#markup' => '<a href="/sbac-favorites-delete-favorite" class="sbac-favorites-delete-favorite" nid="' . $resource->nid . '" uid="' . $user->uid . '">Delete</a>',
    );

    $element['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#default_value' => $favorite->weight,
      '#delta' => 100,
      '#title_display' => 'invisible',
    );

    $form['favorites'][] = $element;
  }

  $form['favorites']['#tree'] = TRUE;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#attributes' => array('id' => 'sbac-favorites-submit'),
  );

  return $form;
}

function sbac_favorites_user_list_submit($form, &$form_state) {
  $var = '';
}

function theme_sbac_favorites_user_list($variables) {
  $form = $variables['form'];

  $header = array(
    t('Resource Name'),
    t('Resource Type'),
    t('Date Added'),
    t(''),
    t('Weight'),
  );

  $rows = array();
  foreach (element_children($form['favorites']) as $key) {
    $element = &$form['favorites'][$key];
    $element['weight']['#attributes']['class'] = array('favorite-item-weight');

    $row = array('data' => array());
    $row['data']['name'] = drupal_render($element['name']);
    $row['data']['type'] = drupal_render($element['type']);
    $row['data']['created'] = drupal_render($element['created']);
    $row['data']['delete'] = drupal_render($element['delete']);
    $row['data']['weight'] = drupal_render($element['weight']);

    $rows[$key] = $row;
    $rows[$key]['class'] = array('draggable');
  }

  $table_id = 'sbac-favorites-table-drag-drop';
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id, 'class' => array('width-auto'))));

  $output .= drupal_render_children($form);

  drupal_add_tabledrag($table_id, 'order', 'sibling', 'favorite-item-weight');

  return $output;
}

/**
 * Implementation of hook_preprocess_page()
 *
 * @param $vars
 */
function sbac_favorites_preprocess_page(&$vars) {
  if (arg(0) == 'digital-library-resources' || arg(0) == 'my-resources') {
    drupal_add_js(drupal_get_path('module', 'sbac_favorites') . '/js/sbac_favorites.js');
  }
}

/**
 * Implements hook_views_api().
 */
function sbac_favorites_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Implements hook_views_data().
 *
 * @return mixed
 */
function sbac_favorites_views_data() {
  $data['sbac_favorites']['table']['group'] = t('SBAC Favorites');
  // Base table.
  $data['sbac_favorites']['table']['base'] = array(
    'field' => 'nid', // This is the identifier field for the view.
    'title' => t('SBAC Favorites'),
    'help' => t('Custom data for user favorites.'),
    'weight' => -10,
  );
  // Join.
  $data['sbac_favorites']['table']['join'] = array(
    'node' => array(
      'left_field' => 'nid',
      'field' => 'nid',
    ),
    'users' => array(
      'left_field' => 'uid',
      'field' => 'uid',
    ),
  );


  // Node ID table field.
  $data['sbac_favorites']['nid'] = array(
    'title' => t('Resource NID'),
    'help' => t('The resource nid.'),
    'relationship' => array(
      'base' => 'node', // The name of the table to join with.
      'base field' => 'nid', // The name of the field on the joined table.
      'handler' => 'views_handler_relationship',
      'label' => t('Default label for the relationship'),
      'title' => t('Title shown when adding the relationship'),
      'help' => t('More information on this relationship'),
    ),
  );

  // User ID field.
  $data['sbac_favorites']['uid'] = array(
    'title' => t('User ID'),
    'help' => t('User ID.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  // Weight fields
  $data['sbac_favorites']['weight'] = array(
    'title' => t('Weight'),
    'help' => t('Weight'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  return $data;
}
