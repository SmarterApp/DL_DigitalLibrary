<?php

/**
 * @file.
 * Module to handle all Forum (Collaboration) related functionality.
 *
 * Provides:
 *  - Provides UI for flagging resources on node view
 *  -
 */

include_once 'sbac_forum.features.inc';
include_once 'includes/sbac_forum.component_alter.inc';
include_once 'includes/sbac_forum.api.inc';
include_once 'includes/sbac_forum.ajax.inc';
include_once 'includes/sbac_forum.solr.inc';

define('SBAC_FORUM_CATEGORY_FILTERS', 'sbac-forum-category-filters');
define('SBAC_FORUM_MY_FORUM_CATEGORY_FILTERS', 'sbac-forum-my-forum-category-filters');
define('SBAC_FORUM_RESOURCE_FORUM_CATEGORY_FILTERS', 'sbac-forum-resource-forum-category-filters');
define('SBAC_FORUM_TOPIC_FORUM_CATEGORY_FILTERS', 'sbac-forum-topic-forum-category-filters');

define('SBAC_FORUM_ALL_FORUM_SORTS', 'sbac-all-forum-sorts');
define('SBAC_FORUM_MY_FORUM_SORTS', 'sbac-my-forum-sorts');
define('SBAC_FORUM_RESOURCE_FORUM_SORTS', 'sbac-resource-forum-sorts');
define('SBAC_FORUM_TOPIC_FORUM_SORTS', 'sbac-topic-forum-sorts');
define('SBAC_FORUM_TOPIC_COMMENT_SORTS', 'sbac-topic-comment-sorts');

define('SBAC_FORUM_SUBNAV_ACTIVE', 'sbac-forum-sub-nav-active');
define('SBAC_FORUM_SUBNAV_ALL', 'all-forums');
define('SBAC_FORUM_SUBNAV_OWN', 'my-forum');
define('SBAC_FORUM_SUBNAV_RESOURCE', 'resource-forums');
define('SBAC_FORUM_SUBNAV_TOPIC', 'topic-forums');
define('SBAC_FORUM_SUBNAV_KEYWORD', 'keyword-search');

define('SBAC_FORUM_FILTERS_CLOSED', 'sbac-forum-filters-closed');
define('SBAC_FORUM_MY_FORUM_FILTERS_CLOSED', 'sbac-forum-my-forum-filters-closed');
define('SBAC_FORUM_RESOURCE_FORUM_FILTERS_CLOSED', 'sbac-forum-resource-forum-filters-closed');
define('SBAC_FORUM_TOPIC_FORUM_FILTERS_CLOSED', 'sbac-forum-topic-forum-filters-closed');

define('SBAC_FORUM_FILTER_RESULTS_COUNTER', 'sbac-forum-filters-result-counter-values');

define('SBAC_FORUM_MEMBER_LIST_CACHE_ENTRY_NAME', 'forum-member-list-');
define('SBAC_FORUM_SHOW_JOIN_MESSAGE', 'sbac-forum-new-join');
define('SBAC_FORUM_USER_DATA_REMOVED_LIST_VAR_NAME', 'sbac_forum_user_data_removed_list');
define('SBAC_FORUM_SHOW_NEW_COMMENT_MESSAGE', 'sbac-forum-new-comment');

define('SBAC_FORUM_CUSTOM_SOLR_FILTER_FIELD_ROLE', 'im_forum_access__custom__role');
define('SBAC_FORUM_CUSTOM_SOLR_FILTER_FIELD_STATE', 'im_forum_access__custom__state');
define('SBAC_FORUM_CUSTOM_SOLR_FILTER_FIELD_ROLE_OPEN', 'im_forum_access__custom__role_open');
define('SBAC_FORUM_CUSTOM_SOLR_FILTER_FIELD_STATE_OPEN', 'im_forum_access__custom__state_open');

define('SBAC_FORUM_VOCAB_NAME', 'forum');

define('SBAC_FORUM_DEFAULT_FORUM_1_TITLE', 'Implementation');
define('SBAC_FORUM_DEFAULT_FORUM_1_DESC', 'Have you used this resource?  Please join the discussion to share how you have implemented this resource so that other educators can benefit from your experience.');
define('SBAC_FORUM_DEFAULT_FORUM_2_TITLE', 'Suggested Modifications to Support a Range of Learners');
define('SBAC_FORUM_DEFAULT_FORUM_2_DESC', 'How have you modified this resource to differentiate for a range of learners?  Please share your ideas.');

define('SBAC_FORUM_FILTER_DISTINCTION_CATEGORY', 'distinctions');
define('SBAC_FORUM_FILTER_DISTINCTION_VID', 'distinctions');
define('SBAC_FORUM_FILTER_DISTINCTION_FILTER_DISTINCTION_TID', 'Posted with Distinction');
define('SBAC_FORUM_FILTER_DISTINCTION_FILTER_FAVORITED_TID', 'Favorite');
define('SBAC_FORUM_FILTER_DISTINCTION_FILTER_FAVORITED_VIEWS_FILTER', 'favorite');
define('SBAC_FORUM_FILTER_DISTINCTION_FILTER_DISTINCTION_VIEWS_FILTER', 'distinction');

/**
 * =============================================================================
 *
 *      Hooks
 *
 * =============================================================================
 */

/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_forum_update_projects_alter(&$projects) {
  unset($projects['sbac_forum']);
}

/**
 * Implements hook_menu().
 */
function sbac_forum_menu() {
  $items['forums'] = array(
    'title' => 'Forums',
    'file' => 'includes/sbac_forum.pages.inc',
    'page callback' => 'sbac_forum_main_landing_page',
    'access callback' => '_sbac_forum_user_access',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'weight' => -10,
  );

  // Create own menu callback for adding a term. Dont need to mess with menu_alter.
  $items['forums/%taxonomy_vocabulary_machine_name/add'] = array(
    'title' => 'Start A Forum',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_form_term', array(), 1),
    'access callback' => '_sbac_forum_add_forum_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file path' => drupal_get_path('module', 'taxonomy'),
    'file' => 'taxonomy.admin.inc',
  );

  $items['forums/term/%taxonomy_term'] = array(
    'title' => 'Taxonomy term',
    'title callback' => 'taxonomy_term_title',
    'title arguments' => array(2),
    'page callback' => 'sbac_forum_view_forum_page',
    'page arguments' => array(2),
    'access callback' => '_sbac_forum_view_forum_user_access',
    'access arguments' => array(2),
    'file' => 'includes/sbac_forum.pages.inc',
  );

  $items['forums-main-page/reset/%/%'] = array(
    'title' => 'Forums',
    'file' => 'includes/sbac_forum.pages.inc',
    'page callback' => 'sbac_forum_main_landing_page_reset',
    'page arguments' => array(2, 3),
    'access callback' => '_sbac_forum_user_access',
    'type' => MENU_CALLBACK,
  );

  $items['keyword-search-redirect/%'] = array(
    'title' => 'Forums keyword search traffic control',
    'file' => 'includes/sbac_forum.pages.inc',
    'page callback' => 'sbac_forum_keyword_search_redirect',
    'page arguments' => array(1),
    'access callback' => '_sbac_forum_user_access',
    'type' => MENU_CALLBACK,
  );

  // ----- Modals -----

  $items['sbac-forum/%ctools_js/forum-delete/%taxonomy_term'] = array(
    'page callback' => 'sbac_forum__ajax__delete_forum_modal_callback',
    'page arguments' => array(1, 3),
    'access callback' => '_sbac_forum_delete_forum_user_access',
    'access arguments' => array(3),
  );

  $items['sbac-forum/%ctools_js/forum-leave/%taxonomy_term'] = array(
    'page callback' => 'sbac_forum__ajax__leave_forum_modal_callback',
    'page arguments' => array(1, 3),
    'access arguments' => array('access content'),
  );

  $items['sbac-forum/%ctools_js/%taxonomy_term/members-edit/%/remove'] = array(
    'page callback' => 'sbac_forum__ajax__remove_member_modal_callback',
    'page arguments' => array(1, 2, 4),
    'access arguments' => array('access content'),
    'access callback' => '_sbac_forum_remove_members_user_access',
    'access arguments' => array(2, 4),
  );

  $items['sbac-forum/%ctools_js/%taxonomy_term/members-edit/%/restore'] = array(
    'page callback' => 'sbac_forum__ajax__restore_member_modal_callback',
    'page arguments' => array(1, 2, 4),
    'access arguments' => array('access content'),
    'access callback' => '_sbac_forum_restore_members_user_access',
    'access arguments' => array(2, 4),
  );

  $items['sbac-forum/%ctools_js/topic-delete/%taxonomy_term/%node'] = array(
    'page callback' => 'sbac_forum__ajax__delete_topic_modal_callback',
    'page arguments' => array(1, 3, 4),
    'access callback' => '_sbac_forum_delete_topic_user_access',
    'access arguments' => array(3, 4),
  );

  $items['sbac-forum/%ctools_js/custom/comment-delete/%'] = array(
    'page callback' => 'sbac_forum__ajax__delete_comment_form_modal_callback',
    'page arguments' => array(1, 4),
    'access callback' => '_sbac_forum_delete_comment_user_access',
    'access arguments' => array(4),
  );

  // ----- Ajax -------

  $items['sbac-forum/custom/comment-reply/%node/%'] = array(
    'page callback' => 'sbac_forum__ajax__inline_comment_form_modal_callback',
    'page arguments' => array(3, 4),
    'access callback' => '_sbac_forum_add_comment_user_access',
    'access arguments' => array(3, 4),
  );

  $items['sbac-forum/recommend'] = array(
    'title' => 'SBAC Forum',
    'page callback' => 'sbac_forum_recommend_ajax_click',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['sbac-forum/go-to-thread/%/%'] = array(
    'title' => 'Go to thread',
    'page callback' => 'sbac_forum_go_to_thread',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['sbac-forum/load-more'] = array(
    'title' => 'Load More Forum Data',
    'page callback' => 'sbac_forum_load_more_ajax',
    'access arguments' => array('access content'),
    'file' => 'includes/sbac_forum.pages.inc',
  );

  return $items;
}

/**
 * Access callback for Forums page.
 *
 * @return Boolean TRUE/FALSE if user has access to view this page.
 */
function _sbac_forum_user_access() {
  global $user;
  $access = FALSE;
  if (!empty($user->uid)) {
    $access = TRUE;
  }
  return $access;
}

/**
 * Access callback for Add Forum page.
 *
 * @return Boolean TRUE/FALSE if user has access to add a forum.
 */
function _sbac_forum_add_forum_user_access($vocabulary) {
  global $user;
  $access = FALSE;

  // If user is trying to url hack to add terms to other vocabs,
  //   return false immediately.
  if ($vocabulary->machine_name != 'forum') {
    return $access;
  }

  // Anon users should not have access.
  if (!empty($user->uid)) {
    // Facilitators or users with "administer taxonomy" perms can add forums
    if (in_array('facilitator', $user->roles) ||
      user_access('administer taxonomy')
    ) {
      $access = TRUE;
    }
  }
  return $access;
}

/**
 * Access callback for Forum View page.
 *
 * @return Boolean TRUE/FALSE if user has access to view a forum.
 */
function _sbac_forum_view_forum_user_access($term) {
  global $user;

  if ($user->uid == 1) { // Allow superadmin bypass
    return TRUE;
  }
  if (sbac_central_user_has_role(array(SBAC_RESOURCE_FACILITATOR_ROLE, SBAC_RESOURCE_ADMINISTRATOR_ROLE))) {
    return TRUE;
  }

  if ($user->uid == 0) { // Anon users have no access.
    return FALSE;
  }

  $membership_status = sbac_forum__api__check_user_is_forum_member($term->tid, $user->uid);
  if ($membership_status === 'removed') { // Removed users can no longer see forum.
    return FALSE;
  }

  $access = sbac_forum__api__check_forum_view_access($user, $term);
  return $access;
}

/**
 * Access callback for Forum Delete page.
 *
 * @return Boolean TRUE/FALSE if user has access to view a forum.
 */
function _sbac_forum_delete_forum_user_access($term) {
  global $user;
  $access = FALSE;

  if ($term->vocabulary_machine_name != 'forum') {
    return $access; // Someone trying to delete a taxonomy term not from forums
  }

  $vocab_id = $term->vid;
  $delete_perm = 'delete terms in ' . $vocab_id;
  $access = user_access($delete_perm);
  return $access;
}

/**
 * Access callback for Topic Delete page.
 *
 * @return Boolean TRUE/FALSE if user has access to delete a topic.
 */
function _sbac_forum_delete_topic_user_access($term, $topic) {
  global $user;
  $access = FALSE;

  if ($term->vocabulary_machine_name != 'forum') {
    return $access; // Someone trying to delete something related to a taxonomy term not from forums
  }

  $access = node_access('delete', $topic);
  return $access;
}

/**
 * Access callback for Modal URL for removing members callback.
 *
 * @return Boolean TRUE/FALSE if user has access to remove a member from a forum.
 */
function _sbac_forum_remove_members_user_access($term, $uid_to_remove) {
  global $user;
  $access = FALSE;

  if ($term->vocabulary_machine_name != 'forum') {
    return $access; // Someone trying to delete a taxonomy term not from forums
  }

  if (!in_array('facilitator', $user->roles)) { // Only faci can remove users.
    return $access;
  }

  $is_member = sbac_forum__api__check_user_is_forum_member($term->tid, $uid_to_remove);
  if ($is_member === TRUE) { // User to remove is a member of this current forum.
    $access = TRUE;
  }

  return $access;
}

/**
 * Access callback for Modal URL for re-adding members callback.
 *
 * @return Boolean TRUE/FALSE if user has access to remove a member from a forum.
 */
function _sbac_forum_restore_members_user_access($term, $uid_to_remove) {
  global $user;
  $access = FALSE;

  if ($term->vocabulary_machine_name != 'forum') {
    return $access; // Someone trying to delete a taxonomy term not from forums
  }

  if (!in_array('facilitator', $user->roles)) { // Only faci can remove users.
    return $access;
  }

  $is_member = sbac_forum__api__check_user_is_forum_member($term->tid, $uid_to_remove);
  if ($is_member === 'removed') { // User to re-add is a removed member of this current forum.
    $access = TRUE;
  }

  return $access;
}


function _sbac_forum_add_comment_user_access($topic, $comment) {
  $access = TRUE;
  return $access;
}

function _sbac_forum_delete_comment_user_access($comment) {
  $access = TRUE;
  return $access;
}

/**
 * Implements hook_block_info().
 *
 * @return mixed
 */
function sbac_forum_block_info() {
  $blocks['sbac_forum_categories'] = array(
    'info' => t('Categories'),
    'region' => 'filter',
    'pages' => "forums",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'status' => 1,
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['sbac_forum_back_button'] = array(
    'info' => t('(sbac_forum) Back Button'),
    'region' => 'filter',
    'pages' => "forums/term/*\n",
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'status' => 1,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 *
 * @return array
 */
function sbac_forum_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'sbac_forum_categories':
      module_load_include('inc', 'sbac_forum', 'includes/sbac_forum.forms');
      $block['subject'] = t('FORUM CATEGORIES');
      $block['content'] = drupal_get_form('sbac_forum_category_forum_form');
      break;
    case 'sbac_forum_back_button':
      $previous_url = '/forums';
      $block['subject'] = NULL;
      $block['content'] = '<a href="' . $previous_url . '" class="button">Back</a>';
      break;
  }
  return $block;
}

/**
 * Implements hook_date_formats
 */
function sbac_forum_date_formats() {
  $formats = array();

  $new_formats = array(
    'forum_listing' => 'M jS, Y g:i a',
  );

  foreach ($new_formats as $key => $value) {
    $formats[] = array(
      'type' => $key,
      'format' => $value,
      'locales' => array(),
    );
    variable_set('date_format_' . $key, $value);
  };

  return $formats;
}

/**
 * Implements hook_date_format_types
 */
function sbac_forum_date_format_types() {
  return array(
    'forum_listing' => t('Forum - Listing Page View'),
  );
}

/**
 * Implements hook_cron_queue_info()
 */
function sbac_forum_cron_queue_info() {
  $queues['sbac_forum_delete_orphaned_topics'] = array(
    'worker callback' => 'sbac_forum_delete_orphaned_topics_process',
    'time' => 60,
  );
  return $queues;
}

/**
 * Worker callback defined in hook_cron_queue_info()
 */
function sbac_forum_delete_orphaned_topics_process($item_nid) {
  if (isset($item_nid)) {
    $topic_node = node_load($item_nid);
    if ($topic_node) {
      $deleted_node_title = $topic_node->title;
      node_delete($item_nid);
      watchdog('action', 'Cleanup Task: Deleted Orphaned Topic "%name". Triggered by a Forum Deletion. ', array('%name' => $deleted_node_title));
    }
  }
}


/**
 * Implementation of hook_theme()
 */
function sbac_forum_theme($existing, $type, $theme, $path) {
  $items['sbac_forum_filter_categories'] = array(
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates',
    'template' => 'forum-filter-categories',
    'variables' => array(
      'categories' => NULL,
      'cf_value' => NULL,
      'cf_html' => NULL,
    ),
  );

  $items['sbac_forum_render_target_forum'] = array(
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates',
    'template' => 'forum-view-page',
    'variables' => array(
      'fields' => NULL,
    ),
  );

  // Node template override
  $items['node__topic'] = array(
    'render element' => 'elements',
    'path' => $path, // . '/templates',
    'file' => 'includes/sbac_forum.preprocess.inc',
    'template' => 'templates/node--topic',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_node',
      // 'sbac_forum_preprocess_node__topic', // This doesnt actually work. see sbac_forum_preprocess_node
    ),
  );

  $items['sbac_forum_comment__node_topic'] = array(
    'render element' => 'elements',
    'path' => $path, // . '/templates',
    'file' => 'includes/sbac_forum.preprocess.inc',
    'template' => 'templates/sbac-forum-comment--node-topic',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_comment',
    ),
  );

  //============== Views template overrides. ===============================

  /**
   * ---------- Forum list View.---------------
   */
  $items['views_view__forum_list__block'] = array(
    'template' => 'views-view--forum-list--block',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/forum_list',
    'arguments' => array('view' => NULL,),
    'original hook' => 'views_view',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
      'sbac_forum_preprocess_views_view__forum_list__block',
    ),
  );

  $items['views_view_unformatted__forum_list__block'] = array(
    'template' => 'views-view-unformatted--forum-list--block',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/forum_list',
    'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
    'original hook' => 'views_view_unformatted',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_unformatted',
      'sbac_forum_preprocess_views_view_unformatted__forum_list__block',
    ),
  );

  $items['views_view_fields__forum_list__block'] = array(
    'template' => 'views-view-fields--forum-list--block',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/forum_list',
    'arguments' => array('view' => NULL, 'fields' => NULL, 'row' => NULL),
    'original hook' => 'views_view_fields',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_fields',
      'sbac_forum_preprocess_views_view_fields__forum_list__block',
    ),
  );

  /**
   * ---------- Forum list EMPTY View.---------------
   */
  $items['views_view__forum_list_empty__block'] = array(
    'template' => 'views-view--forum-list-empty--block',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/forum_list_empty',
    'arguments' => array('view' => NULL,),
    'original hook' => 'views_view',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
      'sbac_forum_preprocess_views_view__forum_list_empty__block',
    ),
  );

  $items['views_view_unformatted__forum_list_empty__block'] = array(
    'template' => 'views-view-unformatted--forum-list-empty--block',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/forum_list_empty',
    'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
    'original hook' => 'views_view_unformatted',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_unformatted',
      'sbac_forum_preprocess_views_view_unformatted__forum_list_empty__block',
    ),
  );

  $items['views_view_fields__forum_list_empty__block'] = array(
    'template' => 'views-view-fields--forum-list-empty--block',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/forum_list_empty',
    'arguments' => array('view' => NULL, 'fields' => NULL, 'row' => NULL),
    'original hook' => 'views_view_fields',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_fields',
      'sbac_forum_preprocess_views_view_fields__forum_list_empty__block',
    ),
  );


  /**
   * ---------- Topic list View.---------------
   */
  $items['views_view__forum_topic_list__block'] = array(
    'template' => 'views-view--forum-topic-list--block',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/topic_list',
    'arguments' => array('view' => NULL,),
    'original hook' => 'views_view',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
      'sbac_forum_preprocess_views_view__forum_topic_list__block',
    ),
  );

  $items['views_view_unformatted__forum_topic_list__block'] = array(
    'template' => 'views-view-unformatted--forum-topic-list--block',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/topic_list',
    'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
    'original hook' => 'views_view_unformatted',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_unformatted',
      'sbac_forum_preprocess_views_view_unformatted__forum_topic_list__block',
    ),
  );

  $items['views_view_fields__forum_topic_list__block'] = array(
    'template' => 'views-view-fields--forum-topic-list--block',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/topic_list',
    'arguments' => array('view' => NULL, 'fields' => NULL, 'row' => NULL),
    'original hook' => 'views_view_fields',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_fields',
      'sbac_forum_preprocess_views_view_fields__forum_topic_list__block',
    ),
  );

  $items['views_view_field__forum_topic_list__block__uid'] = array(
    'template' => 'views-view-field--forum-topic-list--block--uid',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/topic_list',
    'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
    'original hook' => 'views_view_field',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_field',
      'sbac_forum_preprocess_views_view_field__forum_topic_list__block__uid',
    ),
  );

  $items['views_view_field__forum_topic_list__block__last_comment_uid'] = array(
    'template' => 'views-view-field--forum-topic-list--block--last-comment-uid',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/topic_list',
    'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
    'original hook' => 'views_view_field',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_field',
      'sbac_forum_preprocess_views_view_field__forum_topic_list__block__last_comment_uid',
    ),
  );


  /**
   * ---------- Member list View.---------------
   *
   *    NOTE: Affects both displays (block and block-1 aka Member and Removed)
   */
  $items['views_view__forum_member_list'] = array(
    'template' => 'views-view--forum-member-list',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/member_list',
    'arguments' => array('view' => NULL,),
    'original hook' => 'views_view',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view',
      'sbac_forum_preprocess_views_view__forum_member_list',
    ),
  );

  $items['views_view_unformatted__forum_member_list'] = array(
    'template' => 'views-view-unformatted--forum-member-list',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/member_list',
    'arguments' => array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
    'original hook' => 'views_view_unformatted',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_unformatted',
      'sbac_forum_preprocess_views_view_unformatted__forum_member_list',
    ),
  );

  $items['views_view_fields__forum_member_list'] = array(
    'template' => 'views-view-fields--forum-member-list',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/member_list',
    'arguments' => array('view' => NULL, 'fields' => NULL, 'row' => NULL),
    'original hook' => 'views_view_fields',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_fields',
      'sbac_forum_preprocess_views_view_fields__forum_member_list',
    ),
  );

  $items['views_view_field__forum_member_list__picture'] = array(
    'template' => 'views-view-field--forum-member-list--picture',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/member_list',
    'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
    'original hook' => 'views_view_field',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_field',
      'sbac_forum_preprocess_views_view_field__forum_member_list__picture',
    ),
  );

  $items['views_view_field__forum_member_list__uid'] = array(
    'template' => 'views-view-field--forum-member-list--uid',
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/member_list',
    'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
    'original hook' => 'views_view_field',
    'file' => '../../../includes/sbac_forum.preprocess.inc',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_views_view_field',
      'sbac_forum_preprocess_views_view_field__forum_member_list__uid',
    ),
  );


  // ==================== End Views templates  =================================


  // Keyword search templates
  $items['sbac_forum_keyword_search_render_forum'] = array(
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/forums_keyword_search',
    'template' => 'kw-search-entity-forum',
    'variables' => array(
      'fields' => NULL,
    ),
  );
  $items['sbac_forum_keyword_search_render_topic'] = array(
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/forums_keyword_search',
    'template' => 'kw-search-entity-topic',
    'variables' => array(
      'fields' => NULL,
    ),
  );
  $items['sbac_forum_keyword_search_render_comment'] = array(
    'path' => drupal_get_path('module', 'sbac_forum') . '/templates/views/forums_keyword_search',
    'template' => 'kw-search-entity-comment',
    'variables' => array(
      'fields' => NULL,
    ),
  );
  return $items;
}

/**
 * Implements hook_preprocess_views_view_fields
 */
function sbac_forum_preprocess_views_view(&$vars) { // This is the only way the preprocess gets read in. TODO: Find out why that is. if you have time.
  if ($vars['view']->name == 'forums_keyword_search') {
    module_load_include('inc', 'sbac_forum', 'includes/sbac_forum.preprocess');
    sbac_forum_preprocess_views_view__forums_keyword_search__page($vars);
  }
}

/**
 * Implements hook_preprocess_views_view_fields
 */
function sbac_forum_preprocess_views_view_fields(&$vars) { // This is the only way the preprocess gets read in. TODO: Find out why that is. if you have time.
  if ($vars['view']->name == 'forums_keyword_search') {
    module_load_include('inc', 'sbac_forum', 'includes/sbac_forum.preprocess');
    sbac_forum_preprocess_views_view_fields__forums_keyword_search__page($vars);
  }
}

/**
 * Implements hook_preprocess_node
 */
function sbac_forum_preprocess_node(&$vars) {
  if ($vars['type'] == 'topic') {
    module_load_include('inc', 'sbac_forum', 'includes/sbac_forum.preprocess');
    sbac_forum_preprocess_node__topic($vars);
  }
}

/**
 * Implements hook_node_access
 */
function sbac_forum_node_access($node, $op, $account) {
  if (isset($node->type)) {
    if ($node->type == 'topic') {
      switch ($op) {
        case 'view':
          if (sbac_central_user_has_role(array(SBAC_RESOURCE_ADMINISTRATOR_ROLE, SBAC_RESOURCE_FACILITATOR_ROLE))) {
            return NODE_ACCESS_ALLOW;
          }
          // Check if the parent forum has access restrictions. (role or state)
          $node_data = entity_metadata_wrapper('node', $node);
          if (isset($node_data->field_topic_forum_parent)) {
            $parent_forum = $node_data->field_topic_forum_parent->value();
            $has_access = sbac_forum__api__check_forum_view_access($account, $parent_forum);
            if (!empty($has_access)) {
              return NODE_ACCESS_ALLOW;
            }
          }
          return NODE_ACCESS_DENY;
          break;
      }
    }
  }
}

/**
 * Implements hook_comment_view
 */
function sbac_forum_comment_view($comment, $view_mode, $langcode) {
}

/**
 * Implements hook_preprocess_comment
 */
function sbac_forum_preprocess_comment(&$vars) {
  if ($vars['elements']['#bundle'] == 'comment_node_topic') {
    module_load_include('inc', 'sbac_forum', 'includes/sbac_forum.preprocess');
    $vars['theme_hook_suggestions'][] = 'sbac_forum_comment__node_topic';
    sbac_forum_preprocess_sbac_forum_comment__node_topic($vars);
  }
}

// ========================= FORM ALTERS =======================================

/**
 * Implements hook_form_alter
 */
function sbac_forum_form_alter(&$form, $form_state, $form_id) {
}

// --------

/**
 * Implements hook_form_FORM-ID_alter
 */
function sbac_forum_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'taxonomy_form_term') {
    if ((isset($form['#term'])) &&
      (!isset($form['delete'])) &&
      ($form['#term']['vocabulary_machine_name'] == 'forum')
    ) {
      // Hide the description field that comes with the taxonomy term entity.
      //   Use our own descrition field, more control.
      $form['description']['#access'] = FALSE;
      $form['relations']['#access'] = FALSE;
      $form['path']['#access'] = FALSE;

      $form['field_forum_resource_ref']['#access'] = FALSE;
      $form['field_digital_media_type']['#access'] = FALSE;
      $form['field_focus']['#access'] = FALSE;
      $form['field_educational_use']['#access'] = FALSE;
      $form['field_smarter_balanced_keyword']['#access'] = FALSE;

      // Add length restriction.
      $form['name']['#maxlength'] = 75;
      $form['name']['#attributes']['maxlength_js_label'][0] = 'Character count: @remaining';
      $form['name']['#maxlength_js'] = TRUE;

      global $user;
      $help_text = '<div>*NOTE: <p>Facilitator fields and Member fields should not be modified directly.';
      $help_text .= 'If necessary, make sure to update "Administrative (hidden)" fields to preserve logic/stability</p>';
      $help_text .= '</div>';
      $form['group_hidden_label'] = array(
        '#markup' => $help_text,
        '#weight' => 9,
      );
      if ($user->uid != 1) { // Only super admin can see these fields.
        $can_see = FALSE;

        // Membership fields.
        $form['group_hidden_label']['#access'] = $can_see;
        $form['field_forum_facilitators']['#access'] = $can_see;
        $form['field_fc_forum_members']['#access'] = $can_see;

        // Stats fields.
        $form['field_forum_topic_count']['#access'] = $can_see;
        $form['field_forum_topic_comment_count']['#access'] = $can_see;
        $form['field_forum_member_count']['#access'] = $can_see;
        $form['field_forum_removed_member_count']['#access'] = $can_see;
        $form['field_forum_last_activity']['#access'] = $can_see;
        $form['field_forum_created']['#access'] = $can_see;
      }

      $path_to_js_file = drupal_get_path('module', 'sbac_forum');
      $path_to_js_file .= '/js/sbac_forum.forum_form.js';
      $form['#attached']['js'][] = $path_to_js_file;

      $path_to_css_file = drupal_get_path('module', 'sbac_forum');
      $path_to_css_file .= '/css/sbac_forum.css';
      $form['#attached']['css'][] = $path_to_css_file;

      $form['name']['#title'] = 'Forum Title';

      // Tags fields. Add wrapper to group them
      $form['field_subject']['#prefix'] = '<div class="forum-tags-left">';
      $form['field_intended_student']['#suffix'] = '</div>';
      $form['field_grades']['#prefix'] = '<div class="forum-tags-right">';
      $form['field_geographical_settings']['#suffix'] = '</div><div class="clearfix"></div>';


      // Access fields. Modify behaviour.
      $form['field_forum_access_states']['#prefix'] = '<div class="forum-add-access-left">';
      $form['field_state']['#suffix'] = '</div>';
      $state_field_state = array(
        'visible' => array(
          ':input[name="field_forum_access_states[und]"]' => array('value' => "0"),
        ),
      );
      $form['field_state']['#states'] = $state_field_state;
      unset($form['field_state'][LANGUAGE_NONE]['#options']['_none']); // remove none option

      $form['field_forum_access_user_roles']['#prefix'] = '<div class="forum-add-access-right">';
      $form['field_forum_access_role_list']['#suffix'] = '</div><div class="clearfix"></div>';
      $role_field_state = array(
        'visible' => array(
          ':input[name="field_forum_access_user_roles[und]"]' => array('value' => "0"),
        ),
      );
      $form['field_forum_access_role_list']['#states'] = $role_field_state;
      unset($form['field_forum_access_role_list'][LANGUAGE_NONE]['#options']['_none']); // remove none option


      // Modify submit buttons
      $cancel_button_classes = 'sbac-forum-add-forum-cancel-button gray';
      $form['actions']['cancel_add'] = array(
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#weight' => 4,
        '#limit_validation_errors' => array(),
        '#attributes' => array(
          'class' => array($cancel_button_classes),
        ),
        '#submit' => array('_sbac_forum__add_forum_form_redirect_submit'),
        '#prefix' => '<div class="sbac-forum-add-forum-buttons">',
      );
      if (isset($form['actions']['delete'])) { // Edit form
        $form['actions']['delete']['#attributes']['class'] = array('red');
        // $form['actions']['delete']['#suffix'] = '</div>';
        $form['actions']['delete']['#access'] = FALSE; // Disable the delete button.
        $form['actions']['submit']['#suffix'] = '</div>';
      }
      else { // Add forum forum
        $form['actions']['submit']['#value'] = 'Start Forum';
        $form['actions']['submit']['#suffix'] = '</div>';
      }

      $form['#validate'][] = '_sbac_forum__forum_form__title_profanity_validate';
      $form['#validate'][] = '_sbac_forum__forum_form__access_field_validate';

      // Redirect on successful completion.
      $form['#submit'][] = '_sbac_forum__add_forum_form_redirect_submit';

    }
    elseif ((isset($form['#term'])) &&
      (isset($form['delete'])) &&
      ($form['#term']->vocabulary_machine_name == 'forum')
    ) {
      // This is the delete confirm form
      $forum_path = 'forums/term/' . $form['#term']->tid;
      $form['actions']['cancel']['#href'] = $forum_path;
      $form['actions']['cancel']['#options']['path'] = $forum_path;
    }

  }
}

function _sbac_forum__add_forum_form_redirect_submit($form, &$form_state) {
  $tid = 0;
  $link = 'forums';
  if (isset($form_state['term'])) {
    $tid = $form_state['term']->tid;
  }

  $triggering_element = $form_state['triggering_element']['#value'];
  if (!empty($tid)) {
    $link = 'forums/term/' . $tid;
    if (($triggering_element == 'Start Forum')) {
      $link_ops = array(
        'attributes' => array(
          'class' => 'in-message-new-topic-link',
        ),
        'query' => array('target-forum' => $tid),
      );
      $url = l('Post a Topic', 'node/add/topic', $link_ops);
      $message = 'Congratulations! You created a forum! ' . $url . ' to start a discussion';
      drupal_get_messages();
      drupal_set_message($message);
    }
  }

  $form_state['redirect'] = $link;
}

/**
 * Validation function for the title
 *
 * @param $form
 * @param $form_state
 */
function _sbac_forum__forum_form__title_profanity_validate(&$form, &$form_state) {
  $title = $form_state['values']['name'];
  $bad_words = profanity_validate_text($title);
  if ($bad_words) {
    $error = 'Please remove any inappropriate language from Forum Title.';
    form_set_error('name', $error);
  }
}

function _sbac_forum__forum_form__access_field_validate($form, &$form_state) {
  $values = $form_state['values'];

  global $user;
  $user_profile = user_load($user->uid);
  $user_profile_wrapper = entity_metadata_wrapper('user', $user_profile);
  $users_roles = array_keys($user_profile->roles);
  $users_states = array();
  if (isset($user_profile_wrapper->field_state)) {
    $state_terms = $user_profile_wrapper->field_state->value();
    if (!empty($state_terms)) {
      foreach ($state_terms as $state) {
        $users_states[] = $state->tid;
      }
    }
  }


  $states_field_value = $values['field_forum_access_states'][LANGUAGE_NONE][0]['value'];
  if (!$states_field_value) {
    $selected_states = $values['field_state'];
    if (count($selected_states[LANGUAGE_NONE])) { // There will be one entry even if empty. Check value.
      $temp = $selected_states[LANGUAGE_NONE];
      $selected_value = array_shift($temp);
      if (empty($selected_value['tid'])) {
        form_set_error('field_state', 'At least one State must be selected');
      }
    }
  }

  $roles_field_value = $values['field_forum_access_user_roles'][LANGUAGE_NONE][0]['value'];
  if (!$roles_field_value) {
    $selected_roles = $values['field_forum_access_role_list'];
    if (count($selected_roles[LANGUAGE_NONE]) >= 1) { // There will be one entry even if empty. Check value.
      $temp = $selected_roles[LANGUAGE_NONE];
      $selected_value = array_shift($temp);
      if (empty($selected_value['value'])) {
        form_set_error('field_forum_access_role_list', 'At least one Role must be selected');
      }
    }
  }
}

// ---------

/**
 * Implements hook_form_alter
 */
function sbac_forum_form_topic_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node'])) {
    if (!isset($form['#node']->nid)) { // Add new topic form.
      drupal_set_title('Start a Discussion');

      if (!($form_state['executed'])) { // Only set this on non-ajax requests. Basically on page load. You lose the GET var after ajax callback.
        $default_forum_parent = $_GET['target-forum'];
        // Have to set default forum that this topic relates to.
        $form_state['auto_default_forum_parent'] = array(
          '#type' => 'value',
          '#value' => $default_forum_parent,
        );
      }

      $form['actions']['submit']['#value'] = 'Start Discussion';

      // Do access checks and validation to ensure topic relates to correct forum.
      $form['#validate'][] = '_sbac_forum__topic_form__default_parent_term_validate';
    }
    else { // Edit form
      if (isset($form['actions']['delete'])) { // Edit form
        $form['actions']['delete']['#attributes']['class'] = array('red');
        //$form['actions']['delete']['#suffix'] = '</div>';
        $form['actions']['delete']['#access'] = FALSE; // Disable the delete button.
      }
    }

    // Add length restriction.
    $form['title']['#maxlength'] = 75;
    $form['title']['#attributes']['maxlength_js_label'][0] = 'Character count: @remaining';
    $form['title']['#maxlength_js'] = TRUE;

    // File uploaded widget tweaks
    $form['field_topic_files'][LANGUAGE_NONE]['#title'] = '';
    $form['field_topic_files'][LANGUAGE_NONE]['#file_upload_title'] = '';
    $form['field_topic_files'][LANGUAGE_NONE]['#file_upload_description'] = '';
    $form['field_topic_links'][LANGUAGE_NONE]['#title'] = '';
    $js_file_path = drupal_get_path('module', 'sbac_forum') . '/js/sbac_forum.topic_form.js';
    $form['#attached']['js'][] = $js_file_path;

    // Do title profanity validation.
    $form['#validate'][] = '_sbac_forum__topic_form__title_profanity_validate';

    // Modify submit buttons
    $cancel_button_classes = 'sbac-forum-add-forum-cancel-button gray';
    $form['actions']['cancel_add'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#weight' => 6,
      '#limit_validation_errors' => array(),
      '#attributes' => array(
        'class' => array($cancel_button_classes),
      ),
      '#submit' => array('_sbac_forum__add_topic_form_redirect_submit'),
      '#suffix' => '</div>',
    );
    $form['actions']['submit']['#prefix'] = '<div class="sbac-forum-add-topic-buttons">';
  }

  // Hide fields
  /**
   * global $user;
   * $has_access = FALSE;
   * if ($user->uid == 1) {
   *   $has_access = TRUE; // Only allow superadmin to see fields.
   * }
   */
  $has_access = FALSE;
  /**
   * 73847886 - Creating forum topic as an admin is displaying extra fields
   * Steps to Reproduce:
   * 1.  Log into DL as an admin
   * 2.  Navigate to a resource collaboration tab and click to start a discussion
   *
   * Expected Results:
   * Start a Discussion should only display topic title and description
   *
   * Actual Results:
   * See attached image
   *
   */
  $form['field_topic_forum_parent']['#access'] = $has_access;
  $form['field_topic_default']['#access'] = $has_access;
  $form['author']['#access'] = $has_access;
  $form['options']['#access'] = $has_access;
  $form['revision_information']['#access'] = $has_access;
  $form['comment_settings']['#access'] = $has_access;
  $form['menu']['#access'] = $has_access;
  $form['path']['#access'] = $has_access;
  $form['print']['#access'] = $has_access;

  $path_to_css_file = drupal_get_path('module', 'sbac_forum');
  $path_to_css_file .= '/css/sbac_forum.css';
  $form['#attached']['css'][] = $path_to_css_file;
}

/**
 * Validation function for setting forum relationshp
 *
 * @param $form
 * @param $form_state
 */
function _sbac_forum__topic_form__default_parent_term_validate($form, &$form_state) {
  $values = $form_state; // Safe so this doesnt act on form_state directly.
  if (isset($values['auto_default_forum_parent'])) {
    $parent_term = taxonomy_term_load($values['auto_default_forum_parent']['#value']);
    if (!empty($parent_term)) { // Check if this is a valid term.
      global $user;
      // Check user has access to do this.
      $has_access = sbac_forum__api__check_forum_view_access($user, $parent_term);
      if ($has_access) {
        $form_state['values']['field_topic_forum_parent'][LANGUAGE_NONE][0] = get_object_vars($parent_term);
      }
      else {
        form_set_error('', 'You do not have access to add a topic to this forum.'); // Forum is either restricted or user is not a member.
      }
    }
    else {
      form_set_error('', 'Could not load associated Forum.'); // someone trying to url hack to a different non-existent forum
    }
  }
  else {
    form_set_error('', 'There is no Forum associated with this topic post.'); // Default forum parent should be passed in. Otherwise it will be an orphan
  }
}

/**
 * Validation function for the title
 *
 * @param $form
 * @param $form_state
 */
function _sbac_forum__topic_form__title_profanity_validate(&$form, &$form_state) {
  $title = $form_state['values']['title'];
  $bad_words = profanity_validate_text($title);
  if ($bad_words) {
    $error = 'Please remove any inappropriate language from Topic Title.';
    form_set_error('title', $error);
  }
}

/**
 * On add topic node form submission, redirect to proper place.
 *
 * @param $form
 * @param $form_state
 */
function _sbac_forum__add_topic_form_redirect_submit($form, &$form_state) {
  $values = $form;

  $tid = 0;
  $link = 'forums';
  if (isset($values['auto_default_forum_parent'])) {
    $tid = $values['auto_default_forum_parent']['#value'];
  }
  if (!empty($tid)) {
    $link = 'forums/term/' . $tid;
  }


  if (isset($form_state['node'])) { // Coming from edit form.
    if (!empty($form_state['node']->nid)) {
      $link = 'node/' . $form_state['node']->nid;
    }
  }

  $form_state['redirect'] = $link;
}


// ----------

function sbac_forum_form_comment_node_topic_form_alter(&$form, &$form_state, $form_id) {
  $path_to_js_file = drupal_get_path('module', 'sbac_forum');
  $path_to_js_file .= '/js/sbac_forum.topic_comments_form.js';
  $form['#attached']['js'][] = $path_to_js_file;

  $path_to_css_file = drupal_get_path('module', 'sbac_forum');
  $path_to_css_file .= '/css/sbac_forum.css';
  $form['#attached']['css'][] = $path_to_css_file;

  $form['author']['#access'] = FALSE; // Hide this form element.


  // Remove all the bloat that comes with this widget.
  $form['field_topic_comment_files'][LANGUAGE_NONE]['#title'] = '';
  $form['field_topic_comment_files'][LANGUAGE_NONE]['#file_upload_title'] = '';
  $form['field_topic_comment_files'][LANGUAGE_NONE]['#file_upload_description'] = '';

  $form['field_topic_comment_links'][LANGUAGE_NONE]['#title'] = '';

  $comment_body_title = 'Your response:';
  $cancel_link_class = ' comment-direct-reply-form-cancel-link';
  $extra_link_attr = '';

  if (isset($form['pid'])) {
    $parent_term = $form['pid']['#value'];
    if (!empty($parent_term)) { // Means this is a reply to a reply.
      $form['#id'] .= '-' . $parent_term;
      $parent_comment = comment_load($parent_term);
      $parent_comment_data = entity_metadata_wrapper('comment', $parent_comment);
      $fn = $parent_comment_data->author->field_first_name->value();
      $comment_body_title = 'Reply to ' . $fn;

      $cancel_link_class = ' comment-reply-form-cancel-link';
      $extra_link_attr = 'reply-links-for-' . $parent_term;
    }
  }

  $form['comment_body'][LANGUAGE_NONE][0]['value']['#title'] = $comment_body_title;

  $cancel_link_ops = array(
    'attributes' => array(
      'class' => 'button gray' . $cancel_link_class,
      'comment-form-sec' => $extra_link_attr,
    ),
  );
  $cancel_link = l('Cancel', 'node/' . $form['nid']['#value'], $cancel_link_ops);
  $form['actions']['cancel_add'] = array(
    '#markup' => $cancel_link,
  );

  $form['actions']['submit']['#value'] = 'Submit';

  $form['field_topic_comment_recommended']['#access'] = FALSE;
  $form['#validate'] = array('sbac_forum_comment_node_topic_form_validate');
}

function sbac_forum_comment_node_topic_form_validate(&$form, &$form_state) {
  if ($form_state['triggering_element']['#value'] == 'Submit') {
    $nid = $form_state['values']['nid'];
    $pid = $form_state['values']['pid'];
    $query = db_select('eck_flag', 'ef');
    $query->fields('ef', array('target_id'));
    $query->distinct();
    $query->condition('target_type', 'comment', '=');
    $query->condition('resolved', 2, '=');
    $query->condition('nid', $nid, '=');
    $query->condition('target_id', $pid, '=');
    $results = $query->execute();

    while ($results->fetchAssoc()) {
      $url = drupal_get_path_alias('node/' . $nid);
      drupal_set_message(t('The post you responded to has been removed. Sorry for any inconvenience.'), 'error', FALSE);
      drupal_goto($url);
    }
  }
}

// ----------

/**
 * Implements hook_form_FORM-ID_alter
 */
function sbac_forum_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form['#id'], array(
    'views-exposed-form-forum-topic-list-block',
    'views-exposed-form-forum-member-list-block',
    'views-exposed-form-forum-member-list-block-1',
    'views-exposed-form-forum-topic-list-collaboration',
  ))
  ) {
    // Add words "sort by" to active selected sort options
    if (isset($form_state['input']['sort_by'])) {
      $selected_sort_by = $form_state['input']['sort_by'];
      $sort_by_label = $form['sort_by']['#options'][$selected_sort_by];
      $form['sort_by']['#options'][$selected_sort_by] = 'Sort by: ' . $sort_by_label;
    }
  }
}

/**
 * =============================================================================
 *
 *      Forum Term CRUD functions
 *
 * =============================================================================
 */

/**
 * Implements hook_taxonomy_term_insert
 */
function sbac_forum_taxonomy_term_insert($term) {
  if ($term->vocabulary_machine_name == 'forum') { // Adding term to forum
    global $user;
    $forum_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
    $forum_wrapper->field_forum_facilitators[0]->set($user->uid);
    if (!user_is_anonymous() && !sbac_forum__api__check_user_is_forum_member($term->tid, $user->uid)) {
      $params = array(
        'field_name' => 'field_fc_forum_members'
      );
      $new_member_item = entity_create('field_collection_item', $params);
      $new_member_item->setHostEntity('taxonomy_term', $term);
      $new_member_data = entity_metadata_wrapper('field_collection_item', $new_member_item);
      $new_member_data->field_fc_forum_member->set($user->uid);
      $new_member_data->field_fc_forum_member_joined->set(time());
      $new_member_data->save(TRUE);

      $current_member_count = $forum_wrapper->field_forum_member_count->value();
      $current_member_count++;
      $forum_wrapper->field_forum_member_count->set($current_member_count);

      // invalidate member list cache when a new user joins.
      $cid = SBAC_FORUM_MEMBER_LIST_CACHE_ENTRY_NAME . $term->tid;
      if (cache_get($cid)) {
        cache_clear_all($cid, 'cache');
      }
    }

    $forum_wrapper->field_forum_created->set(time());
    try {
      if ($resource = $forum_wrapper->field_forum_resource_ref->value()) {
        $forum_wrapper->field_forum_created->set($resource->created);
      }
    } catch (EntityMetadataWrapperException $e) {
    }
    $forum_wrapper->save();

    // Add forum to favorite
    if (!empty($term->field_forum_resource_ref[LANGUAGE_NONE])) {
      sbac_forum_add_to_favorite($term->tid, $user->uid);
    }
  }
}

/**
 * Implements hook_taxonomy_term_presave
 */
function sbac_forum_taxonomy_term_presave($term) {
  if ($term->vocabulary_machine_name == 'forum') { // Adding term to forum
    global $user;

    // Cleanup task to ensure that state list is unset if access is set to "all states";
    if (isset($term->field_forum_access_states) && !empty($term->field_forum_access_states[LANGUAGE_NONE])) {
      $state_access = $term->field_forum_access_states[LANGUAGE_NONE][0]['value'];
    }
    $state_restrictions = array();
    if (!empty($state_access)) {
      $term->field_state[LANGUAGE_NONE] = array(); // Unset the selection for state lists.
    }
    else { // forum has been state restricted. Get states.
      if (!empty($term->field_state[LANGUAGE_NONE])) {
        $raw = $term->field_state[LANGUAGE_NONE];
        foreach ($raw as $key => $value) {
          $state_restrictions[$value['tid']] = $value['tid'];
        }
      }
    }

    // Cleanup task to ensure that role list is unset if access is set to "all roles"; AKA title
    if (isset($term->field_forum_access_user_roles) && !empty($term->field_forum_access_user_roles[LANGUAGE_NONE])) {
      $role_access = $term->field_forum_access_user_roles[LANGUAGE_NONE][0]['value'];
    }
    $role_restrictions = array();
    if (!empty($role_access)) {
      $term->field_forum_access_role_list[LANGUAGE_NONE] = array(); // Unset the selection for role lists.
    }
    else {
      if (!empty($term->field_forum_access_role_list[LANGUAGE_NONE])) {
        $raw = $term->field_forum_access_role_list[LANGUAGE_NONE];
        foreach ($raw as $key => $value) {
          $role_restrictions[$value['value']] = $value['value'];
        }
      }
    }

    $people_to_notify = array();
    $entity_list = array();
    if (isset($term->field_forum_member_count) && !empty($term->field_forum_member_count[LANGUAGE_NONE])) {
      $member_count = $term->field_forum_member_count[LANGUAGE_NONE][0]['value'];
    }
    if (((!empty($state_restrictions)) || (!empty($role_restrictions))) && (!empty($member_count) && $member_count > 1)
    ) { // no need to run notify if there is only the creator as member.

      $term_data = entity_metadata_wrapper('taxonomy_term', $term);
      if (isset($term_data->field_fc_forum_members)) {
        $fc_member_list = $term_data->field_fc_forum_members->value();
        if (!empty($fc_member_list)) {
          foreach ($fc_member_list as $fc_item) {
            $member_entity = entity_metadata_wrapper('field_collection_item', $fc_item);
            if (isset($member_entity->field_fc_forum_member)) {

              // Do state check first.
              $has_state = array();
              if (!empty($state_restrictions)) {
                $members_states = array();
                try {
                  $members_states_raw = $member_entity->field_fc_forum_member->field_state->value();
                  if (!empty($members_states_raw)) {
                    foreach ($members_states_raw as $index => $state_element) {
                      $members_states[$state_element->tid] = $state_element->tid;
                    }
                  }
                } catch (EntityMetadataWrapperException $e) {
                }
                $has_state = array_intersect($state_restrictions, $members_states);
              } // end state check


              // Check position/title/role
              $has_role = array();
              if (!empty($role_restrictions)) {
                try {
                  $members_title_raw = $member_entity->field_fc_forum_member->field_position->value();
                  $members_title_tid = $members_title_raw->tid;
                  $has_role = in_array($members_title_tid, $role_restrictions);
                } catch (EntityMetadataWrapperException $e) {
                }
              } // end title check


              // Bring it all together
              $pass = 0; // Both need to match. Its an "AND", role AND state.
              if (!empty($role_restrictions)) {
                if (!empty($has_role)) {
                  $pass++;
                }
              }
              else { // Forum isnt role restricted.
                $pass++;
              }

              if (!empty($state_restrictions)) { // Means check state
                if (!empty($has_state)) {
                  $pass++;
                }
              }
              else {
                $pass++;
              }

              if ($pass != 2) {
                try {
                  $user_to_remove = $member_entity->field_fc_forum_member->uid->value();
                  $entity_id = $member_entity->item_id->value();
                  $entity_list[] = $entity_id;
                  $people_to_notify[] = $user_to_remove;
                } catch (EntityMetadataWrapperException $e) {
                }
                $fc_item->delete(); // Mimics "leaving" a forum. User is removed entirely.
                $member_count--;
              }
            }
          }
        }
      } // endif for sanity check entity metadata wrapper field.
    } // End OR

    if (!empty($people_to_notify)) {
      $clean_members_list = array();
      // Cleanup task to remove the relationship between deleted field collection entity and forum term.
      foreach ($term->field_fc_forum_members[LANGUAGE_NONE] as $index => $entity_data) {
        if (!in_array($entity_data['value'], $entity_list)) {
          $clean_members_list[] = $entity_data;
        }
      }
      $term->field_fc_forum_members[LANGUAGE_NONE] = $clean_members_list;
      $term->field_forum_member_count[LANGUAGE_NONE][0]['value'] = $member_count;

      sbac_forum__api__send_bulk_notifications($term, 'access-change', $people_to_notify);

      // invalidate memberlist cache when a user is removed or leaves.
      $cid = SBAC_FORUM_MEMBER_LIST_CACHE_ENTRY_NAME . $term->tid;
      if (cache_get($cid)) {
        cache_clear_all($cid, 'cache');
      }
    }

    // Get all nodes tagged with this term / in this forum.
    if (isset($term->tid)) {
      $nodes = taxonomy_select_nodes($term->tid, FALSE);
    }
    if (!empty($nodes)) {
      // All comments for all the nodes must be re-indexed.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'comment')
        ->propertyCondition('nid', $nodes, 'IN');
      $result = $query->execute();

      $cids = array();
      if (isset($result['comment'])) {
        $cids = array_keys($result['comment']);
      }
      if (!empty($cids)) {
        foreach ($cids as $cid) {
          apachesolr_mark_entity('comment', $cid);
        }
      }
    }

  }
}

/**
 * Implements hook_taxonomy_term_delete()
 */
function sbac_forum_taxonomy_term_delete($term) {
  // Delete favorite
  db_delete('sbac_favorites')->condition('type', 'term')->condition('id', $term->tid)->execute();
}

/**
 * =============================================================================
 *
 *      Topic Node CRUD functions
 *
 * =============================================================================
 */

/**
 * Implements hook_node_insert
 */
function sbac_forum_node_insert($node) {
  if ($node->type == 'topic') {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    if (isset($node_wrapper->field_topic_forum_parent)) {
      $forum_obj = $node_wrapper->field_topic_forum_parent->value();
      if (!empty($forum_obj)) {
        // Update topic counter field on forum.
        global $user;
        $forum_wrapper = entity_metadata_wrapper('taxonomy_term', $forum_obj);
        if (isset($forum_wrapper->field_forum_topic_count)) {
          $current_count = $forum_wrapper->field_forum_topic_count->value();
          $current_count++;
          $forum_wrapper->field_forum_topic_count->set($current_count);
        }
        if (isset($forum_wrapper->field_forum_last_activity)) {
          $forum_wrapper->field_forum_last_activity->set(time());
        }
        // Add forum to favorite
        sbac_forum_add_to_favorite($forum_obj->tid, $user->uid);

        try {
          // Notify people
          $recipients = array();
          // Notify contributor.
          $recipients[] = $forum_wrapper->field_forum_resource_ref->value()->uid;

          // Notify people who have favorited this forum/resource
          $fav_id = $forum_obj->tid;
          $fav_type = 'term';
          if ($resource = $forum_wrapper->field_forum_resource_ref->value()) {
            $fav_id = $resource->nid;
            $fav_type = 'node';
          }
          $query = "SELECT uid FROM {sbac_favorites} WHERE id = :id AND type = :type AND uid <> 0";
          $results = db_query($query, array(':id' => $fav_id, ':type' => $fav_type))->fetchCol();
          $recipients = array_merge($recipients, $results);

          $recipients = array_unique($recipients);

          foreach ($recipients as $recipient) {
            if ($recipient && $recipient != $node->uid) { // don't send to yourself
              if ($task = taskit_get_object('created_topic_node')) {
                $task->addVisibility($task::VISIBILITY_USER);
                $task->addEntity('node', $node->nid);
                $task->addOwningUser($recipient);
                $task->addTriggeringUser($node->uid);
                $task->save();
              }
            }
          }
        } catch (EntityMetadataWrapperException $e) {
        }

        // add the user to the participant list
        if (!sbac_forum__api__check_user_is_forum_member($forum_obj->tid, $node->uid)) {
          $params = array(
            'field_name' => 'field_fc_forum_members'
          );
          $new_member_item = entity_create('field_collection_item', $params);
          $new_member_item->setHostEntity('taxonomy_term', $forum_obj);
          $new_member_data = entity_metadata_wrapper('field_collection_item', $new_member_item);
          $new_member_data->field_fc_forum_member->set($node->uid);
          $new_member_data->field_fc_forum_member_joined->set(time());
          $new_member_data->save(TRUE);

          $current_member_count = $forum_wrapper->field_forum_member_count->value();
          $current_member_count++;
          $forum_wrapper->field_forum_member_count->set($current_member_count);
          $forum_wrapper->save(TRUE);

          // invalidate member list cache when a new user joins.
          $cid = SBAC_FORUM_MEMBER_LIST_CACHE_ENTRY_NAME . $forum_obj->tid;
          if (cache_get($cid)) {
            cache_clear_all($cid, 'cache');
          }
        }
        // Update user's topic count
        foreach ($forum_wrapper->field_fc_forum_members as $member_wrapper) {
          try {
            if ($member_wrapper->field_fc_forum_member->uid->value() == $node->uid) {
              // Increment the recommend count
              $current_topic_count = $member_wrapper->field_fc_forum_member_tpic_count->value();
              $current_topic_count++;
              $member_wrapper->field_fc_forum_member_tpic_count->set($current_topic_count);
              // Set the date
              $member_wrapper->field_fc_forum_member_rcnt_actvt->set(time());
              // Update the participation score
              $participation_score = sbac_forum_calculate_participation_score($member_wrapper->field_fc_forum_member_reco_count->value(), $current_topic_count, $member_wrapper->field_fc_forum_member_post_count->value());
              $member_wrapper->field_fc_forum_member_partip_scr->set($participation_score);
              $member_wrapper->save(TRUE);
            }
          } catch (EntityMetadataWrapperException $e) {
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete
 */
function sbac_forum_node_delete($node) {
  if ($node->type == 'topic') {
    $forum_type = 'topic';
    $node_wrapper = entity_metadata_wrapper('node', $node);
    if (isset($node_wrapper->field_topic_forum_parent)) {
      $forum_obj = $node_wrapper->field_topic_forum_parent->value();
      if (!empty($forum_obj)) {
        // Update topic counter field on forum.
        $forum_wrapper = entity_metadata_wrapper('taxonomy_term', $forum_obj);
        if($forum_wrapper->field_forum_resource_ref->value()){
          $forum_type = 'resource';
        }
        if (isset($forum_wrapper->field_forum_topic_count)) {
          $current_count = $forum_wrapper->field_forum_topic_count->value();
          $current_count--;
          $forum_wrapper->field_forum_topic_count->set($current_count);
          $forum_wrapper->save(TRUE);
        }

        if (sbac_forum_user_has_participated($forum_obj->tid, $node->uid) <= 1) { // 1 because the current node is not yet deleted
          // remove the user
          sbac_forum__api__leave_forum($forum_obj, 'leave', $node->uid);
        }
        else {
          // Update user's topic count
          foreach ($forum_wrapper->field_fc_forum_members as $member_wrapper) {
            try {
              if ($member_wrapper->field_fc_forum_member->uid->value() == $node->uid) {
                // decrement the recommend count
                $current_topic_count = $member_wrapper->field_fc_forum_member_tpic_count->value();
                $current_topic_count--;
                $member_wrapper->field_fc_forum_member_tpic_count->set($current_topic_count);
                // Set the date
                $member_wrapper->field_fc_forum_member_rcnt_actvt->set(time());
                // Update the participation score
                $participation_score = sbac_forum_calculate_participation_score($member_wrapper->field_fc_forum_member_reco_count->value(), $current_topic_count, $member_wrapper->field_fc_forum_member_post_count->value());
                $member_wrapper->field_fc_forum_member_partip_scr->set($participation_score);
                $member_wrapper->save(TRUE);
              }
            } catch (EntityMetadataWrapperException $e) {
            }
          }
        }
      }
    }
    global $user;
    $edit = array(
      'entity_type' => 'node',
      'entity_id' => $node->nid,
      'title' => $node->title,
      'created' => time(),
      'uid' => $user->uid,
      'forum_type' => $forum_type,
    );
    drupal_write_record('sbac_forum_deleted_log', $edit);
  }
}

/**
 * Check to see if a user has created a topic or has commented on a forum
 * @param $forum_tid
 * @param $uid
 * @return bool
 */
function sbac_forum_user_has_participated($forum_tid, $uid) {
  $query = "
    SELECT
      *
    FROM node n
      LEFT JOIN {field_data_field_topic_forum_parent} parent
        ON parent.entity_id = n.nid
      LEFT JOIN {comment} c
        ON c.nid = n.nid
    WHERE
      n.type = 'topic'
      AND parent.field_topic_forum_parent_tid = :tid
      AND (n.uid = :uid OR c.uid = :uid)
      ";
  return db_query($query, array(':tid' => $forum_tid, ':uid' => $uid))->rowCount();
}

/**
 * =============================================================================
 *
 *      Comments for Topic Node CRUD functions
 *
 * =============================================================================
 */

/**
 * Implements hook_comment_insert
 */
function sbac_forum_comment_insert($comment) {
  $topic_nid = $comment->nid;
  $comment_author_id = $comment->uid;
  if (!empty($topic_nid)) {
    $topic_node = node_load($topic_nid);
    $topic_wrapper = entity_metadata_wrapper('node', $topic_node);
    if (isset($topic_wrapper->field_topic_forum_parent)) {
      $forum_term = $topic_wrapper->field_topic_forum_parent->value();
      if (!empty($forum_term)) {
        // Update Reply counter field on forum.
        $forum_wrapper = entity_metadata_wrapper('taxonomy_term', $forum_term);
        if (isset($forum_wrapper->field_forum_topic_count)) {
          $current_count = $forum_wrapper->field_forum_topic_comment_count->value();
          $current_count++;
          $forum_wrapper->field_forum_topic_comment_count->set($current_count);
        }
        if (isset($forum_wrapper->field_forum_last_activity)) {
          $forum_wrapper->field_forum_last_activity->set(time());
        }

        $is_participant = sbac_forum__api__check_user_is_forum_member($forum_term->tid, $comment_author_id);
        // add this user to the participant list
        if (!$is_participant) {
          $params = array(
            'field_name' => 'field_fc_forum_members'
          );
          $new_member_item = entity_create('field_collection_item', $params);
          $new_member_item->setHostEntity('taxonomy_term', $forum_term);
          $new_member_data = entity_metadata_wrapper('field_collection_item', $new_member_item);
          $new_member_data->field_fc_forum_member->set($comment_author_id);
          $new_member_data->field_fc_forum_member_joined->set(time());
          $new_member_data->save(TRUE);

          $current_member_count = $forum_wrapper->field_forum_member_count->value();
          $current_member_count++;
          $forum_wrapper->field_forum_member_count->set($current_member_count);

          // invalidate member list cache when a new user joins.
          $cid = SBAC_FORUM_MEMBER_LIST_CACHE_ENTRY_NAME . $forum_term->tid;
          if (cache_get($cid)) {
            cache_clear_all($cid, 'cache');
          }
        }
        if ($forum_wrapper->field_fc_forum_members->count()) {
          foreach ($forum_wrapper->field_fc_forum_members as $member_wrapper) {
            try {
              if ($member_wrapper->field_fc_forum_member->uid->value() == $comment_author_id) {
                // Increment the post count
                $current_post_count = $member_wrapper->field_fc_forum_member_post_count->value();
                $current_post_count++;
                $member_wrapper->field_fc_forum_member_post_count->set($current_post_count);
                // Set the date
                $member_wrapper->field_fc_forum_member_rcnt_actvt->set(time());
                // Update the participation score
                $participation_score = sbac_forum_calculate_participation_score($member_wrapper->field_fc_forum_member_reco_count->value(), $member_wrapper->field_fc_forum_member_tpic_count->value(), $current_post_count);
                $member_wrapper->field_fc_forum_member_partip_scr->set($participation_score);
                $member_wrapper->save(TRUE);
              }
            } catch (EntityMetadataWrapperException $e) {
            }
          }
        }
        $forum_wrapper->save(TRUE);
        taxonomy_term_save($forum_term);
        $_SESSION[SBAC_FORUM_SHOW_NEW_COMMENT_MESSAGE] = $comment->cid;

        // Add the forum to favorite
        sbac_forum_add_to_favorite($forum_term->tid, $comment_author_id);

        // Notify people
        $recipients = array();

        // Notify topic creator
        $recipients[] = $topic_node->uid;

        // Notify the person being replied to
        if (!empty($comment->pid)) {
          $parent_comment = comment_load($comment->pid);
          $recipients[] = $parent_comment->uid;
        }

        // Notify the resource contributor
        if ($resource = $forum_wrapper->field_forum_resource_ref->value()) {
          $recipients[] = $resource->uid;
        }
        // Notify people who have favorited this forum/resource
        $fav_id = $forum_term->tid;
        $fav_type = 'term';
        if ($resource = $forum_wrapper->field_forum_resource_ref->value()) {
          $fav_id = $resource->nid;
          $fav_type = 'node';
        }
        $query = "SELECT uid FROM {sbac_favorites} WHERE id = :id AND type = :type AND uid <> 0";
        $results = db_query($query, array(':id' => $fav_id, ':type' => $fav_type))->fetchCol();
        $recipients = array_merge($recipients, $results);

        $recipients = array_unique($recipients);

        foreach ($recipients as $recipient) {
          if ($recipient != $comment_author_id) { // don't send to yourself
            if ($task = taskit_get_object('created_forum_comment')) {
              $task->addVisibility($task::VISIBILITY_USER);
              $task->addEntity('node', $topic_nid);
              $task->addEntity('comment', $comment->cid);
              $task->addOwningUser($recipient);
              $task->addTriggeringUser($comment_author_id);
              $task->save();
            }
          }
        }
      }
    }
  }
}

/**
 * Add the forum to the user's favorite list
 *
 * @param $forum_id
 * @param $uid
 */
function sbac_forum_add_to_favorite($forum_id, $uid) {
  $forum_term = taxonomy_term_load($forum_id);
  // Add the forum to favorite
  $type = 'term';
  $id = $forum_term->tid;
  if (!empty($forum_term->field_forum_resource_ref)) {
    $id = $forum_term->field_forum_resource_ref['und'][0]['target_id'];
    $type = 'node';
  }
  $query = "INSERT IGNORE INTO {sbac_favorites} (id, uid, weight, created, type) VALUES (:id, :uid, :weight, :created, :type)";
  db_query($query, array(
    ':id' => $id,
    ':uid' => $uid,
    ':weight' => -1000,
    ':created' => time(),
    ':type' => $type,
  ));
}

/**
 * Implements hook_comment_delete
 */
function sbac_forum_comment_delete($comment) {
  $related_nid = $comment->nid;
  $comment_author_id = $comment->uid;
  if (!empty($related_nid)) {
    $topic_node = node_load($related_nid);
    $node_wrapper = entity_metadata_wrapper('node', $topic_node);
    if (isset($node_wrapper->field_topic_forum_parent)) {
      $forum_obj = $node_wrapper->field_topic_forum_parent->value();
      if (!empty($forum_obj)) {
        // Update Reply counter field on forum.
        $forum_wrapper = entity_metadata_wrapper('taxonomy_term', $forum_obj);
        if (isset($forum_wrapper->field_forum_topic_comment_count)) {
          $current_count = $forum_wrapper->field_forum_topic_comment_count->value();
          $current_count--;
          $forum_wrapper->field_forum_topic_comment_count->set($current_count);
          $forum_wrapper->save(TRUE);
          taxonomy_term_save($forum_obj);
        }
        if (sbac_forum_user_has_participated($forum_obj->tid, $comment_author_id) <= 1) { // 1 because the current comment is not yet deleted
          // remove the user
          sbac_forum__api__leave_forum($forum_obj, 'leave', $comment_author_id);
        }
        else {
          if ($forum_wrapper->field_fc_forum_members->count()) {
            foreach ($forum_wrapper->field_fc_forum_members as $member_wrapper) {
              try {
                if ($member_wrapper->field_fc_forum_member->uid->value() == $comment_author_id) {
                  // Increment the post count
                  $current_post_count = $member_wrapper->field_fc_forum_member_post_count->value();
                  $current_post_count--;
                  $member_wrapper->field_fc_forum_member_post_count->set($current_post_count);
                  // Set the date
                  $member_wrapper->field_fc_forum_member_rcnt_actvt->set(time());
                  // Update the participation score
                  $participation_score = sbac_forum_calculate_participation_score($member_wrapper->field_fc_forum_member_reco_count->value(), $member_wrapper->field_fc_forum_member_tpic_count->value(), $current_post_count);
                  $member_wrapper->field_fc_forum_member_partip_scr->set($participation_score);
                  $member_wrapper->save(TRUE);
                }
              } catch (EntityMetadataWrapperException $e) {
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Get the posted resources
 *
 * @return mixed
 */
function sbac_forum_get_posted_resources($limit = NULL) {
  $query = db_select('node', 'n');
  $query->leftJoin('workbench_moderation_node_history', 'history', 'history.nid = n.nid');
  $query->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.type', 'resource')
    ->condition('history.current', 1)
    ->condition('history.state', 'published')
    ->orderBy('n.nid', 'ASC');
  if ($limit) {
    $query->range(0, $limit);
  }
  return $query->execute()->fetchCol();
}

/**
 * Create a resource forum from a resource
 *
 * @param $nid
 * @param $vid
 */
function sbac_forum_create_resource_forum($nid, $vid = NULL) {
  // Check to make sure this forum doesn't exist already
  $query = "
      SELECT
        count(*)
      FROM {taxonomy_term_data} term
        LEFT JOIN {field_data_field_forum_resource_ref} ref
          ON term.tid = ref.entity_id
      WHERE ref.entity_type = 'taxonomy_term'
            AND ref.field_forum_resource_ref_target_id = :nid";
  $exists = db_query($query, array(':nid' => $nid))->fetchField();
  if (!$exists) {
    $node = node_load($nid);
    if (!$vid) {
      $vocab = taxonomy_vocabulary_machine_name_load(SBAC_FORUM_VOCAB_NAME);
      $vid = $vocab->vid;
    }
    if ($node && $node->type == 'resource') {
      $term = (object) array(
        'vid' => $vid,
        'name' => $node->title,
        'description' => '',
        'format' => 1,
        'field_forum_resource_ref' => array(
          LANGUAGE_NONE => array(
            0 => array(
              'target_id' => $node->nid
            )
          )
        ),
        'field_forum_description' => $node->field_alt_body,
        'field_subject' => $node->field_subject,
        'field_grades' => $node->field_grades,
        'field_intended_end_user' => $node->field_intended_end_user,
        'field_intended_student' => $node->field_intended_student,
        'field_attributes' => $node->field_attributes,
        'field_geographical_settings' => $node->field_geographical_settings,
        'field_digital_media_type' => $node->field_digital_media_type,
        'field_focus' => $node->field_focus,
        'field_educational_use' => $node->field_educational_use,
        'field_smarter_balanced_keyword' => $node->field_smarter_balanced_keyword,
      );
      taxonomy_term_save($term);
      $term_wrapper = entity_metadata_wrapper('taxonomy_term', $term);
      $term_wrapper->field_forum_last_activity->set(time());
      $term_wrapper->save(TRUE);
      if (isset($term->tid)) {
        sbac_forum_create_forum_topic($term->tid, $node->uid, SBAC_FORUM_DEFAULT_FORUM_1_TITLE, SBAC_FORUM_DEFAULT_FORUM_1_DESC, 1);
        sbac_forum_create_forum_topic($term->tid, $node->uid, SBAC_FORUM_DEFAULT_FORUM_2_TITLE, SBAC_FORUM_DEFAULT_FORUM_2_DESC, 1);
      }
    }
  }
}

/**
 * Delete a resource forum along with all its topics
 *
 * @param $tid
 * The forum term ID
 */
function sbac_forum_delete_resource_forum($tid) {
  $topics_query = "
      SELECT
        n.nid
      FROM {node} n
        LEFT JOIN {field_data_field_topic_forum_parent} parent
          ON parent.entity_id = n.nid
      WHERE parent.field_topic_forum_parent_tid = :tid AND n.type = 'topic'";
  $topics = db_query($topics_query, array(
    ':tid' => $tid,
  ))->fetchCol();
  node_delete_multiple($topics);
  taxonomy_term_delete($tid);
}

/**
 * Create a forum topic
 *
 * @param $forum_id
 * @param $uid
 * @param $topic
 * @param $description
 */
function sbac_forum_create_forum_topic($forum_id, $uid, $topic, $description, $default = 0) {
  $node = new stdClass;
  $node->type = 'topic';
  $node->title = $topic;
  $node->uid = $uid;
  $node->status = 1;
  $node->comment = 2;
  $node->language = LANGUAGE_NONE;
  $node->body[LANGUAGE_NONE][0]['value'] = $description;
  $node->field_topic_forum_parent[LANGUAGE_NONE][0]['tid'] = $forum_id;
  $node->field_topic_default[LANGUAGE_NONE][0]['value'] = $default;
  node_save($node);
}

/**
 * Implements hook_workbench_moderation_transition()
 */
function sbac_forum_workbench_moderation_transition($node, $previous_state, $new_state) {
  if ($node->type == 'resource' && $new_state == 'published') {
    sbac_forum_create_resource_forum($node->nid);
    // this node is published through the review process, remove the auto favourite
    // entry from this user
    global $user;
    db_delete('sbac_favorites')->condition('type', 'node')->condition('uid', $user->uid)->condition('id', $node->nid)->execute();
  }
}

/**
 * Get the forum (term) ID from the resource ID
 * @param $resource_nid
 * @return mixed
 */
function sbac_forum_get_resource_forum_id($resource_nid) {
  $query = "
    SELECT
      entity_id
    FROM {field_data_field_forum_resource_ref}
    WHERE field_forum_resource_ref_target_id = :nid";
  return db_query($query, array(':nid' => $resource_nid))->fetchField();
}

/**
 * Formula for calculating the participation score
 *
 * @param $recommendations
 * @param $topics
 * @param $replies
 * @return int
 */
function sbac_forum_calculate_participation_score($recommendations, $topics, $replies) {
  if (!$recommendations) {
    $recommendations = 0;
  }
  if (!$topics) {
    $topics = 0;
  }
  if (!$replies) {
    $replies = 0;
  }
  return (5 * $recommendations) + (2 * $topics) + $replies;
}

/**
 * Recommend a post
 */
function sbac_forum_recommend_ajax_click() {
  if (!$_POST['cid']) {
    exit;
  }

  global $user;
  $cid = check_plain($_POST['cid']);
  $comment = comment_load($cid);
  $count = 0;
  if ($comment) {
    $comment_wrapper = entity_metadata_wrapper('comment', $comment);
    $count = $comment_wrapper->field_topic_comment_recommended->count();
    if (empty($count)) {
      $comment_wrapper->field_topic_comment_recommended[] = $user->uid;
      $count = 1;
    }
    else {
      $recommended = FALSE;
      foreach ($comment_wrapper->field_topic_comment_recommended as $account) {
        if ($account->uid->value() == $user->uid) {
          $recommended = TRUE;
        }
      }
      if (!$recommended) {
        $comment_wrapper->field_topic_comment_recommended[] = $user->uid;
        $count++;
      }
    }
    $comment_wrapper->save();

    // Notify user
    if ($task = taskit_get_object('recommended_forum_comment')) {
      $task->addVisibility($task::VISIBILITY_USER);
      $task->addEntity('node', $comment->nid);
      $task->addEntity('comment', $cid);
      $task->addOwningUser($comment->uid);
      $task->addTriggeringUser($user->uid);
      $task->save();
    }

    // Increment user's recommend count
    $forum_wrapper = $comment_wrapper->node->field_topic_forum_parent;
    if ($forum_wrapper->field_fc_forum_members->count()) {
      foreach ($forum_wrapper->field_fc_forum_members as $member_wrapper) {
        if ($member_wrapper->field_fc_forum_member->uid->value() == $comment->uid) {
          // Increment the recommend count
          $current_recommend_count = $member_wrapper->field_fc_forum_member_reco_count->value();
          $current_recommend_count++;
          $member_wrapper->field_fc_forum_member_reco_count->set($current_recommend_count);
          // Set the date
          $member_wrapper->field_fc_forum_member_rcnt_actvt->set(time());
          // Update the participation score
          $participation_score = sbac_forum_calculate_participation_score($current_recommend_count, $member_wrapper->field_fc_forum_member_tpic_count->value(), $member_wrapper->field_fc_forum_member_post_count->value());
          $member_wrapper->field_fc_forum_member_partip_scr->set($participation_score);
          $member_wrapper->save(TRUE);
        }
      }
    }
  }

  $output = array('recommendations' => $count);
  print drupal_json_encode($output);
  exit;
}

/**
 * Check to see if a user has already recommended a post
 *
 * @param $cid
 * @param $uid
 * @return mixed
 */
function sbac_forum_user_has_recommended($cid, $uid) {
  $query = "
    SELECT
      *
    FROM {field_data_field_topic_comment_recommended}
    WHERE entity_id = :cid AND field_topic_comment_recommended_target_id = :uid";
  return db_query($query, array(':cid' => $cid, ':uid' => $uid))->rowCount();
}

/**
 * Implements hook_query_TAG_alter()
 */
function sbac_forum_query_comment_filter_alter(QueryAlterableInterface $query) {
  if (($node = $query->getMetaData('node')) && (get_class($query) == 'PagerDefault')) {
    if (isset($_SESSION['sbac-topic-comment-sorts'])) {
      switch ($_SESSION['sbac-topic-comment-sorts']) {
        case 'comment-oldest':
          // Do nothing, the comments are sorted by oldest->newest by default
          break;
        case 'comment-most-recommended':
          // remove the old ordering
          $orderby = & $query->getOrderBy();
          unset($orderby['torder']);

          // sort by most recommended
          $query->leftJoin('field_data_field_topic_comment_recommended', 'recommended', 'recommended.entity_id = c.cid');
          $query->groupBy('c.cid');
          $query->orderBy('count(recommended.field_topic_comment_recommended_target_id)', 'DESC');
          $query->orderBy('c.created', 'DESC');
          break;
        case 'comment-most-recent-activity':
        default;
          // Copied from comment_goodness_query_comment_filter_alter()
          $orderby = & $query->getOrderBy();
          $expressions = & $query->getExpressions();
          // Sorting for threaded comments.
          if (isset($orderby['torder'])) {
            // Get rid of the expressions that prepare the threads for ASC ordering.
            unset($expressions['torder']);
            unset($orderby['torder']);
            // Simply order by the thread field.
            $orderby['c.thread'] = 'DESC';
          }
          // Sorting for flat comments.
          else {
            $direction = 'DESC';
            if (isset($orderby['c.cid'])) {
              unset($orderby['c.cid']);
            }
            $orderby['c.created'] = $direction;
            $orderby['c.cid'] = $direction;
          }
          break;
      }
    }
  }
}

/**
 * Implements hook_comment_view_alter()
 */
function sbac_forum_comment_view_alter(&$build) {
  if ($_SESSION['sbac-topic-comment-sorts'] == 'comment-most-recommended') {
    // Remove the indentation for sort by recommended
    $build['#prefix'] = '<a id="comment-' . $build['#comment']->cid . '"></a>';
  }
}

/**
 * Implements hook_module_implements_alter()
 */
function sbac_forum_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'query_alter') {
    // we don't need comment_goodness, we are doing our own sorting
    unset($implementations['comment_goodness']);
  }
}

/**
 * Redirect the user to the threaded version of the comment
 *
 * @param $nid
 * @param $cid
 */
function sbac_forum_go_to_thread($nid, $cid) {
  $_SESSION['sbac-topic-comment-sorts'] = 'comment-most-recent-activity';
  drupal_goto('node/' . $nid, array('fragment' => 'comment-' . $cid));
}