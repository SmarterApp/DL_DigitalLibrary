<?php

include_once 'sbac_central.features.inc';
/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_central_update_projects_alter(&$projects) {
  unset($projects['sbac_central']);
}

function sbac_central_menu() {
  $items = array();

  $items['sbac-central-fix-broken-ccss'] = array(
    'title' => 'My Resources',
    'page callback' => 'sbac_central_fix_broken_ccss',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Script to fix broken ccss. yay...
 */
function sbac_central_fix_broken_ccss() {
  ini_set('max_execution_time', 900);
  ini_set('memory_limit', '1024M');
  $vid = 11; //same across all environments.

  if (isset($_GET['debug']) && $_GET['debug'] == 1) {
    $debug = TRUE;
  }
  else {
    $debug = FALSE;
  }

  $LOGFILE = "/tmp/sbac_ccss_migration.". date("Ymd-His", time()) .".log";
  $logmsg = "Starting ccss migraiton\n";
  if ($debug) {
    $logmsg .= "Operating in debug mode\n";
  }
  else {
    $logmsg .= "Operating in live mode\n";
  }

  // only get items up till oct.28th (before the push).
  $sql = "SELECT n.nid AS nid FROM {node} n WHERE n.type = 'alignment' AND n.changed <= 1382943600";
  $result = db_query($sql);
  foreach ($result as $row) {
    $node = node_load($row->nid);
    if ($node) {
      if (isset($node->field_education_alignment['und'][0])) {
        $logmsg .= "Selected node->title: " . $node->title . " node->nid: " . $node->nid . "\n";
        $tid = $node->field_education_alignment['und'][0]['tid'];
        db_set_active('sbac_prod_old');
        $sql2 = "SELECT * FROM {taxonomy_term_data} WHERE tid = :tid AND vid = :vid";
        // only select a TID with the given VID, to ensure its the correct vocab.
        $results2 = db_query($sql2, array(':tid' => $tid, ':vid' => $vid))->fetchAssoc();
        if ($results2) {
          $logmsg .= "Selected term id from old db (tid = " . $tid . ")\n";
          $old_term = taxonomy_term_load($results2['tid']);
          // have the old data, now find it in the new db.
          db_set_active();
          $sql3 = "SELECT * FROM taxonomy_term_data td
            JOIN field_data_field_alignment_grade fag ON td.tid = fag.entity_id
            JOIN field_data_field_alignment_key fak ON td.tid = fak.entity_id
            JOIN field_data_field_alignment_publication fap ON td.tid = fap.entity_id
            JOIN field_data_field_alignment_shortname fas ON td.tid = fas.entity_id
            WHERE fag.field_alignment_grade_value = :grade
            AND fak.field_alignment_key_value = :key
            AND fap.field_alignment_publication_value = :publication
            AND fas.field_alignment_shortname_value = :shortname";

          $grade = $old_term->field_alignment_grade['und'][0]['value'];
          $key = $old_term->field_alignment_key['und'][0]['value'];
          $publication = $old_term->field_alignment_publication['und'][0]['value'];
          $shortname = $old_term->field_alignment_shortname['und'][0]['value'];
          $results3 = db_query($sql3, array(
            ':grade' => $grade,
            ':key' => $key,
            ':publication' => $publication,
            ':shortname' => $shortname
          ))->fetchAssoc();

          if ($results3) {
            //This is the new tid.
            if ($debug) {
              $logmsg .= "Did not save tid (" . $results3['tid'] . "), operating in debug mode\n";
            }
            else {
              $logmsg .= "Saved new tid (" . $results3['tid'] . ") to the node\n";
              $node->field_education_alignment['und'][0]['tid'] = $results3['tid'];
              node_save($node);
            }
          }
          else {
            $logmsg .= "Unable to select term id from new db with the following info:\n";
            $logmsg .= "grade: " . $grade . "\n";
            $logmsg .= "key: " . $key . "\n";
            $logmsg .= "publication: " . $publication . "\n";
            $logmsg .= "shortname: " . $shortname . "\n";
          }
        }
        else {
          $logmsg .= "Unable to select term id from old db (tid = " . $tid . ")\n";
        }
        db_set_active();
      }
    }
  }
  error_log($logmsg, 3, $LOGFILE);
}

/**
 * Implements hook_init().
 * Enables/disables maillog per environment.
 */
function sbac_central_init() {
  global $user;
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    switch ($_ENV['AH_SITE_ENVIRONMENT']) {
      case 'dev':
      case 'test':
      case 'stage2':
      case 'stage3':
        if(!module_exists('maillog')) {
          module_enable(array('maillog'));
          watchdog('SBAC', 'Enabling maillog. See sbac_central_init for details.');
          if ($user->uid == 1) {
            drupal_set_message('Enabling maillog. See sbac_central_init for details.');
          }
        }
        break;
      case 'prod':
        //do something if its prod
        if(module_exists('maillog')) {
          module_disable(array('maillog'));
          watchdog('SBAC', 'Disabling maillog. See sbac_central_init for details.');
          if ($user->uid == 1) {
            drupal_set_message('Disabling maillog. See sbac_central_init for details.');
          }
        }
        break;
    }
  }
}
/**
 * Determines the users most priveleged role.
 *
 * @param null $account
 * @return bool
 */
function sbac_central_determine_user_role($account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $role = FALSE;
  $weighted_roles = array();
  $system_roles = sbac_central_user_roles();
  foreach ($account->roles AS $rid => $role_name) {
    $weighted_roles[$system_roles[$rid]->weight] = $system_roles[$rid];
  }

  if ($weighted_roles) {
    $max_weight = max(array_keys($weighted_roles));
    $role = $weighted_roles[$max_weight];
  }
  return $role;
}

/**
 * Returns user roles with weight.
 *
 * @return array
 */
function sbac_central_user_roles() {
  $query = db_select('role', 'r');
  $query->fields('r', array('rid', 'name', 'weight'));
  $query->orderBy('weight');
  $result = $query->execute();
  $roles = array();
  foreach ($result as $role) {
    $roles[$role->rid] = $role;
  }
  return $roles;
}

/**
 * Gets all users with specific role(s).
 *
 * @param $roles
 * @return mixed
 */
function sbac_central_get_users_with_roles($roles) {
  $uids = array();
  $query = 'SELECT DISTINCT(ur.uid) FROM {users_roles} AS ur WHERE ur.rid IN (:rids)';
  $result = db_query($query, array(':rids' => $roles));
  foreach ($result as $row) {
    $uids[] = $row->uid;
  }
  $users = user_load_multiple($uids);
  return $users;
}

/**
 * Gets all users with specific roles and states.
 *
 * @param $roles
 * @param $all_states
 * @return mixed
 */
function sbac_central_get_users_with_roles_and_state($rids, $states) {
  $uids = array();
  $query = 'SELECT ur.uid
            FROM {users_roles} AS ur
            JOIN {field_data_field_state} s
              ON ur.uid = s.entity_id
            WHERE ur.rid IN (:rids)
              AND s.field_state_tid IN (:states)';
  $result = db_query($query, array(':rids' => $rids, ':states' => $states));
  foreach ($result as $row) {
    $uids[$row->uid] = $row->uid;
  }
  $users = user_load_multiple($uids);
  return $users;
}

/**
 * Gets the states that this user has access to.
 *
 * @param $roles
 * @param $all_states
 * @return mixed
 */
function sbac_central_get_user_with_roles_and_state($rids, $states, $uid) {
  $account = array();
  $query = 'SELECT ur.uid
            FROM {users_roles} AS ur
            JOIN {field_data_field_state} s
              ON ur.uid = s.entity_id
            WHERE ur.rid IN (:rids)
              AND s.field_state_tid IN (:states)
              AND ur.uid = :uid';
  $result = db_query($query, array(':rids' => $rids, ':states' => $states, ':uid' => $uid));
  foreach ($result as $row) {
    $account = user_load($row->uid);
  }
  return $account;
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sbac_central_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($form_id == 'taxonomy_form_term') {
    if (!in_array('administrator', $user->roles) || $user->uid != 1) {
      $form['relations']['#access'] = FALSE;
    }
  }

  if ($form_id == 'taxonomy_form_vocabulary') {
    if (!in_array('administrator', $user->roles) || $user->uid != 1) {
      $form['machine_name']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_menu_alter().
 *
 * @param $items
 */
function sbac_central_menu_alter(&$items) {
  if (isset($items['admin/structure/taxonomy/add'])) {
    $items['admin/structure/taxonomy/add']['access callback'] = 'sbac_central_access_taxonomy';
  }

  if (isset($items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/fields'])) {
    $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/fields']['access callback'] = 'sbac_central_access_taxonomy';
  }

  if (isset($items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/display'])) {
    $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/display']['access callback'] = 'sbac_central_access_taxonomy';
  }

  if (isset($items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add'])) {
    $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add']['access callback'] = 'sbac_central_access_taxonomy';
  }
}

/**
 * Access callback function for menu altered items above.
 *
 * @param $string
 * @param null $account
 * @return bool
 */
function sbac_central_access_taxonomy($string, $account = NULL) {
  if (!user_access('administer site configuration')) {
    return FALSE;
  }
  return user_access($string);
}

/**
 * Implements hook_registry_alter().
 *
 * @param $theme_registry
 */
function sbac_central_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['taxonomy_overview_vocabularies'])) {
    $theme_registry['taxonomy_overview_vocabularies']['function'] = 'theme_sbac_central_taxonomy_overview_vocabularies';
  }
}

/**
 * Returns HTML for the vocabulary overview form as a sortable list of vocabularies.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @see taxonomy_overview_vocabularies()
 * @ingroup themeable
 */
function theme_sbac_central_taxonomy_overview_vocabularies($variables) {
  $form = $variables['form'];
  $rows = array();
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['name'])) {
      $vocabulary = & $form[$key];
      $row = array();
      $row[] = drupal_render($vocabulary['name']);
      if (isset($vocabulary['weight'])) {
        $vocabulary['weight']['#attributes']['class'] = array('vocabulary-weight');
        $row[] = drupal_render($vocabulary['weight']);
      }
      $row[] = drupal_render($vocabulary['edit']);
      $row[] = drupal_render($vocabulary['list']);
      if (user_access('administer site configuration')) {
        $row[] = drupal_render($vocabulary['add']);
      }
      else {
        unset($form[$key]['add']);
      }
      $rows[] = array('data' => $row, 'class' => array('draggable'));
    }
  }

  $header = array(t('Vocabulary name'));
  if (isset($form['actions'])) {
    $header[] = t('Weight');
    drupal_add_tabledrag('taxonomy', 'order', 'sibling', 'vocabulary-weight');
  }
  $header[] = array('data' => t('Operations'), 'colspan' => '3');
  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No vocabularies available. <a href="@link">Add vocabulary</a>.', array('@link' => url('admin/structure/taxonomy/add'))),
    'attributes' => array('id' => 'taxonomy')
  )) . drupal_render_children($form);
}

/**
 * Implements hook_block_info().
 */
function sbac_central_block_info() {
  $blocks['feedback-box'] = array(
    'info' => t('Feedback Box'),
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_CACHE_GLOBAL,
    'weight' => -23,
    'status' => 0,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sbac_central_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'feedback-box':
      $body = variable_get('feedback_block_body', array('value' => '', 'format' => 'full_html'));

      $block['subject'] = t('Feedback Block');
      $block['content'] = $body['value'];

      break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function sbac_central_block_configure($delta = '') {
  $form = array();

  if ($delta == 'feedback-box') {
    $body = variable_get('feedback_block_body', array('value' => '', 'format' => 'full_html'));

    $form['feedback_block_body'] = array(
      '#type' => 'text_format',
      '#base_type' => 'textarea',
      '#title' => t('Block Body'),
      '#size' => 600,
      '#description' => t('Content shown on the Feedback pop-up block.'),
      '#default_value' => $body['value'],
      '#format' => $body['format'],
    );

    $form['enable_feedback'] = array(
      '#type' => 'checkbox',
      '#title'=> t('Display Feedback overlay to user on login'),
      '#default_value' => variable_get('enable_feedback'),
    );
  }

  return $form;
}
/**
 * Implements hook_block_save().
 */
function sbac_central_block_save($delta = '', $edit = array()) {
  global $user;
  if ($delta == 'feedback-box') {
    variable_set('feedback_block_body', $edit['feedback_block_body']);
    variable_set('enable_feedback', $edit['enable_feedback']);
    if ($edit['enable_feedback'] == 1) {
      db_update('field_data_field_feedback_flag')
        ->fields(array(
          'field_feedback_flag_value' => 0,
        ))
        ->execute();
    }
  }
}