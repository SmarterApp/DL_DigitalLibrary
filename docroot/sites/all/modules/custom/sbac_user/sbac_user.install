<?php

/**
 * Implementation of hook_update_N().
 *
 * Removes the Creater, Publisher, and Editor roles.
 */
function sbac_user_update_7001() {
  user_role_delete('creator');
  user_role_delete('publisher');
  user_role_delete('editor');
}

/**
 * Implementation of hook_update_N().
 *
 * Removes the help desk, system administrator
 */
function sbac_user_update_7002() {
  user_role_delete('help desk (group)');
  user_role_delete('system administrator (group)');
}

/**
 * Implementation of hook_update_N().
 *
 * Removes the help desk, system administrator
 */
function sbac_user_update_7003() {
  user_role_delete('student');
  user_role_delete('parent/guardian');
  user_role_delete('educator');
  user_role_delete('school administrator');
  user_role_delete('district administrator');
  user_role_delete('state administrator');
}

/**
 * Implements of hook_update_N().
 *
 * Delete the field_subject_s_ and field_grade_level_s_ fields
 */
function sbac_user_update_7004() {
  $ret = array();

  // Retrieve the crud operations for fields.
  module_load_include('inc','field','field.crud');
  field_delete_field('field_subject_s_');
  field_delete_field('field_grade_level_s_');
  $field = field_info_instance('user', 'field_subject_s_', 'user');
  field_delete_instance($field);
  $field = field_info_instance('user', 'field_grade_level_s_', 'user');
  field_delete_instance($field);

  return $ret;
}

/**
 * Implements of hook_update_N().
 *
 * Delete the field_position field
 */
function sbac_user_update_7005() {
  $ret = array();

  // Retrieve the crud operations for fields.
  module_load_include('inc','field','field.crud');
  field_delete_field('field_position');
  $field = field_info_instance('user', 'field_position', 'user');
  field_delete_instance($field);

  $title = array(
    'title' => array(
      0 => 'Doctor',
      1 => 'Professor',
      2 => 'Teacher',
    ),
    'description' => array(
      0 => '',
      1 => '',
      2 => '',
    ),
  );
  $vocab = db_query('SELECT * FROM {taxonomy_vocabulary} WHERE machine_name = :vocab', array(':vocab' => 'title'))->fetchAssoc();
  if (!$vocab) {
    $edit = array(
      'name' => 'Title',
      'machine_name' => 'title',
      'description' => t('Title'),
      'module' => 'taxonomy',
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
    $vocab = db_query('SELECT * FROM {taxonomy_vocabulary} WHERE machine_name = :vocab', array(':vocab' => 'title'))->fetchAssoc();
  }
  $terms = db_select('taxonomy_term_data', 't')
          ->fields('t', array('tid'))
          ->condition('vid', $vocab['vid'])
          ->execute()->fetchAll();
  foreach ($terms as $term) {
    taxonomy_term_delete($term->tid);
  }
  foreach ($title['title'] as $index => $term) {
    taxonomy_term_save((object) array(
      'name' => $term,
      'description' => $title['description'][$index],
      'weight' => 0,
      'vid' => $vocab['vid'],
    ));
  }

  return $ret;
}

/**
 * Implements of hook_update_N().
 *
 * Populating proper terms to the title taxonomy.
 */
function sbac_user_update_7006() {
  $ret = array();

  // Retrieve the crud operations for fields.
  module_load_include('inc','field','field.crud');
  field_delete_field('field_position');
  $field = field_info_instance('user', 'field_position', 'user');
  field_delete_instance($field);

  $title = array(
    'title' => array(
      0 => 'State Personnel',
      1 => 'Regional Learning Consultant',
      2 => 'District Administrator',
      3 => 'Building Administrator',
      4 => 'Teacher',
      5 => 'School Counselor',
      6 => 'Librarian / Media Specialist',
      7 => 'Instructional Coach',
      8 => 'Instructional / Curriculum Coordinator',
      9 => 'Higher Education Personnel',
      10 => 'Student Teacher',
      11 => 'Other',
    ),
    'description' => array(
      0 => '',
      1 => '',
      2 => '',
      3 => '',
      4 => '',
      5 => '',
      6 => '',
      7 => '',
      8 => '',
      9 => '',
      10 => '',
      11 => '',
    ),
    'weight' => array(
      0 => -10,
      1 => -9,
      2 => -8,
      3 => -7,
      4 => -6,
      5 => -5,
      6 => -4,
      7 => -3,
      8 => -2,
      9 => -1,
      10 => 0,
      11 => 1,
    ),
  );
  $vocab = db_query('SELECT * FROM {taxonomy_vocabulary} WHERE machine_name = :vocab', array(':vocab' => 'title'))->fetchAssoc();
  if (!$vocab) {
    $edit = array(
      'name' => 'Title',
      'machine_name' => 'title',
      'description' => t('Title'),
      'module' => 'taxonomy',
    );
    $vocabulary = (object) $edit;
    taxonomy_vocabulary_save($vocabulary);
    $vocab = db_query('SELECT * FROM {taxonomy_vocabulary} WHERE machine_name = :vocab', array(':vocab' => 'title'))->fetchAssoc();
  }
  $terms = db_select('taxonomy_term_data', 't')
          ->fields('t', array('tid'))
          ->condition('vid', $vocab['vid'])
          ->execute()->fetchAll();
  foreach ($terms as $term) {
    taxonomy_term_delete($term->tid);
  }
  foreach ($title['title'] as $index => $term) {
    taxonomy_term_save((object) array(
      'name' => $term,
      'description' => $title['description'][$index],
      'weight' => $title['weight'][$index],
      'vid' => $vocab['vid'],
    ));
  }

  return $ret;
}
/**
 * Implements of hook_update_N().
 *
 * Delete the field_state
 */
function sbac_user_update_7007() {
  $ret = array();

  // Retrieve the crud operations for fields.
  module_load_include('inc','field','field.crud');
  $field = field_info_instance('user', 'field_state', 'user');
  field_delete_instance($field);

  return $ret;
}
/**
 * Implements of hook_update_N().
 *
 * Delete the field_phone_number, field_swd_ell and field_university_name
 */
function sbac_user_update_7008() {
  $ret = array();

  // Retrieve the crud operations for fields.
  module_load_include('inc','field','field.crud');
  $field = field_info_instance('user', 'field_phone_number', 'user');
  field_delete_instance($field);

  $field = field_info_instance('user', 'field_swd_ell', 'user');
  field_delete_instance($field);
  
  $field = field_info_instance('user', 'field_university_name', 'user');
  field_delete_instance($field);
  
  return $ret;
}

/**
 * Remove LDAP fields from user.
 */
function sbac_user_update_7009() {
  // Retrieve the crud operations for fields.
  module_load_include('inc','field','field.crud');

  // User PUID.
  $field_name = 'ldap_user_puid';
  $field = field_read_field($field_name);
  $field['locked'] = 0; // 0: unlock; 1: lock.
  field_update_field($field);

  $field = field_info_instance('user', 'ldap_user_puid', 'user');
  field_delete_instance($field);

  // User PUID SID.
  $field_name = 'ldap_user_puid_sid';
  $field = field_read_field($field_name);
  $field['locked'] = 0; // 0: unlock; 1: lock.
  field_update_field($field);

  $field = field_info_instance('user', 'ldap_user_puid_sid', 'user');
  field_delete_instance($field);

  // User Prov Entries.
  $field_name = 'ldap_user_prov_entries';
  $field = field_read_field($field_name);
  $field['locked'] = 0; // 0: unlock; 1: lock.
  field_update_field($field);

  $field = field_info_instance('user', 'ldap_user_prov_entries', 'user');
  field_delete_instance($field);

  // User LDAP Exclude
  $field_name = 'ldap_user_ldap_exclude';
  $field = field_read_field($field_name);
  $field['locked'] = 0; // 0: unlock; 1: lock.
  field_update_field($field);

  $field = field_info_instance('user', 'ldap_user_ldap_exclude', 'user');
  field_delete_instance($field);

  // User PUID Property
  $field_name = 'ldap_user_puid_property';
  $field = field_read_field($field_name);
  $field['locked'] = 0; // 0: unlock; 1: lock.
  field_update_field($field);

  $field = field_info_instance('user', 'ldap_user_puid_property', 'user');
  field_delete_instance($field);

  // User Current DN
  $field_name = 'ldap_user_current_dn';
  $field = field_read_field($field_name);
  $field['locked'] = 0; // 0: unlock; 1: lock.
  field_update_field($field);

  $field = field_info_instance('user', 'ldap_user_current_dn', 'user');
  field_delete_instance($field);

  // User Last Checked.
  $field_name = 'ldap_user_last_checked';
  $field = field_read_field($field_name);
  $field['locked'] = 0; // 0: unlock; 1: lock.
  field_update_field($field);

  $field = field_info_instance('user', 'ldap_user_last_checked', 'user');
  field_delete_instance($field);

  $ret = array();
  return $ret;
}

/**
 * Remove LDAP fields from user.
 */
function sbac_user_update_7010() {
  // Retrieve the crud operations for fields.
  module_load_include('inc','field','field.crud');

  // User PUID.
  $field_name = 'field_ldap_first_name';
  $field = field_read_field($field_name);
  $field['locked'] = 0; // 0: unlock; 1: lock.
  field_update_field($field);

  $field = field_info_instance('user', 'field_ldap_first_name', 'user');
  field_delete_instance($field);

  // User PUID SID.
  $field_name = 'field_ldap_last_name';
  $field = field_read_field($field_name);
  $field['locked'] = 0; // 0: unlock; 1: lock.
  field_update_field($field);

  $field = field_info_instance('user', 'field_ldap_last_name', 'user');
  field_delete_instance($field);

  $ret = array();
  return $ret;
}
