<?php

/*----------------------------------------------------------------------------
      GENERAL FORMS
----------------------------------------------------------------------------*/

/**
 * Validation handler for ECK Feedback forms.
 */
function feedback_eck_feedback_form_validate($form, &$form_state) {
  $values = &$form_state['values'];
  $lang = $values['entity']->language;

  $clean_check = function($container, $fields) use (&$values, &$form_state, $lang) {
    // TODO: I feel filthy writing this; there has GOT to be a cleaner way
    foreach ($fields as $field_name) {
      // the values which get saved to the entity object
      foreach ($values[$container][$lang] as &$item) {
        foreach ($item['entity']->{$field_name}[$lang] as &$child) {
          $child['value'] = filter_xss($child['value']);
        }
      }

      // the values which get output as part of the form on page-reload
      foreach ($form_state['complete form'][$container][$lang] as &$item) {
        if (is_array($item) && isset($item[$field_name][$lang])) {
          foreach ($item[$field_name][$lang] as &$child) {
            if (is_array($child)) {
              $child['value']['#value'] = filter_xss($child['value']['#value']);
            }
          }
        }
      }
    }
  };

  $required_check = function($container, $required_fields) use ($values, $lang) {
    foreach ($values[$container][$lang] as $key => $item) {
      foreach ($required_fields as $field_name => $field_message) {
        $value = trim(field_get_value($item, $field_name));
        if (is_null($value) || $value == '') {
          $error_key = implode('][', array(
            $container,
            $lang,
            $key,
            $field_name,
          ));

          // default "empty field" message
          if ($field_name == $field_message) {
            $error_text = t('Field is required.');
          }
          // customized message
          else {
            $error_text = t($field_message, array(
              '!delta'      => $key,
              '!delta+1'    => $key + 1,
              '!field_name' => $field_name,
            ));
          }

          form_set_error($error_key, $error_text);
        }
      }
    }
  };

  $profanity_check = function($container) use ($values) {
    if ($errors = form_get_errors()) {
      $profanity_error_text = profanity_error_message_text();

      foreach ($errors as $key => $text) {
        // make sure we're looking at an error from the profanity component
        if ($text !== $profanity_error_text) {
          continue;
        }

        $key_parts = explode('][', $key);

        // basic sanity check
        if ((sizeof($key_parts) == 7) && ($key_parts[0] == $container) && ($key_parts[3] == 'field_comments')) {
          $delta = $key_parts[2];

          $set_title = trim(check_plain(strip_tags($values[$container][$lang][$delta]['set_title'])));

          $new_text = t('Please remove inappropriate language from the comment in Quality Criterion below to continue');

          // ugly, but works
          $location = array_search($text, $_SESSION['messages']['error']);
          $_SESSION['messages']['error'][$location] = $new_text;
        }
      }
    }
  };

  // we use this validation callback to override the error messages set by the
  // profanity component
  switch ($values['entity']->type) {
    case 'gate_keeper':
      $container = 'field_quality_set';

      $clean_check($container, array('field_comments', 'field_meets_criterion'));

      switch ($values['action']) {
        case 'validate':

          $required_check($container, array(
            'field_comments' => 'Please add a comment to Gate-Keeping Criteria !delta+1 to continue',
            'field_meets_criterion' => 'You must make a decision in Quality Criteria !delta+1 to continue',
          ));

          break;
      }

      $profanity_check($container);

      break;

    case 'review':
      // there is an edge-case where too many users load the Quality Review form
      // at the same time; since we only want a maximum of three of these, we do an
      // extra permission check here (which will fail if the max number of entities
      // is reached)
      $node = node_load($values['node_id']);
      if (!resource_access('edit quality criteria', $node)) {
        form_set_error('', t('Maximum number of Quality Criteria Reviews reached.'));
        return;
      }

      $container = 'field_review_set';
      $profanity_check($container);

      break;

    case 'post':

      break;
  }
}

/**
 * AJAX submit callback for the ECK feedback forms.
 */
function feedback_eck_feedback_form_submit($form, &$form_state) {
  $entity = $form_state['values']['entity'];

  // set correct values to bundle-specific fields
    module_load_include('inc', 'sbac_core', '/components/feedback/includes/form_utility/class.Base');

    $rebuild_decision_radios = function($option, $states, $utility, &$form) use ($entity) {
      if ($option !== FALSE) {
        $state = $states[$option];

        $node = node_load($entity->node_id);

        unset($form['actions']['complete_button']);
        unset($form['actions']['complete']);

        try {
          $utility->completeButton($state);

          $utility_form = $utility->getForm();
          $form['actions'] += $utility_form['actions'];
          $form['actions']['complete_button']['#weight'] = 9999;
        }
        catch (\Exception $e) {
          drupal_set_message($e->getMessage(), 'error');
        }
      }
    };

    // dsmm($form_state['values']);


    if ($entity->type == 'review') {
      // we need to rebuild the complete review buttons when the recommendation
      // option changes
      try {
        module_load_include('inc', 'sbac_core', '/components/feedback/includes/form_utility/class.Review');

        $option = field_get_value($form_state['values'], 'field_rec_options');
        $states = feedback_recommendation_states();

        $form_copy = $form;
        $state_copy = $form_state;

        $utility = new sbac_core\components\feedback\form_utility\Review($form_copy, $state_copy, array());
        $rebuild_decision_radios($option, $states, $utility, $form);
      }
      catch (\Exception $e) {
        drupal_set_message($e->getMessage(), 'error');
      }

      // also rebuild the level radio buttons
      foreach ($form_state['values']['field_review_set'][$entity->language] as $key => $item) {
        if ($value = field_get_value($item, 'field_level')) {
          $states = feedback_recommendation_states();

          $desc = variable_get('qc_level_' . $value, '');
          $form['field_review_set'][$entity->language][$key]['field_level'][$entity->language]['#suffix'] = '<div class="desc">' . filter_text($desc)  . '</div>';
        }
      }
    }
    elseif ($entity->type == 'post') {
      // we need to rebuild the complete review buttons when the post
      // option changes
      module_load_include('inc', 'sbac_core', '/components/feedback/includes/form_utility/class.Post');

      $option = field_get_value($form_state['values'], 'field_post_options');
      $states = feedback_post_states();

      $form_copy = $form;
      $state_copy = $form_state;

      $utility = new sbac_core\components\feedback\form_utility\Post($form_copy, $state_copy, array());
      $rebuild_decision_radios($option, $states, $utility, $form);
    }

  // check for form errors and set a JS flag which can be used to prevent
  // modal from opening
    $errors = form_get_errors();
    $form_error = (int) !empty($errors);

    $form['run_js'] = array(
      '#markup' => '<script>Drupal.settings.feedback.form_error = ' . $form_error . ';</script>',
    );

  return $form;
}

/*----------------------------------------------------------------------------
      BUNDLE-SPECIFIC FORMS
----------------------------------------------------------------------------*/

/**
 * Submit handler for ECK Gate Keeper form.
 */
function feedback_eck_gate_keeper_form_submit($form, &$form_state) {
  if ($form_state['values']['action'] == 'validate') {
    return;
  }

  $entity = $form_state['values']['entity'];
  $node = node_load($entity->node_id);
  global $user;

  $task = FALSE;
  switch ($form_state['values']['action']) {
    // TODO: we should probably do some additional validation here, just in case
    // the clever user modified DOM to enable disabled buttons and 'complete'
    // a resource that didn't meet all criteria

    case 'cancel':
      // the cancellation is handled in the modal form's submission. If we trigger
      // GK form submission, it can complain about empty fields, and we don't care
      // about those during the cancellation process

      break;

    case 'not_meet':
      $entity->completed = 1;
      $entity->met_criteria = 0;
      entity_save('feedback', $entity);

      // reject resource so author can make changes and re-submit
      workbench_moderation_moderate($node, 'rejected');

      $task = taskit_get_object('resource_rejected');

      break;

    case 'meet':
      $entity->completed = 1;
      $entity->met_criteria = 1;
      entity_save('feedback', $entity);

      // now that we have a completed and 'met' gate keeper, the user should start
      // the Quality Criteria Review flow, so create the review entity
      $qc = new stdClass;
      $qc->title = $node->title .' - Review - ' . $user->uid;
      $qc->type = 'review';
      $qc->uid = $user->uid;
      $qc->created = REQUEST_TIME;
      $qc->changed = REQUEST_TIME;
      $qc->language = LANGUAGE_NONE;
      $qc->status = 1;
      $qc->completed = 0;
      $qc->current = 1;
      $qc->node_id = $node->nid;

      drupal_set_message(t('Quality Criteria Review process started.'));

      entity_save('feedback', $qc);

      break;
  }

  if ($task && $node = node_load($entity->node_id)) {
    global $user;

    $task->addVisibility($task::VISIBILITY_USER);
    $task->addEntity('node', $node->nid);
    $task->addEntity('feedback', $entity->id);
    $task->addOwningUser($node->uid);
    $task->addTriggeringUser(1);
    $task->save();
  }
}

/**
 * Submit handler for ECK Review form.
 */
function feedback_eck_review_form_submit($form, &$form_state) {
  if ($form_state['values']['action'] == 'validate') {
    return;
  }

  $entity = $form_state['values']['entity'];
  $node = node_load($entity->node_id);
  global $user;

  $task = FALSE;
  switch ($form_state['values']['action']) {
    // handled in the modal's submit callback, otherwise we can run
    // into empty-field validation errors
    case 'cancel':
      break;

    // don't need to do anything
    case 'save_close':
      break;

    // check the number of submitted reviews, collate recommendations and make
    // a workflow decision
    case 'complete':
      $entity->completed = 1;
      entity_save('feedback', $entity);

      // count the number of completed reviews
      $args = array(
        ':node_id' => $node->nid,
      );

      $query = "  SELECT  COUNT(id) as count
                  FROM    eck_feedback
                  WHERE   type = 'review'
                  AND     node_id = :node_id
                  AND     status = 1
                  AND     completed = 1
                  AND     current = 1
               ";

      $count = db_query($query, $args)->fetchField();

      $max_review_count = 3;
      if ($count == $max_review_count) {
        $query = "  SELECT  id
                    FROM    eck_feedback
                    WHERE   type = 'review'
                    AND     node_id = :node_id
                    AND     status = 1
                    AND     completed = 1
                    AND     current = 1
                 ";

        $reviews = array();
        $result = db_query($query, $args);

        foreach ($result as $row) {
          $reviews[] = entity_load_single('feedback', $row->id);
        }

        // figure out the recommend/not values for workflow states
        $do_not = 0;
        $do_res = 0;
        $do     = 0;
        $do_dis = 0;

        foreach ($reviews as $entity) {
          $rec_value = field_entity_value($entity, 'field_rec_options');
          switch ($rec_value) {
            case 0: $do_not++; break; // do not recommend
            case 1: $do_res++; break; // recommend w/ reservations
            case 2: $do++;     break; // recommend
            case 3: $do_dis++; break; // recommend w/ distinction
          }
        }

        $task = FALSE;
        // post with distinction
        if ($do_dis == 3 || ($do_dis == 2 && $do == 1)) {
          $node->sticky = 1;
          node_save($node);

          // we need to go through the approved state in order to not confuse
          // workbench_moderation
          workbench_moderation_moderate($node, 'approved');
          workbench_moderation_moderate($node, 'published');

          $task = taskit_get_object('resource_published');
        }
        // post
        elseif (($do_dis == 1 && $do == 2) || $do == 3) {
          // we need to go through the approved state in order to not confuse
          // workbench_moderation
          workbench_moderation_moderate($node, 'approved');
          workbench_moderation_moderate($node, 'published');

          $task = taskit_get_object('resource_published');
        }
        // publishing workflow
        elseif (($do_dis == 2 && ($do_res == 1 || $do_not == 1)) || ($do_dis == 1 && $do == 1) || ($do == 2)) {
          // send to publisher
          workbench_moderation_moderate($node, 'approved');
        }
        // reject
        else {
          workbench_moderation_moderate($node, 'rejected');

          $task = taskit_get_object('resource_rejected');
        }

        send_review_notifications($task, $node, $reviews);
      }

      break;
  }

  $form_state['redirect'] = array(
    'node/' . $node->nid,
    array(
      'fragment' => 'review-qc',
    ),
  );
}

/**
 * Submit handler for ECK Post form.
 */
function feedback_eck_post_form_submit($form, &$form_state) {
  if ($form_state['values']['action'] == 'validate') {
    return;
  }

  $entity = $form_state['values']['entity'];
  $node = node_load($entity->node_id);
  global $user;

  // find the associated reviews
  $query = "  SELECT  id
              FROM    eck_feedback
              WHERE   type = 'review'
              AND     node_id = :node_id
              AND     status = 1
              AND     completed = 1
           ";

  $args = array(
    ':node_id' => $node->nid,
  );

  $reviews = array();
  $result = db_query($query, $args);
  foreach ($result as $row) {
    $reviews[] = entity_load_single('feedback', $row->id);
  }

  $task = FALSE;
  switch ($form_state['values']['action']) {
    // these are handled in the modal's submit callback
    case 'cancel':
    case 'start':
      break;

    case 'reject':
      $entity->completed = 1;
      entity_save('feedback', $entity);

      // reject resource so author can make changes and re-submit
      workbench_moderation_moderate($node, 'rejected');

      $task = taskit_get_object('resource_rejected');

      break;

    case 'post':
      $entity->completed = 1;
      entity_save('feedback', $entity);

      workbench_moderation_moderate($node, 'published');

      $task = taskit_get_object('resource_published');

      break;

    case 'post_distinction':
      $entity->completed = 1;

      // distinction = sticky
      $node->sticky = 1;
      node_save($node);

      workbench_moderation_moderate($node, 'published');

      $task = taskit_get_object('resource_published');

      break;
  }

  send_review_notifications($task, $node, $reviews);

  $form_state['redirect'] = 'node/' . $node->nid;
}

/**
 * Sets taskit notifications for resource author and reviewers.
 * @param  [type] $task    [description]
 * @param  [type] $node    [description]
 * @param  [type] $reviews [description]
 * @return [type]          [description]
 */
function send_review_notifications($task, $node, $reviews) {
  if ($task) {
    global $user;

    $task->addVisibility($task::VISIBILITY_USER);
    $task->addEntity('node', $node->nid);

    // resource contributor
    $task->addOwningUser($node->uid);
    // resource reviewers
    foreach ($reviews as $entity) {
      $task->addOwningUser($entity->uid);
    }

    $task->addTriggeringUser(1);
    $task->save();
  }
}
