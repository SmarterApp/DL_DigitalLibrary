<?php

/**
 * @file
 * Views row cache.
 */

/**
 * Implements hook_views_api().
 */
function views_row_cache_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_row_cache') . '/views',
  );
}

/**
 * Implements hook_flush_caches().
 */
function views_row_cache_flush_caches() {
  return array(views_row_cache_plugin_cache::CACHE_BIN);
}

/**
 * Checks whether row cache is enabled for the passed view.
 *
 * @param object $view
 *   A view object
 */
function views_row_cache_is_enabled($view) {
  return $view->display_handler->get_plugin('cache') instanceof views_row_cache_plugin_cache;
}

/**
 * Computes the row identifier.
 *
 * @param object $view
 *   The current view object.
 * @param object $row
 *   The view row to be identified.
 *
 * @return string
 *   The row identifier.
 */
function views_row_cache_get_row_id($view, $row) {
  $base_field = $view->field[$view->base_field];
  return $row->{$base_field->field_alias};
}

/**
 * Computes the row cache identifier.
 *
 * @param object $view
 *   The current view object.
 * @param object $row
 *   The row to be cached.
 *
 * @return string
 *   The row cache identifier.
 */
function views_row_cache_get_cid($view, $row) {
  if (!isset($row->views_row_cache_cid)) {
    $algo = variable_get('views_row_cache_hash_algo', 'md5');
    $hash_data = clone $row;
    drupal_alter('views_row_cache_hash_data', $hash_data, $view);
    $hash = hash($algo, serialize($hash_data));
    $row_id = views_row_cache_get_row_id($view, $row);
    $parts = array($view->name, $view->current_display, $row_id, $hash);
    module_load_include('inc', 'content', 'includes/language');
    $types = language_types_configurable();
    foreach ($types as $type) {
      $parts[] = $GLOBALS[$type]->language;
    }
    $row->views_row_cache_cid = implode(':', $parts);
  }
  return $row->views_row_cache_cid;
}

/**
 * Populates the row boundaries variable.
 *
 * @param array $variables
 *   A reference to a variables array.
 */
function views_row_cache_views_style_plugin_preprocess(&$variables) {
  $view = $variables['view'];
  $enabled = views_row_cache_is_enabled($view);
  foreach ($variables['rows'] as $index => $output) {
    if (!empty($view->result[$index])) {
      $row = $view->result[$index];
      $cid = $enabled ? views_row_cache_get_cid($view, $row) : -1;
      $variables['views_row_cache_boundary'][$index] = '<!-- views_row_cache_boundary: ' . $cid . ' -->';
    }
  }
  $variables['views_row_cache_boundary']['end_rows'] = '<!-- views_row_cache_boundary: -->';
}

/**
 * Preprocesses variables for hook 'views_view_grid'.
 */
function views_row_cache_preprocess_views_view_grid(&$variables) {
  views_row_cache_views_style_plugin_preprocess($variables);
}

/**
 * Preprocesses variables for hook 'views_view_list'.
 */
function views_row_cache_preprocess_views_view_list(&$variables) {
  views_row_cache_views_style_plugin_preprocess($variables);
}

/**
 * Preprocesses variables for hook 'views_view_table'.
 */
function views_row_cache_preprocess_views_view_table(&$variables) {
  views_row_cache_views_style_plugin_preprocess($variables);

  // Replace the 'active' class with our placeholders.
  if (views_row_cache_is_enabled($variables['view'])) {
    foreach ($variables['field_classes'] as $name => &$rows) {
      foreach ($rows as $index => &$classes) {
        $classes = str_replace(' active', '', $classes);
        $classes .= ' [views_row_cache:views_row_cache_replacement__table__active_column:0:' . $name .']';
      }
    }
  }
}

/**
 * Placeholder replacement callback. Adds the active column class for tables.
 */
function views_row_cache_replacement__table__active_column($view, $row, $row_id, $args) {
  $field = reset($args);
  $handler = $view->style_plugin;
  return !empty($handler->active) && $handler->active == $field ? 'active' : '';
}

/**
 * Preprocesses variables for hook 'views_view_unformatted'.
 */
function views_row_cache_preprocess_views_view_unformatted(&$variables) {
  views_row_cache_views_style_plugin_preprocess($variables);
}
