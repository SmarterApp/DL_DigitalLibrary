<?php

/**
 * @file
 * Primary file that contains the Google CDN functionality.
 */

// The minimum version number for the library.
define('GOOGLE_CDN_MINIMUM_VERSION', '0.6.7');
// The save button text for the admin form.
define('GOOGLE_CDN_ADMIN_SUBMIT_BUTTON', 'Save Configuration');
// The test button text for the admin form.
define('GOOGLE_CDN_ADMIN_TEST_CONNECTION_BUTTON', 'Test Connection');
// The google API domain.
define('GOOGLE_CDN_API_DOMAIN', 'storage.googleapis.com');

/**
 * Implements hook_menu().
 */
function google_cdn_menu() {
  $items = array();

  $items['admin/config/media/google_cdn'] = array(
    'title' => 'Google CDN',
    'description' => 'Configure Google credentials and settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_cdn_admin'),
    'access arguments' => array('administer google cdn'),
    'file' => 'google_cdn.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function google_cdn_help($path, $arg) {
  switch ($path) {
    case 'admin/config/media/google_cdn':
      return '<p>' . t("The Google CDN module allows for files to
      be uploaded and downloaded from Google's Cloud Storage. This
      administration page allows you to enter your connection
      details and test the connection.") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function google_cdn_permission() {
  return array(
    'administer google cdn' => array(
      'title' => t('Administer Google CDN'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function google_cdn_libraries_info() {
  // 0.6.7 or 1.0.5?
  $library_info = array();
  $library = array();
  $library['library path'] = 'sites/all/libraries/google-api-php-client';
  $options = array(
    'file' => 'src/Google/Client.php',
    'pattern' => '/const LIBVER = .(\d\.\d\.\d\-[a-z]+)./',
    'lines' => 45,
    'cols' => 200,
  );

  // Try 1.0.5 exists.
  $version = NULL;
  $version = libraries_get_version($library, $options);
  if ($version) {
    $library_info = array(
      'google-api-php-client' => array(
        'title' => 'Google SDK for PHP',
        'vendor url' => 'http://code.google.com/p/google-api-php-client/',
        'download url' => 'https://google-api-php-client.googlecode.com/files/google-api-php-client-0.6.7.tar.gz',
        'version arguments' => array(
          'file' => 'src/Google/Client.php',
          'pattern' => '/const LIBVER = .(\d\.\d\.\d\-[a-z]+)./',
          'lines' => 45,
          'cols' => 200,
        ),
        'files' => array(
          'php' => array(
            'src/Google/Client.php',
            'src/Google/Service/Storage.php',
          ),
        ),
      ),
    );
  }

  // Try 0.6.7.
  $path_to_lib = DRUPAL_ROOT . '/' . $library['library path'] . '/src/Google_Client.php';
  if (file_exists($path_to_lib)) {
    $library_info = array(
      'google-api-php-client' => array(
        'title' => 'Google SDK for PHP',
        'vendor url' => 'http://code.google.com/p/google-api-php-client/',
        'download url' => 'https://google-api-php-client.googlecode.com/files/google-api-php-client-0.6.7.tar.gz',
        'version arguments' => array(
          'file' => 'src/Google_Client.php',
        ),
        'files' => array(
          'php' => array(
            'src/Google_Client.php',
            'src/contrib/Google_StorageService.php',
          ),
        ),
        'version callback' => 'google_cdn_library_version_callback',
      ),
    );
  }

  return $library_info;
}

/**
 * Get version number.
 *
 * Custom callback that returns a version number
 * back to the Library API to allow it to load
 * the Google SDK correctly. Google does not save the
 * version number within the SDK.
 *
 * @param object $library
 *   The library object.
 *
 * @return string
 *   The version number.
 */
function google_cdn_library_version_callback($library) {
  $version = GOOGLE_CDN_MINIMUM_VERSION;
  return $version;
}

/**
 * Implements hook_stream_wrappers().
 *
 * Create a stream wrapper for Google CDN.
 */
function google_cdn_stream_wrappers() {
  return array(
    'gs' => array(
      'name' => 'Google CDN',
      'class' => 'GoogleCDNStreamWrapper',
      'description' => t('Google CDN (Google Cloud Storage)'),
    ),
  );
}

/**
 * Implements hook_file_download().
 *
 * Prevents users from trying to download
 * the p12 key.
 */
function google_cdn_file_download($uri) {
  if (strpos($uri, 'google_cdn') !== FALSE) {
    return -1;
  }
  return NULL;
}
