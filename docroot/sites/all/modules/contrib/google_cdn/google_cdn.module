<?php

/**
 * @file
 * Primary file that contains the Google CDN functionality.
 */

// The minimum version number for the library.
define('GOOGLE_CDN_MINIMUM_VERSION', '0.6.7');
// The save button text for the admin form.
define('GOOGLE_CDN_ADMIN_SUBMIT_BUTTON', 'Save Configuration');
// The test button text for the admin form.
define('GOOGLE_CDN_ADMIN_TEST_CONNECTION_BUTTON', 'Test Connection');
// The google API domain.
define('GOOGLE_CDN_API_DOMAIN', 'storage.googleapis.com');
// The legacy radio option for the version numbers.
define('GOOGLE_CDN_LIBRARY_VERSION_067', 1);
// The beta radio option for the version numbers.
define('GOOGLE_CDN_LIBRARY_VERSION_105BETA', 2);

/**
 * Implements hook_menu().
 */
function google_cdn_menu() {
  $items = array();

  $items['admin/config/media/google_cdn'] = array(
    'title' => 'Google CDN',
    'description' => 'Configure Google credentials and settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_cdn_admin'),
    'access arguments' => array('administer google cdn'),
    'file' => 'google_cdn.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function google_cdn_help($path, $arg) {
  switch ($path) {
    case 'admin/config/media/google_cdn':
      return '<p>' . t("The Google CDN module allows for files to
      be uploaded and downloaded from Google's Cloud Storage. This
      administration page allows you to enter your connection
      details and test the connection.") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function google_cdn_permission() {
  return array(
    'administer google cdn' => array(
      'title' => t('Administer Google CDN'),
    ),
  );
}

/**
 * Implements hook_init().
 *
 * Google's API PHP Client library does not
 * include its own files correctly. To fix this
 * in Drupal, we need to add the include path on every page call.
 */
function google_cdn_init() {
  $version = variable_get('google_cdn_library_version');
  if ($version == GOOGLE_CDN_LIBRARY_VERSION_105BETA) {
    $var = libraries_get_path('google-api-php-client') . '/src/';
    $local_file_path = realpath($var);
    set_include_path(get_include_path() . PATH_SEPARATOR . $local_file_path);
  }
}

/**
 * Implements hook_libraries_info().
 */
function google_cdn_libraries_info() {
  $library_info = array();
  $version = variable_get('google_cdn_library_version');
  if ($version == GOOGLE_CDN_LIBRARY_VERSION_105BETA) {
    $library_info = array(
      'google-api-php-client' => array(
        'title' => 'Google SDK for PHP',
        'vendor url' => 'http://code.google.com/p/google-api-php-client/',
        'download url' => 'https://google-api-php-client.googlecode.com/files/google-api-php-client-0.6.7.tar.gz',
        'version arguments' => array(
          'file' => 'src/Google/Client.php',
          'pattern' => '/const LIBVER = .(\d\.\d\.\d\-[a-z]+)./',
          'lines' => 45,
          'cols' => 200,
        ),
        'files' => array(
          'php' => array(
            'src/Google/Client.php',
            'src/Google/Service/Storage.php',
            'src/Google/Service/Drive.php',
          ),
        ),
      ),
    );
  }
  elseif ($version == GOOGLE_CDN_LIBRARY_VERSION_067) {
    $library_info = array(
      'google-api-php-client' => array(
        'title' => 'Google SDK for PHP',
        'vendor url' => 'http://code.google.com/p/google-api-php-client/',
        'download url' => 'https://google-api-php-client.googlecode.com/files/google-api-php-client-0.6.7.tar.gz',
        'version arguments' => array(
          'file' => 'src/Google_Client.php',
        ),
        'files' => array(
          'php' => array(
            'src/Google_Client.php',
            'src/contrib/Google_StorageService.php',
          ),
        ),
        'version callback' => 'google_cdn_library_version_callback',
      ),
    );
  }

  return $library_info;
}

/**
 * Get version number.
 *
 * Custom callback that returns a version number
 * back to the Library API to allow it to load
 * the Google SDK correctly. Google does not save the
 * version number within the SDK.
 *
 * @param object $library
 *   The library object.
 *
 * @return string
 *   The version number.
 */
function google_cdn_library_version_callback($library) {
  $version = GOOGLE_CDN_MINIMUM_VERSION;
  return $version;
}

/**
 * Implements hook_stream_wrappers().
 *
 * Create a stream wrapper for Google CDN.
 */
function google_cdn_stream_wrappers() {
  $version = variable_get('google_cdn_library_version');
  if ($version == GOOGLE_CDN_LIBRARY_VERSION_067) {
    return array(
      'gs' => array(
        'name' => 'Google CDN',
        'class' => 'GoogleCDNStreamWrapperLegacy',
        'description' => t('Google CDN - v0.6.7'),
      ),
    );
  }
  elseif ($version == GOOGLE_CDN_LIBRARY_VERSION_105BETA) {
    return array(
      'gs' => array(
        'name' => 'Google CDN',
        'class' => 'GoogleCDNStreamWrapperBeta',
        'description' => t('Google CDN - v1.0.5-beta'),
      ),
    );
  }
  else {
    $message = t('You must select a Google API library version in the configuration settings.');
    drupal_set_message($message, 'error');
    watchdog('Google CDN', $message);
  }
}

/**
 * Implements hook_file_download().
 *
 * Prevents users from trying to download
 * the p12 key and/or PEM key.
 */
function google_cdn_file_download($uri) {
  if (strpos($uri, 'google_cdn') !== FALSE) {
    return -1;
  }
  return NULL;
}

/**
 * Tests the connection to the google bucket.
 *
 * @param string $version
 *   The version number for the library.
 *
 * @return array
 *   The response coming back from the connection.
 */
function google_cdn_test_connection($version) {
  $google_cdn_service_account_name = variable_get('google_cdn_service_account_name');
  $google_cdn_key_file_path = variable_get('google_cdn_public_key_file_path');
  $google_cdn_bucket_name = variable_get('google_cdn_bucket_name');

  if ($version == GOOGLE_CDN_LIBRARY_VERSION_067) {
    $response = google_cdn_connect_to_legacy($google_cdn_service_account_name, $google_cdn_key_file_path, $google_cdn_bucket_name);
  }
  else {
    $response = google_cdn_connect_to_beta($google_cdn_service_account_name, $google_cdn_key_file_path, $google_cdn_bucket_name);
  }
  return $response;
}

/**
 * Connect to the bucket using the legacy library.
 *
 * @param string $google_cdn_service_account_name
 *   Google service account name.
 * @param string $google_cdn_key_file_path
 *   P12 key path.
 * @param $google_cdn_bucket_name
 *   Bucket name.
 *
 * @return array
 *   Returns an array with access token and bucket information, or empty.
 */
function google_cdn_connect_to_legacy($google_cdn_service_account_name, $google_cdn_key_file_path, $google_cdn_bucket_name) {
  try {
    $client = new Google_Client();
    // Replace this with your application name.
    $client->setApplicationName($google_cdn_service_account_name);
    // Replace this with the service you are using.
    $service = new Google_StorageService($client);
    // This file location should point to the private key file.
    $key = file_get_contents($google_cdn_key_file_path);
    $cred = new Google_AssertionCredentials(
    // Replace this with the email address from the client.
      $google_cdn_service_account_name,
      // Replace this with the scopes you are requesting.
      array('https://www.googleapis.com/auth/devstorage.read_write'),
      $key
    );

    $client->setAssertionCredentials($cred);
    if ($client->getAuth()->isAccessTokenExpired()) {
      $client->getAuth()->refreshTokenWithAssertion($cred);
    }
    $access_token = $client->getAccessToken();
    $bucket_info = $service->buckets->get($google_cdn_bucket_name);
    return array('bucket' => $bucket_info, 'access_token' => $access_token);
  }
  catch (Exception $e) {
    watchdog_exception('google_cdn', $e);
  }
  return array();
}

/**
 * Connect to the bucket using the beta library.
 *
 * @param string $google_cdn_service_account_name
 *   Google service account name.
 * @param string $google_cdn_key_file_path
 *   P12 key path.
 * @param string $google_cdn_bucket_name
 *   Bucket name.
 *
 * @return array
 *   Returns an array with access token and bucket information, or empty.
 */
function google_cdn_connect_to_beta($google_cdn_service_account_name, $google_cdn_key_file_path, $google_cdn_bucket_name) {
  try {
    $client = new Google_Client();
    // Replace this with your application name.
    $client->setApplicationName($google_cdn_service_account_name);
    // Replace this with the service you are using.
    $service = new Google_Service_Storage($client);
    // This file location should point to the private key file.
    $key = file_get_contents($google_cdn_key_file_path);
    $cred = new Google_Auth_AssertionCredentials(
    // Replace this with the email address from the client.
      $google_cdn_service_account_name,
      // Replace this with the scopes you are requesting.
      array('https://www.googleapis.com/auth/devstorage.read_write'),
      $key
    );

    $client->setAssertionCredentials($cred);
    if ($client->getAuth()->isAccessTokenExpired()) {
      $client->getAuth()->refreshTokenWithAssertion($cred);
    }
    $access_token = $client->getAccessToken();
    $bucket_info = $service->buckets->get($google_cdn_bucket_name);
    return array('bucket' => $bucket_info, 'access_token' => $access_token);
  }
  catch (Exception $e) {
    watchdog_exception('google_cdn', $e);
  }
  return array();
}
