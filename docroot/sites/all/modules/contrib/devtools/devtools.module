<?php

/*
  IN PROGRESS:
    - display suite

  TODO:
    - contextual links api
    - queue?
    - admin menu UI
    - relation
    - content migration
    - MSSQL DB abstraction
    - remote image class
    - base logging class
    - context UI
    - FAPI helpers
    - Field API helpers
    - interface cleanup tools
    - removing content types & users from search
*/

/*----------------------------------------------------------------------------
      SETUP & CONFIG
----------------------------------------------------------------------------*/
define('DEVTOOLS_PATH', drupal_get_path('module', 'devtools'));

// TODO: autoloading for core & pattern classes
module_load_include('inc', 'devtools', 'core/class.Log');
module_load_include('inc', 'devtools', 'core/class.Base');
module_load_include('inc', 'devtools', 'core/class.Core');
module_load_include('inc', 'devtools', 'core/class.Hooks');
module_load_include('inc', 'devtools', 'core/class.Request');
module_load_include('inc', 'devtools', 'core/class.Response');
module_load_include('inc', 'devtools', 'patterns/class.Singleton');

/*----------------------------------------------------------------------------
      DRUPAL HOOKS
----------------------------------------------------------------------------*/

/**
 * Implements hook_init().
 */
function devtools_init() {
  \devtools\Core::hook('init', NULL);
}

/**
 * Implements hook_theme().
 */
function devtools_theme($existing, $type, $theme, $path) {
  return \devtools\Core::hook('theme', array(), $existing, $type, $theme, $path);
}

/**
 * Implements hook_menu().
 */
function devtools_menu() {
  return \devtools\Core::hook('menu', array());
}

/**
 * Implements hook_entity_load().
 */
function devtools_entity_load($entities, $type) {
  \devtools\Core::hook('entity_load', NULL, $entities, $type);
}

/**
 * Implements hook_library_alter().
 */
function devtools_library_alter(&$libraries, $module) {
  \devtools\Core::hook('library_alter', NULL, $libraries, $module);
}

/**
 * Implements hook_js_alter().
 */
function devtools_js_alter(&$javascript) {
  \devtools\Core::hook('js_alter', NULL, $javascript);
}

/*----------------------------------------------------------------------------
      MODULE HOOKS
----------------------------------------------------------------------------*/

/**
 * Implements hook_ctools_plugin_api().
 */
function devtools_ctools_plugin_api($module, $api) {
  if (devtools_is_loaded('devtools', 'display_suite')) {
    foreach (array('ds', 'devtools') as $item) {
      if ($module == $item && $api == $item) {
        return array('version' => 1);
      }
    }
  }
}

/**
 * Implements hook_devtools_components();
 */
function devtools_devtools_components() {
  $components = array(
    'ajax' => array(),
    'array' => array(),
    'batch' => array(
      'files' => array(
        'class.Batch.inc',
      ),
    ),
    'block' => array(
      'dependencies' => array(
        'block',
      ),
    ),
    'cdn' => array(
      'files' => array(
        'class.CDN.inc',
        'class.CloudFront.inc',
      ),
      'dependencies' => array(
        'cdn',
      ),
    ),
    'date' => array(),
    'debug' => array(
      'files' => array(
        'class.Debug.inc',
      ),
    ),
    'dialog' => array(
      'dependencies' => array(
        'dialog',
      ),
    ),
    'display_suite' => array(
      'files' => array(
        'class.DisplaySuite.inc',
      ),
      'dependencies' => array(
        'ds',
      ),
    ),
    'entity' => array(),
    'field' => array(),
    'form' => array(),
    'http' => array(),
    'jquery' => array(),
    'js_suppress_alert' => array(),
    'js_watch_value' => array(),
    'state_required' => array(),
    'string' => array(),
    'taxonomy' => array(),
    'ui' => array(),
    'views' => array(
      'dependencies' => array(
        'views',
      ),
    ),
  );

  return $components;
}

/**
 * Implementation of hook_ds_fields_info();
 */
function devtools_ds_fields_info($entity_type) {
  return \devtools\Core::hook('ds_fields_info', array(), $entity_type);
}

/*----------------------------------------------------------------------------
      API
----------------------------------------------------------------------------*/

/**
 * Loads all components.
 */
function devtools_load($module = 'devtools', $name = NULL) {
  // load the requested component(s)
    $comp_list = array();

  // gather component names
    if (!is_null($name)) {
      // multiple components can be loaded by a single function call
      if (is_array($name)) {
        $comp_list += $name;
      }
      else {
        $comp_list[] = $name;
      }
    }
    else {
      // all components (default)
      $comp_list += array_keys(devtools_components($module));
    }

  // load components that haven't already been loaded
    foreach ($comp_list as $component) {
      if (!devtools_is_loaded($module, $component)) {
        devtools_is_loaded($module, $component, (bool) devtools_load_component($module, $component));
      }
    }
}

/**
 * Loads single component.
 * @param  [type] $module [description]
 * @param  [type] $name   [description]
 * @return [type]         [description]
 */
function devtools_load_component($module, $name) {
  // statically cache available components
    $components = &drupal_static(__FUNCTION__);
    if (!isset($components[$module])) {
      $components[$module] = devtools_components($module);
    }

  // basic validation
    if (!isset($components[$module][$name])) {
      drupal_set_message(t('Component %name not defined.', array('%name' => $name)), 'error');
      return FALSE;
    }

  // ensure dependencies are met, otherwise don't load component
    $component = $components[$module][$name];
    $component['access'] = TRUE;

    if (isset($component['dependencies'])) {
      foreach ($component['dependencies'] as $dep_module) {
        if (!module_exists($dep_module)) {
          $component['access'] = FALSE;
          break;
        }
      }
    }

  // load component's files
    if ($component['access']) {
      if (!isset($component['files'])) {
        $component['files'] = array();
      }

      // always check for the hooks class
      if (!in_array('class.Hooks.inc', $component['files'])) {
        $component['files'][] = 'class.Hooks.inc';
      }

      // always check for a general component include file
      if (!in_array($name . '.inc', $component['files'])) {
        $component['files'][] = $name . '.inc';
      }

      // always check for an access include file
      if (!in_array($name . '.access.inc', $component['files'])) {
        $component['files'][] = $name . '.access.inc';
      }

      $path = drupal_get_path('module', $module) . '/components/';

      // files can be located in a non-standard folder specified by the 'folder' key
      // TODO: support for multiple files from different folders
      if (isset($component['folder'])) {
        $component_path = $path . $component['folder'] . '/';
      }
      else {
        $component_path = $path . $name . '/';
      }

      foreach ($component['files'] as $file) {
        $file_path = $component_path . $file;

        if (file_exists($file_path)) {
          require_once($file_path);
        }
      }
    }
  
  return TRUE;
}

/**
 * Tracks loaded components.
 * @param  [type] $module [description]
 * @param  [type] $name   [description]
 * @param  [type] $state  [description]
 * @return [type]         [description]
 */
function devtools_is_loaded($module, $name, $state = NULL) {
  // track loaded components in static cache
    $loaded = &drupal_static(__FUNCTION__);
    if (!isset($loaded[$module])) {
      $loaded[$module] = array();
    }

  // set the component's loaded state
    if (!is_null($state)) {
      $loaded[$module][$name] = $state;
    }

  // return the loaded state
    if (isset($loaded[$module][$name])) {
      return $loaded[$module][$name];
    }

    return FALSE;
}

/**
 * Finds & returns component definitions.
 */
function devtools_components($module) {
  $function = $module . '_devtools_components';

  if (function_exists($function)) {
    return $function();
  }

  return array();
}

/**
 * Ensures the core devtools JS is loaded whenever a component loads JS;
 * wrapper for drupal_add_js();
 * @return [type] [description]
 */
function devtools_add_js() {
  // devtools JS must always be loaded before the components' JS
  drupal_add_js(DEVTOOLS_PATH . '/js/devtools.js', array('weight' => -10));

  call_user_func_array('drupal_add_js', func_get_args());
}

/**
 * Wrapper for drupal_add_css();
 * @return [type] [description]
 */
function devtools_add_css() {
  call_user_func_array('drupal_add_css', func_get_args());
}

/*----------------------------------------------------------------------------
      HELPERS
----------------------------------------------------------------------------*/

/**
 * Checks for the presence of a handler override for the specified function
 * and calls that handler.
 * @param  [type] $function [description]
 * @param  [type] $args     [description]
 * @return [type]           [description]
 */
function devtools_func_handler($function, $args) {
  $handler = FALSE;
  $return = NULL;

  $var = '_devtools_handler_' . $function;
  if (isset($GLOBALS[$var]) && function_exists($GLOBALS[$var])) {
    $handler = $GLOBALS[$var];
    $return = call_user_func_array($handler, $args);
  }
  
  return array($handler, $return);
}