<?php
/**
 * @file
 * Primary hook implementations for the Phonetic module.
 */

/**
 * Implements hook_help().
 */
function phonetic_help($path, $arg) {
  if ($path == 'admin/modules#phonetic') {
    return t('Filter profanity words and similar sounding synonyms out of user generated content.');
  }
}

/**
 * Implements hook_permission().
 */
function phonetic_permission() {
  return array(
    'administer phonetic filter' => array(
      'title' => t('Administer Phonetic filter'),
      'description' => t('Perform administration tasks on phonetic filter.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function phonetic_menu() {
  $items = array();
  $items['admin/config/content/phoneticfilter'] = array(
    'title' => 'Phonetic filter',
    'description' => 'Customize the options for the phonetic text filter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('phonetic_admin_settings'),
    'access arguments' => array('administer phonetic filter'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Form callback: Administration settings for phonetic filter.
 */
function phonetic_admin_settings() {
  // Reformat blacklist to get original words.
  $blacklist = variable_get('phonetic_blacklist', '');
  if (is_array($blacklist)) {
    $blacklist = join("\n", array_keys($blacklist));
  }

  $form = array();

  // General settings.
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => 'General settings',
  );
  $form['general']['phonetic_node_title'] = array(
    '#title' => t('Filter node titles'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('phonetic_node_title', FALSE),
    '#description' => t('Check this if you would like to filter node titles.'),
  );
  $form['general']['phonetic_replacement_char'] = array(
    '#title' => t('Replacement character'),
    '#type' => 'textfield',
    '#size'=> 2,
    '#default_value' => variable_get('phonetic_replacement_char', '*'),
    '#description' => t('Specify the character that will be used to replace filtered words.'),
  );

  // Word lists.
  $form['words'] = array(
    '#type' => 'fieldset',
    '#title' => 'Word lists',
  );
  $form['words']['phonetic_blacklist'] = array(
    '#title' => t('blacklist'),
    '#type' => 'textarea',
    '#default_value' => $blacklist,
    '#description' => t('Enter all unwanted words. Type one word per line. See WORDS.txt in the module directory.'),
    '#element_validate' => array('_phonetic_format_blacklist'),
  );
  $form['words']['phonetic_whitelist'] = array(
    '#title' => t('Whitelist'),
    '#type' => 'textarea',
    '#default_value' => variable_get('phonetic_whitelist', ''),
    '#description' => t('Enter all words which got accidentely filtered by this module. Type one word per line.'),
  );

  return system_settings_form($form);
}

/**
 * Element validate: associate the blacklist words with their phonetic key.
 */
function _phonetic_format_blacklist($element, &$form_state) {
  $words = explode("\n", $form_state['values']['phonetic_blacklist']);

  // Array cleanup.
  $words = array_map('trim', $words);
  $words = array_filter($words, 'strlen');
  $words = array_unique($words);

  $blacklist = array();
  foreach ($words as $word) {
    $word = trim($word);
    $word = strtolower($word);
    $blacklist[$word] = metaphone($word);
  }

  $form_state['values']['phonetic_blacklist'] = $blacklist;
}

/**
 * Implements hook_filter_info().
 */
function phonetic_filter_info() {
  $filters['phonetic'] = array(
    'title' => t('Phonetic word filter'),
    'process callback' => '_phonetic_apply_filter',
    'settings callback' => '_phonetic_filter_phonetic_settings',
    'description' => phonetic_help('admin/modules#phonetic', ''),
  );
  return $filters;
}

/**
 * Implements hook_filter_FILTER_settings().
 */
function _phonetic_filter_phonetic_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $elements = array();
  $elements['phonetic'] = array(
    '#type' => 'markup', 
    '#markup' => '<h4>' . t('Phonetic Word filter') . "</h4>\n"
      . '<p>' . t('The global list of words to be filtered can be managed on the <a href="!url">phonetic wordfilter settings page</a>.', array('!url' => url('admin/config/content/phoneticfilter'))) . "</p>\n",
  );
  return $elements;
}

/**
 * Implements hook_node_presave().
 *
 * Optionally update all node titles prior to saving. Note: it is assumed that
 * all existing node titles are OK, if any need to be filtered just resave them
 * in order to trigger the filter.
 */
function phonetic_node_presave($node) {
  if (!empty($node->title) && variable_get('phonetic_node_title', FALSE)) {
    $node->title = _phonetic_apply_filter($node->title);
  }
}

/**
 * Apply the phonetic filter to a given string.
 *
 * @param $text
 *   Text to be processed.
 * @return mixed
 *   Filtered text.
 */
function _phonetic_apply_filter($text) {
  // Load the words blacklist.
  $blacklist = variable_get('phonetic_blacklist', '');
  if (!is_array($blacklist)) {
    $blacklist = explode("\n", $blacklist);
  }

  // Load the whitelist.
  $whitelist = variable_get('phonetic_whitelist', '');
  if (!is_array($whitelist)) {
    $whitelist = explode("\n", $whitelist);
  }

  $char = variable_get('phonetic_replacement_char', '*');;
  $words = str_word_count(strip_tags($text), 2);

  foreach ($words as $word) {
    $metaphone = metaphone($word);
    foreach ($blacklist as $original => $phonetic) {
      // Phonetic filtering.
      if ($phonetic == $metaphone) {
        // Whitelist filtering.
        if (!in_array($word, $whitelist)) {
          // Similarity comparison.
          $compare = similar_text(strtolower($word), $original);
          if (strlen($original) == $compare) {
            // Replacement.
            $replace = str_pad('', strlen($word), $char);
            $text = str_replace($word, $replace, $text);
            // Word replaced, no need to go further in the blacklist.
            break;
          }
        }
      }
    }
  }
  return $text;
}
