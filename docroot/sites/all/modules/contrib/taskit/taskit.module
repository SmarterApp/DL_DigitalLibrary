<?php

/*----------------------------------------------------------------------------
      DRUPAL HOOKS
----------------------------------------------------------------------------*/

define('TASKIT_PER_PAGE', 20);

/**
 * Implements hook_menu().
 */
function taskit_menu() {
  $items['admin/config/system/taskit'] = array(
    'title' => 'Taskit', 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taskit_admin_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'taskit.admin.inc',
  );

  $items['admin/config/system/taskit/settings'] = array(
    'title' => 'Settings', 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taskit_admin_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'taskit.admin.inc',
    'weight' => 0,
  );

  $items['admin/config/system/taskit/roles'] = array(
    'title' => 'Roles', 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taskit_admin_type_role_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'taskit.admin.inc',
    'weight' => 2,
  );

  $items['user/%user/taskit'] = array(
    'title' => 'Tasks', 
    'title callback' => 'taskit_menu_title',
    'page callback' => 'taskit_page', 
    'page arguments' => array(1),
    'access callback' => 'taskit_task_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  $items['taskit/state/%/%taskit/%'] = array(
    'title' => 'Task state callback', 
    'page callback' => 'taskit_state', 
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['taskit/view'] = array(
    'title' => 'View task',
    'page callback' => 'taskit_view',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['taskit-load-more'] = array(
    'title' => 'Taskit Load More',
    'page callback' => 'taskit_load_more',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function taskit_theme($existing, $type, $theme, $path) {
  $base = array(
    'path' => drupal_get_path('module', 'taskit') . '/theme',
    'file' => 'theme.inc',
  );

  $theme = array(
    'taskit_tabs' => array(
      'variables' => array(
        'tabs' => NULL,
      ),
    ),
    'taskit_interval' => array(
      'variables' => array(
        'interval' => NULL,
        'content' => NULL,
        'js_interval' => NULL,
      ),
    ),
    'taskit_row' => array(
      'variables' => array(
        'class' => NULL,
        'item' => NULL,
        'raw' => NULL,
      ),
    ),
    'taskit_row_historical' => array(
      'variables' => array(
        'class' => NULL,
        'item' => NULL,
        'raw' => NULL,
      ),
    ),
  );

  foreach ($theme as &$item) {
    $item += $base;
  }

  return $theme;
}

/**
 * Implementation of hook_permissions();
 */
function taskit_permission() {
  $perms = array(
    'view own taskit tasks' => array(
      'title' => t('View and modify own taskit tasks'),
    ),
    'view any taskit tasks' => array(
      'title' => t('View and modify any taskit tasks'),
    ),    
  );

  return $perms;
}

/**
 * Implementation of hook_form_alter();
 */
function taskit_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_profile_form' && $enabled = variable_get('taskit_email', 0)) {
    $form['taskit'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notifications'),
      '#collapsible' => TRUE,
    );

    $status = db_select('taskit_notify', 'n')->fields('n', array('status'))->condition('uid', $form['#user']->uid)->execute()->fetchField();
    $form['taskit']['taskit_status'] = array(
      '#type' => 'checkbox',
      '#title' => t('Receive daily email alert for unread notifications.'),
      '#default_value' => $status ? 1 : 0,
    );

    $form['#submit'][] = 'taskit_user_profile_form_submit';
  }
}

/**
 * Implements hook_cron();
 */
function taskit_cron() {
  if (!$enabled = variable_get('taskit_email', 0)) {
    return;
  }

  $query = "  SELECT      n.uid,
                          COUNT(t.task_id) AS new_tasks
              FROM        taskit_notify n
              INNER JOIN  taskit_user_owner o
                ON        n.uid = o.user_id
              INNER JOIN  taskit t
                ON        t.task_id = o.task_id
              LEFT JOIN   taskit_removed r
                ON        t.task_id = r.task_id
                AND       r.user_id = o.user_id
              WHERE       n.status = 1
             -- AND         (unix_timestamp() - n.last_sent > (60*60*24))
              AND         t.viewed = 0
              AND         r.user_id IS NULL
              ORDER BY    n.last_sent ASC
           ";

  $result = db_query($query);

  foreach ($result as $row) {
    $recipient_account = user_load($row->uid);

    $subject = t('New notifications.');

    $message = format_username($recipient_account) . ', you have ' . format_plural($row->new_tasks, '1 new notification', '@count new notifications') . "\n\n";
    $message .= 'View your notifications at ' . url('user/' . $row->uid . '/taskit', array('absolute' => TRUE));

    if ($recipient_account) {
      $language = user_preferred_language($recipient_account);
    }
    else {
      $language = language_default();
    }

    $params = array('context' => array(
      'subject' => $subject,
      'message' => $message,
    ));

    if (drupal_mail('system', 'action_send_email', $recipient_account->mail, $language, $params)) {
      db_query("UPDATE taskit_notify SET last_sent = unix_timestamp() WHERE uid = :uid", array(':uid' => $row->uid));
    }
  }
}

/*----------------------------------------------------------------------------
      PATH CALLBACKS
----------------------------------------------------------------------------*/

/**
 * Callback for /user/%user/taskit
*/
function taskit_page($account, $role = NULL) {
  $output = '';

  // if the role argument is empty, pull in the highest access role id
  if (is_null($role)) {
    // get a list of role ids from highest to lowest access level
    $rids = array_reverse(array_keys(taskit_role_priority()));

    // find the highest access level role the user has, and redirect to the
    // tasks page for that role
    $account_rids = array_keys($account->roles);

    foreach ($rids as $rid) {
      if (in_array($rid, $account_rids)) {
        $role = $rid;
        break;
      }
    }
  }

  // if the role is still null, then we couldn't find an appropriate role id
  // and the user isn't allowed to access the page
  if (is_null($role)) {
    drupal_access_denied();
  }

  // when requesting task history, set a flag
  $history = FALSE;
  if ($role === 'history') {
    $history = TRUE;
  }
  elseif ($role !== 'history' && (!is_numeric($role) || !$role = user_role_load($role))) {
    return FALSE;
  }

  $row_count = 0;
  if ($types = taskit_types()) {
    $breakdown = variable_get('taskit_breakdown');
    if ($breakdown == 'role') {
      // build role tabs
      $tabs = array();
      $roles = taskit_role_priority();
      $counts = taskit_count_tasks($account->uid, array_keys($roles));
      // remove any roles the user is not assigned to
      $roles = array_intersect($roles, $account->roles);
      foreach ($roles as $rid => $role_name) {
        $count = 0;
        if (isset($counts[$rid])) {
          $count = $counts[$rid];
        }

        $extra = '<span class="count">' . $count . '</span><span class="bottom"></span>';
        $tabs[] = l($role_name . $extra, 'user/' . $account->uid . '/taskit/' . $rid, array('html' => TRUE));
      }
      $tabs[] = l(t('history'), 'user/' . $account->uid . '/taskit/history');
      $tabs = theme('item_list', array('items' => $tabs));
      $output .= theme('taskit_tabs', array('tabs' => $tabs));
    }

    // get time intervals & display content
    foreach (taskit_time_intervals() as $interval) {
      $interval_output = '';
      if ($history) {
        $theme_callback = 'taskit_row_historical';
        $taskit_results = taskit_get_history($interval['from'], $interval['to'], $account->roles, $account->uid);
      }
      else {
        $theme_callback = 'taskit_row';
        $taskit_results = taskit_get_tasks($interval['from'], $interval['to'], $role->rid, $account->uid, $breakdown);
      }

      foreach($taskit_results['results'] as $row) {
        $task = taskit_get_object($row->type, $row->task_id);
        if (!$task) {
          continue;
        }
        if (in_array($interval['name'], array('today', 'yesterday', 'prior'))) {
          $task->setDateFormat('g:ia');
        }
        else {
          $task->setDateFormat('M j, g:ia');
        }
        if ($task->getState() & taskit\Task::STATE_COMPLETED) {
          $task->is_completed = TRUE;
        }
        if ($rendered_taskit = $task->processDisplay($task->getEntities(), $task->getTriggeringUsers())) {
          $vars = array(
            'class' => taskit_zebra($interval['name']),
            'rendered' => $rendered_taskit,
            'task' => $task,
          );
          $interval_output .= theme($theme_callback, $vars);
        }
        $row_count++;
      }

      if (!empty($interval_output)) {
        // TODO: move this dependency out of here
        drupal_add_library('dialog', 'dialog');
        $output .= theme('taskit_interval', array(
          'content' => $interval_output,
          'interval' => $interval,
          'js_interval' => NULL,
        ));
      }

      if ($row_count == TASKIT_PER_PAGE) {
        break;
      }
    }
  }

  if (empty($output)) {
    $output = '<div id="taskit-empty">' . t('No notifications.') . '</div>';
  }

  if ($row_count >= TASKIT_PER_PAGE) {
    drupal_add_js(drupal_get_path('module', 'taskit') . '/js/taskit.js');
    drupal_add_css(drupal_get_path('module', 'taskit') . '/css/taskit.css');
    $output .= '<a href="#" id="taskit-load-more" interval="interval-' . $interval['name'] . '" page="1" role="' . $role->rid . '" class="button green">Load More</a>';
  }

  return $output;
}

/**
 * Loads more content for the ajax call.
 *
 */
function taskit_load_more() {
  $output = '';
  $json_response = '';
  $role = NULL;
  global $user;
  $account = $user;
  $role = $_POST['role'];
  $page = $_POST['page'];
  $js_interval = $_POST['interval'];

  // if the role is still null, then we couldn't find an appropriate role id
  // and the user isn't allowed to access the page
  if (is_null($role) || is_null($page)) {
    $json_response['result'] = FALSE;
    print drupal_json_encode($output);
    exit;
  }

  // when requesting task history, set a flag
  $history = FALSE;
  if ($role === 'history') {
    $history = TRUE;
  }
  elseif (!$role = user_role_load($role)) {
    $json_response['result'] = FALSE;
    print drupal_json_encode($output);
    exit;
  }

  $interval_count = 0;
  $row_count = 0;
  $remove_load_more = TRUE;
  if ($types = taskit_types()) {
    $breakdown = variable_get('taskit_breakdown');
    // get time intervals & display content
    foreach (taskit_time_intervals() as $interval) {
      $interval_output = '';
      if ($history) {
        $theme_callback = 'taskit_row_historical';
        $taskit_results = taskit_get_history($interval['from'], $interval['to'], $account->roles, $account->uid, $page);
      }
      else {
        $theme_callback = 'taskit_row';
        $taskit_results = taskit_get_tasks($interval['from'], $interval['to'], $role->rid, $account->uid, $breakdown, $page);
      }

      foreach($taskit_results['results'] as $row) {
        $task = taskit_get_object($row->type, $row->task_id);
        if (!$task) {
          continue;
        }
        if (in_array($interval['name'], array('today', 'yesterday', 'prior'))) {
          $task->setDateFormat('g:ia');
        }
        else {
          $task->setDateFormat('M j, g:ia');
        }
        if ($task->getState() & taskit\Task::STATE_COMPLETED) {
          $task->is_completed = TRUE;
        }
        if ($rendered_taskit = $task->processDisplay($task->getEntities(), $task->getTriggeringUsers())) {
          $vars = array(
            'class' => taskit_zebra($interval['name']),
            'rendered' => $rendered_taskit,
            'task' => $task,
          );
          $interval_output .= theme($theme_callback, $vars);
        }
        $row_count++;
      }

      if (!empty($interval_output)) {
        // TODO: move this dependency out of here
        drupal_add_library('dialog', 'dialog');
        $output = theme('taskit_interval', array(
          'content' => $interval_output,
          'interval' => $interval,
          'js_interval' => $js_interval,
        ));
        $json_response['intervals'][$interval_count]['name'] = 'interval-' . $interval['name'];
        $json_response['intervals'][$interval_count]['content'] = $output;
        $interval_count++;
      }

      if ($row_count >= TASKIT_PER_PAGE) {
        $remove_load_more = FALSE;
        break;
      }
    }
  }

  $json_response['remove_load_more'] = $remove_load_more;
  print drupal_json_encode($json_response);
  exit;
}

/**
 * Menu callback for state change at /taskit/state/%/%taskit/%
 */
function taskit_state($js = 'nojs', $task, $op) {
  global $user;

  if ($op == 'complete') {
    $task->addState($task::STATE_COMPLETED);
    $task->save();
  }
  elseif ($op == 'remove') {
    $task->remove($user->uid);
  }

  if ($js == 'ajax') {
    $commands = array();
    $commands[] = ajax_command_remove('#taskit-' . $task->getTaskId());
    
    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  }
  else {
    drupal_goto('user/' . $user->uid . '/taskit');
  }  
}

/**
 * Menu callback for taskit link passthroughs as /taskit/view/%taskit/
 * @return [type] [description]
 */
function taskit_view() {
  $args = func_get_args();
  $task = taskit_load($task_id = array_shift($args));
  $task->setViewed();
  $task->save(FALSE, $uid = array_shift($args));

  if ($args) {
    $uri = implode('/', $args);
    drupal_goto($uri);
  }
  
  exit();
}

/*----------------------------------------------------------------------------
      OTHER CALLBACKS
----------------------------------------------------------------------------*/

/**
 * Access callback for user/%user/taskit
 */
function taskit_task_access($account = NULL) {
  global $user;

  if (($account->uid == $user->uid && user_access('view own taskit tasks')) || user_access('view any taskit tasks')) {
    $query = db_select('taskit_role', 'tr');
    $query->addExpression('COUNT(role_id)');
    $query->condition('role_id', $account->roles, 'IN');
    $count = $query->execute()->fetchCol();

    if ($count) {
      return TRUE;
    }
  }
  
  return FALSE;
}

/**
 * Title callback for user/%user/taskit
 */
function taskit_menu_title() {
  global $user;

  $counts = taskit_count_tasks($user->uid, array_keys($user->roles), TRUE);
  $total = array_sum($counts);

  $title = t('Tasks');

  if ($total) {
    $title .= ' (' . $total . ')';
  }

  return $title;
}

/*----------------------------------------------------------------------------
      FORMS
----------------------------------------------------------------------------*/

/**
 * Submit handler for user account form 
 */
function taskit_user_profile_form_submit($form, &$form_state) {
  $status = 0;
  if (isset($form_state['values']['taskit_status']) && $form_state['values']['taskit_status']) {
    $status = 1;
  }

  db_query("DELETE FROM taskit_notify WHERE uid = :uid", array(':uid' => $form_state['values']['uid']));
  db_query("INSERT INTO taskit_notify (uid, status) VALUES (:uid, :status)", array(':uid' => $form_state['values']['uid'], ':status' => $status));
}

/*----------------------------------------------------------------------------
      API
----------------------------------------------------------------------------*/

/**
 * Finds tasks provided by child modules, loads required files, checks for
 * existence of class declaration, and returns a list of validated tasks
 * with full (namespace'd) classname.
 * 
 * @return array List of validated task classes.
 */
function taskit_types() {
  $types = &drupal_static(__FUNCTION__);

  if (!empty($types)) {
    return $types;
  }
  else {
    $types = array();
  }

  module_load_include('inc', 'taskit', 'includes/class.Base');
  module_load_include('inc', 'taskit', 'includes/class.Task');

  foreach (module_implements('taskit_types') as $module) {
    foreach ((array) module_invoke($module, 'taskit_types') as $type) {
      if (isset($type['file']) && file_exists($type['file'])) {
        require_once($type['file']);
      }

      $class = 'taskit\\' . $module . '\\' . $type['class'];

      if (!class_exists($class)) {
        $error_message = t('Taskit type class %class cannot be found.', array('%class' => $type['class']));
        drupal_set_message($error_message, 'error');
      }
      else {
        $type['full_class'] = $class;
        $types[$type['name']] = $type;
      }
    }
  }

  return $types;
}

/**
 * Returns instance of class for specified type name;
 * 
 * @param  string $type_name Machine name of task type.
 * @param  int $task_id Task id.
 * @return object            Instance of task type class.
 */
function taskit_get_object($type_name, $task_id = 0) {
  $types = taskit_types();

  if (isset($types[$type_name])) {
    return new $types[$type_name]['full_class']($type_name, $task_id);
  }

  return FALSE;
}

/**
 * Loads task by id.
 * 
 * @param  [type] $task_id [description]
 * @return [type]          [description]
 */
function taskit_load($task_id) {
  $type = db_query('SELECT type FROM taskit WHERE task_id = :task_id', array(':task_id' => $task_id))->fetchField();
  
  return taskit_get_object($type, $task_id);
}

/**
 * Pulls up tasks and returns database result.
 * 
 * @param  int    $from       Timestamp
 * @param  int    $to         Timestamp
 * @param  int    $rid        Role id
 * @param  int    $uid        User id
 * @param  string $breakdown  The task breakdown type.
 * @return object    Database result
 */
function taskit_get_tasks($from, $to, $rid, $uid, $breakdown, $page = NULL) {
  $query = '';
  if ($breakdown == 'role') {
    $query .= " LEFT JOIN   taskit_role tr
                  ON        tr.type = t.type
              ";
  }

  $query .= " LEFT JOIN   taskit_user_owner tuo
                ON        tuo.task_id = t.task_id

              LEFT JOIN   taskit_removed trr
                ON        trr.task_id = t.task_id

              -- restrict by time period
              WHERE       t.created >= :from
              AND         t.created < :to

              -- restrict by state
              AND         !(t.state & :state_completed)

              -- restrict by removal
              AND         trr.user_id IS NULL
            ";

  if ($breakdown == 'role') {
    $query .= " -- restrict by visibility options using bitwise comparisons
                AND  CASE 
                     WHEN (t.visibility & :visibility_role & :visibility_user)
                          THEN tr.role_id = :rid AND tuo.user_id = :uid
                     WHEN (t.visibility & :visibility_role)
                          THEN tr.role_id = :rid
                     WHEN (t.visibility & :visibility_user)
                          THEN tuo.user_id = :uid
                     ELSE 0
                END
              ";
  }
  else {
    $query .= " -- restrict by visibility options using bitwise comparisons
                AND  CASE 
                     WHEN (t.visibility & :visibility_role & :visibility_user)
                          THEN tuo.user_id = :uid
                     WHEN (t.visibility & :visibility_role)
                          THEN 1
                     WHEN (t.visibility & :visibility_user)
                          THEN tuo.user_id = :uid
                     ELSE 0
                END
              ";
  }

  $query .= " -- group by task id to eliminate duplicates
              GROUP BY    t.task_id
              ORDER BY    t.created DESC
           ";

  $args = array(
    ':from' => $from,
    ':to'   => $to,
    ':uid'  => $uid,
    ':state_completed' => taskit\Task::STATE_COMPLETED,
    ':visibility_user' => taskit\Task::VISIBILITY_USER,
    ':visibility_role' => taskit\Task::VISIBILITY_ROLE,
  );

  if ($breakdown == 'role') {
    $args[':rid'] = $rid;
  }

  $run_query = "SELECT  t.task_id, t.type FROM taskit t";
  $run_query .= $query;
  if ($page) {
    $page = $page * TASKIT_PER_PAGE;
    $results = db_query_range($run_query, $page, TASKIT_PER_PAGE, $args);
  }
  else {
    $results = db_query_range($run_query, 0, TASKIT_PER_PAGE, $args);
  }
  return array('results' => $results);
}

/**
 * [taskit_count_tasks description]
 * @param  int     $uid  User id
 * @param  array   $rids Role ids
 * @param  boolean $new  [description]
 * @return [type]        [description]
 */
function taskit_count_tasks($uid, $rids, $new = FALSE) {
  module_load_include('inc', 'taskit', 'includes/class.Base');
  module_load_include('inc', 'taskit', 'includes/class.Task');

  $counts = &drupal_static(__FUNCTION__);
  $type = $new ? 'unread' : 'all';

  if (is_null($counts)) {
    $counts = array(
      'unread' => NULL,
      'all' => NULL,
    );
  }

  if (is_null($counts[$type])) {
    $counts[$type] = array();

    $new_join = '';
    $new_condition = '';
    if ($new) {
      $visibility_type = variable_get('taskit_visibility', 'global');
      if ($visibility_type == 'global') {
        $new_condition = ' AND t.viewed = 0 ';
      }
      elseif ($visibility_type == 'user') {
        $new_join = ' LEFT JOIN   taskit_viewed tv
                        ON        tv.task_id = t.task_id
                        AND       tv.user_id = :uid
                    ';

        $new_condition = ' AND tv.user_id IS NULL ';
      }
    }
    
    $query = "  SELECT      COUNT(t.task_id) AS count,
                            tr.role_id AS role_id
                FROM        taskit t

                LEFT JOIN   taskit_role tr
                  ON        tr.type = t.type

                LEFT JOIN   taskit_user_owner tuo
                  ON        tuo.task_id = t.task_id

                LEFT JOIN   taskit_removed trr
                  ON        trr.task_id = t.task_id
                  AND       trr.user_id = tuo.user_id

                " . $new_join . "

                -- restrict by state
                WHERE       !(t.state & :state_completed)

                -- restrict by removal
                AND         trr.user_id IS NULL

                -- restrict by visibility options using bitwise comparisons
                AND         CASE 
                                 WHEN (t.visibility & :visibility_role & :visibility_user)
                                      THEN tr.role_id IN (:rids) AND tuo.user_id = :uid
                                 WHEN (t.visibility & :visibility_role)
                                      THEN tr.role_id IN (:rids)
                                 WHEN (t.visibility & :visibility_user)
                                      THEN tuo.user_id = :uid
                                 ELSE 0
                            END

                " . $new_condition . "

                -- group by task id to eliminate duplicates
                GROUP BY    tr.role_id
             ";
;
    $args = array(
      ':rids'  => $rids,
      ':uid'   => $uid,
      ':state_completed' => taskit\Task::STATE_COMPLETED,
      ':visibility_user' => taskit\Task::VISIBILITY_USER,
      ':visibility_role' => taskit\Task::VISIBILITY_ROLE,
    );

    $result = db_query($query, $args);

    foreach ($result as $row) {
      if (!isset($row->role_id)) {
        $row->role_id = '_no_role_';
      }

      $counts[$type][$row->role_id] = $row->count;
    }
  }

  if (!isset($counts[$type]['_no_role_'])) {
    $counts[$type]['_no_role_'] = 0;
  }

  // print_rr($counts);exit();

  return $counts[$type];
} 

/**
 * Pulls up completed or removed tasks (history).
 *
 * @param  int $from Timestamp
 * @param  int $to   Timestamp
 * @param  int $roles  User id 
 * @param  int $uid  User id
 * @return object    Database result
 */
function taskit_get_history($from, $to, $roles, $uid, $page = NULL) {
  $query = "  LEFT JOIN   taskit_role tr
                ON        tr.type = t.type

              LEFT JOIN   taskit_user_owner tuo
                ON        tuo.task_id = t.task_id

              LEFT JOIN   taskit_removed trr
                ON        trr.task_id = t.task_id

              -- restrict by time period
              WHERE       t.created >= :from
              AND         t.created < :to

              -- restrict by state AND/OR removal
              AND         (
                            (t.state & :state_completed)
                              OR
                            (trr.user_id IS NOT NULL)
                          )

              -- restrict by visibility options using bitwise comparisons
              AND         CASE 
                               WHEN (t.visibility & :visibility_role & :visibility_user)
                                    THEN tr.role_id IN (:rids) AND tuo.user_id = :uid
                               WHEN (t.visibility & :visibility_role)
                                    THEN tr.role_id IN (:rids)
                               WHEN (t.visibility & :visibility_user)
                                    THEN tuo.user_id = :uid
                               ELSE 0
                          END

              -- group by task id to eliminate duplicates
              GROUP BY    t.task_id
              ORDER BY    t.created DESC";

  $args = array(
    ':from' => $from,
    ':to'   => $to,
    ':rids' => array_keys($roles),
    ':uid'  => $uid,
    ':state_completed' => taskit\Task::STATE_COMPLETED,
    ':visibility_user' => taskit\Task::VISIBILITY_USER,
    ':visibility_role' => taskit\Task::VISIBILITY_ROLE,
  );

  $run_query = "SELECT  t.task_id, t.type FROM taskit t";
  $run_query .= $query;
  if ($page) {
    $page = $page * TASKIT_PER_PAGE;
    $results = db_query($run_query, $page, TASKIT_PER_PAGE, $args);
  }
  else {
    $results = db_query_range($run_query, 0, TASKIT_PER_PAGE, $args);
  }
  return array('result' => $results);
}

/*----------------------------------------------------------------------------
      HELPERS
----------------------------------------------------------------------------*/

/**
 * Returns an array of role ids sorted from highest to lowest access.
 * @return array List of role ids.
 */
function taskit_role_priority() {
  // returns list of roles in the order they're sorted on
  // admin/people/permissions/roles, which is exactly what we need
  $roles = user_roles();

  // remove anonymous and authenticated roles
  unset($roles[1], $roles[2]);

  return $roles;
}

/**
 * Builds time intervals for task grouping/filtering.
 */
function taskit_time_intervals() {
  $grouping = variable_get('taskit_grouping');

  if ($grouping == 'date') {
    $today_12am = mktime(00, 00, 00, date('m', REQUEST_TIME), date('d', REQUEST_TIME), date('Y', REQUEST_TIME));
    $yesterday_12am = strtotime('-1 day', $today_12am);
    $prior_12am = strtotime('-2 days', $today_12am);

    $intervals = array();

    $intervals[] = array(
      'name' => 'today',
      'from' => $today_12am,
      'to' => REQUEST_TIME,
    );

    $intervals[] = array(
      'name' => 'yesterday',
      'from' => $yesterday_12am,
      'to' => $today_12am,
    );

    $intervals[] = array(
      'name' => 'prior',
      'from' => $prior_12am,
      'to' => $yesterday_12am,
    );

    $intervals[] = array(
      'name' => 'older',
      'from' => 0,
      'to' => $prior_12am,
    );
  }
  else {
    $intervals[] = array(
      'name' => '',
      'from' => 0,
      'to' => time(),
    );
  }

  return $intervals;
}

/**
 * Experimental Zebra generator
 * $id - unique id per zebra items set
 */
function taskit_zebra($id) {
  $data = &drupal_static(__FUNCTION__);
  
  if (is_null($data)) {
    $data = array();
  }
  
  $zebra = array(
    'odd' => 'even',
    'even' => 'odd'
  );
  
  if (!isset($data[$id])) {
    $data[$id] = 'even';
  }
  
  return $data[$id] = $zebra[$data[$id]];
}