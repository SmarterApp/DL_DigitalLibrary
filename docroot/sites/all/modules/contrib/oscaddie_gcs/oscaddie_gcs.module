<?php

/**
 * @file
 * Primary file that contains the osCaddie GCS functionality.
 */

// The minimum version number for the library.
define('OSCADDIE_GCS_MINIMUM_VERSION', '1.1.1');
// The save button text for the admin form.
define('OSCADDIE_GCS_ADMIN_SUBMIT_BUTTON', 'Save Configuration');
// The test button text for the admin form.
define('OSCADDIE_GCS_ADMIN_TEST_CONNECTION_BUTTON', 'Test Connection');
// The google API domain.
define('OSCADDIE_GCS_API_DOMAIN', 'storage.googleapis.com');
// The github URL to the API download.
define('OSCADDIE_GCS_GITHUB_LINK', 'https://github.com/google/google-api-php-client');
// The online drupal documentation link.
define('OSCADDIE_GCS_ONLINE_DOCUMENTATION_LINK', 'tobecontinued');
// The provided google key.
define('OSCADDIE_GCS_PROVIDED_KEY', 'notasecret');

/**
 * Implements hook_menu().
 */
function oscaddie_gcs_menu() {
  $items = array();

  $items['admin/config/media/oscaddie_gcs'] = array(
    'title' => 'osCaddie - Google Cloud Storage',
    'description' => 'Configure Google credentials and settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oscaddie_gcs_admin'),
    'access arguments' => array('administer oscaddie gcs'),
    'file' => 'oscaddie_gcs.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function oscaddie_gcs_help($path, $arg) {
  switch ($path) {
    case 'admin/config/media/oscaddie_gcs':
      return '<p>' . t("The osCaddie - Google Cloud Storage module allows for files to
      be uploaded and downloaded from Googles Cloud Storage. This
      administration page allows you to enter your connection
      details and test the connection.") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function oscaddie_gcs_permission() {
  return array(
    'administer oscaddie gcs' => array(
      'title' => t('Administer osCaddie - Google Cloud Storage'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function oscaddie_gcs_libraries_info() {
  $library_info = array(
    'google-api-php-client' => array(
      'title' => 'Google SDK for PHP',
      'vendor url' => 'https://github.com/google/google-api-php-client',
      'download url' => 'https://github.com/google/google-api-php-client/archive/master.zip',
      'version arguments' => array(
        'file' => 'src/Google/Client.php',
        'pattern' => '/const LIBVER = "(\d\.\d\.\d)";/',
        'lines' => 40,
        'cols' => 80,
      ),
      'files' => array(
        'php' => array(
          'src/Google/Client.php',
          'src/Google/Service/Storage.php',
        ),
      ),
    ),
  );

  return $library_info;
}

/**
 * Implements hook_stream_wrappers().
 *
 * Create a stream wrapper for osCaddie GCS.
 */
function oscaddie_gcs_stream_wrappers() {
  return array(
    'gs' => array(
      'name' => 'osCaddie - Google Cloud Storage',
      'class' => 'OSCaddieGCSStreamWrapper',
      'description' => t('osCaddie - Google Cloud Storage'),
    ),
  );
}

/**
 * Implements hook_file_download().
 *
 * Prevents users from trying to download
 * the p12 key and/or PEM key.
 */
function oscaddie_gcs_file_download($uri) {
  if (strpos($uri, 'oscaddie_gcs') !== FALSE) {
    return -1;
  }
  return NULL;
}

/**
 * Tests the connection to the google bucket.
 *
 * @param string $version
 *   The version number for the library.
 *
 * @return array
 *   The response coming back from the connection.
 */
function oscaddie_gcs_test_connection() {
  $oscaddie_gcs_service_account_name = variable_get('oscaddie_gcs_service_account_name');
  $oscaddie_gcs_key_file_path = variable_get('oscaddie_gcs_public_key_file_path');
  $oscaddie_gcs_bucket_name = variable_get('oscaddie_gcs_bucket_name');

  $response = oscaddie_gcs_connect($oscaddie_gcs_service_account_name, $oscaddie_gcs_key_file_path, $oscaddie_gcs_bucket_name);
  return $response;
}

/**
 * Connect to the bucket using the beta library.
 *
 * @param string $oscaddie_gcs_service_account_name
 *   Google service account name.
 * @param string $oscaddie_gcs_key_file_path
 *   P12 key path.
 * @param string $oscaddie_gcs_bucket_name
 *   Bucket name.
 *
 * @return array
 *   Returns an array with access token and bucket information, or empty.
 */
function oscaddie_gcs_connect($oscaddie_gcs_service_account_name, $oscaddie_gcs_key_file_path, $oscaddie_gcs_bucket_name) {
  try {
    $client = new Google_Client();
    // Replace this with your application name.
    $client->setApplicationName($oscaddie_gcs_service_account_name);
    // Replace this with the service you are using.
    $service = new Google_Service_Storage($client);
    // This file location should point to the private key file.
    $key = file_get_contents($oscaddie_gcs_key_file_path);
    $cred = new Google_Auth_AssertionCredentials(
    // Replace this with the email address from the client.
      $oscaddie_gcs_service_account_name,
      // Replace this with the scopes you are requesting.
      array('https://www.googleapis.com/auth/devstorage.read_write'),
      $key
    );

    $client->setAssertionCredentials($cred);
    if ($client->getAuth()->isAccessTokenExpired()) {
      $client->getAuth()->refreshTokenWithAssertion($cred);
    }
    $access_token = $client->getAccessToken();
    $bucket_info = $service->buckets->get($oscaddie_gcs_bucket_name);
    return array('bucket' => $bucket_info, 'access_token' => $access_token);
  } catch (Exception $e) {
    watchdog_exception('oscaddie_gcs', $e);
  }
  return array();
}
