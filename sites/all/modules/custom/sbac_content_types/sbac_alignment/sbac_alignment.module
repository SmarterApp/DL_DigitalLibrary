<?php

include_once 'sbac_alignment.theme.inc';
/**
 * @file
 * Code for the SBAC Alignment feature.
 */

include_once 'sbac_alignment.features.inc';
/**
 * Variable Definition
 */
define('SBAC_ALIGNMENT_VOCAB_NAME', 'education_alignment');
define('SBAC_ALIGNMENT_MAX_DEPTH', 1);
define('SBAC_ALIGNMENT_MOD_PATH', drupal_get_path('module', 'sbac_alignment'));
/**
 * Implements hook_menu().
 *
 */
function sbac_alignment_menu(){
  $items = array();

  $items['ajax-terms'] = array(
    'title'           => 'AJAX',
    'page callback'   => 'sbac_alignment_ajax_terms_callback',
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
  );

  $items['ajax-alignment-breadcrumbs'] = array(
    'title'           => 'AJAX',
    'page callback'   => 'sbac_alignment_ajax_alignment_breadcrumbs_callback',
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
  );

  $items['devtest'] = array(
    'title'           => 'DEV',
    'page callback'   => 'sbac_alignment_devtest',
    'access arguments'=> array('admin'),
    'type'            => MENU_CALLBACK,
  );
  $items['devdelete'] = array(
    'title'           => 'DEV',
    'page callback'   => 'sbac_alignment_devdelete',
    'access arguments'=> array('access content'),
    'type'            => MENU_CALLBACK,
  );

  return $items;
}
/**
 *
 */
function sbac_alignment_devtest() {
  $edu_alignment_vocab_name = "education_alignment";
  $edu_alignment_vocab = taxonomy_vocabulary_machine_name_load($edu_alignment_vocab_name);
  $grade_terms = array();

  $read = true;
  $create_base = FALSE;
  $create = FALSE;
  $print = FALSE;

  if($read) {
  //get data
    $filename = '/var/www/sbac.dev/' . drupal_get_path('module', 'sbac_alignment') . '/data/ma.json';
    $handle = fopen($filename, "r");
    $contents = fread($handle, filesize($filename));
    fclose($handle);

    $json = drupal_json_decode($contents);
    dsm($json);
  }

  // create base terms
  if ($create_base) {
    // Add education alignment
    $terms = array(
      'English Language Arts' => array(
        'desc' => 'lorem ipsum',
        'children' => array(
          'KG - Kindergarten' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '1 - First Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '2 - Second Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '3 - Third Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '4 - Fourth Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '5 - Fifth Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '6 - Sixth Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '7 - Seventh Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '8 - Eight Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '9 - Ninth Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '10 - Tenth Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '11 - Eleventh Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
          '12 - Twelveth Grade' =>  array(
            'desc' => 'lorem ipsum',
          ),
        ),
      ),
    );
    sbac_alignment_add_terms($edu_alignment_vocab->vid, $terms);
  }

  //create terms
  if ($create) {
    // get grades tids
    $terms = taxonomy_get_tree($edu_alignment_vocab->vid, 0, 2, TRUE);
    foreach ($terms as $term) {
      if($term->depth == 1) {
        $name = explode('-', $term->name);
        $grade_terms[''+truncate($name[0])] = $term;
      }
    }

    //get data
    $filename = '/var/www/sbac.dev/' . drupal_get_path('module', 'sbac_alignment') . '/data/ela.json';
    $handle = fopen($filename, "r");
    $contents = fread($handle, filesize($filename));
    fclose($handle);

    $json = drupal_json_decode($contents);
    //dsm($json);

    // build tree
    $parent_tid = 0;
    foreach ($json as $term) {
      //dsm($term);
      $grade = truncate($term['fkGradeLevel']);

      // Root term. first set after the grade
      if ($term['treeLevel'] < 2) {
        $parent_tid = $grade_terms[$grade]->tid;
        sbac_alignment_add_term($edu_alignment_vocab->vid, $term, $parent_tid);
      }
      elseif($term['treeLevel'] >=2) {
        $parent_key = $grade . '|' . $term['fkParent'];
        $parent_tid = sbac_alignment_get_parent($parent_key);
        dsm(array($parent_key, $parent_tid));
        if (empty($parent_tid)) {
          //cannot find parent save to grade
          $parent_tid = $grade_terms[$grade]->tid;
        }

        sbac_alignment_add_term($edu_alignment_vocab->vid, $term, $parent_tid);
      }
      else{
        dsm('BAD TERM');dsm($term);
        //@TODO KS - need to output in case of error
      }
    }
  }

  if($print) {
    $terms = taxonomy_get_tree($edu_alignment_vocab->vid, 0, NULL, TRUE);
    dsm($terms);
  }

  return '';
}
/**
 *
 */
function sbac_alignment_get_parent($key) {
  $result = db_query('SELECT frfak.entity_id
    FROM {field_revision_field_alignment_key} frfak WHERE frfak.field_alignment_key_value = :field_alignment_key_value',
    array(':field_alignment_key_value' => $key));

  return $result->fetchObject()->entity_id;
}
/**
 *
 */
function sbac_alignment_devdelete() {
  $edu_alignment_vocab_name = "education_alignment";
  $edu_alignment_vocab = taxonomy_vocabulary_machine_name_load($edu_alignment_vocab_name);
  $grade_terms = array();

  $delete = TRUE;
  $print = TRUE;

  //delete terms
  if ($delete) {
    $terms = taxonomy_get_tree($edu_alignment_vocab->vid);
    foreach ($terms as $term) {
      if($term->depth > 1){
        taxonomy_term_delete($term->tid);
      }
    }
  }

  if($print) {
    $terms = taxonomy_get_tree($edu_alignment_vocab->vid, 0, NULL, TRUE);
    dsm($terms);
  }

  return '';
}

/**
 * AJAX Callback
 */
function sbac_alignment_ajax_alignment_breadcrumbs_callback() {
  $output = $terms = array();
  $parents = taxonomy_get_parents_all($_POST['tid']);
  $output['html'] = theme('alignment_breadcrumbs', array('terms' => array_reverse($parents)));
  print drupal_json_encode($output);
  exit;
}

/**
 * Helper Function
 */
function sbac_alignment_add_term($vid, $term, $parent_tid) {
  $parent = (object) array(
    'name' => $term['name'],
    'description' => $term['description'],
    'weight' => 0,
    'vid' => $vid,
    'parent' => $parent_tid,
    'field_alignment_grade' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $grade = truncate($term['fkGradeLevel']),
        ),
      ),
    ),
    'field_alignment_key' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $grade . '|' . $term['key']
        ),
      ),
    ),
    'field_alignment_publication' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $term['fkPublication']
        ),
      ),
    ),
    'field_alignment_shortname' => array(
      'und' => array(
        array(
          'format' => 'filtered_html',
          'value' => $term['shortName']
        ),
      ),
    ),
  );
  taxonomy_term_save($parent);
}
/**
 * Helper function
 *
 * Add terms into the vocab.
 */
function sbac_alignment_add_terms ($vid, $terms, $parent_tid = 0) {
  foreach($terms as $term => $data) {

    $parent = (object) array(
      'name' => $term,
      'description' => $data['desc'],
      'weight' => 0,
      'vid' => $vid,
      'parent' => $parent_tid,
    );
    taxonomy_term_save($parent);

    if (isset($data['children']) && !empty($data['children'])) {
      sbac_alignment_add_terms($vid, $data['children'], $parent->tid);
    }
  }
}
/**
 * AJAX Callback
 */
function sbac_alignment_ajax_terms_callback() {
  $subject_array = $output_array = array();
  $vocab = taxonomy_vocabulary_machine_name_load(SBAC_ALIGNMENT_VOCAB_NAME);
  $parent = taxonomy_term_load($_POST['parent']);
  if(isset($_POST['remove'])) {
    $temp = array_shift(taxonomy_get_parents($parent->tid));
    if(empty($temp)) {
      $parent->tid = 0;
    }
    else {
      $parent = $temp;
    }
  }

  $output_array['parent'] = $parent;
  $terms = taxonomy_get_tree($vocab->vid, $parent->tid, SBAC_ALIGNMENT_MAX_DEPTH);

  $output_array['depth'] = sbac_alignment_term_depth($parent->tid);
  $output_array['tids'] = array();
  foreach ($terms as $term) {
    $output_array['tids'][] = $term;
    $children = taxonomy_get_children($term->tid);
    $output_array['children'][] = $children;

    $options = array(
      'attributes' => array(
        'id' => 'term-' . $term->tid,
        'class' => 'sbac-custom-term button',
        'tid' => $term->tid,
      ),
      'html' => TRUE,
    );
    $subject_array[] = l($term->name, '#', $options);
  }

  $output_array['tids_count'] = count($output_array['tids']);

  $output .= theme('alignment_tags', array('terms' => $terms));
  $output_array['html'] = $output;

  print drupal_json_encode($output_array);
  exit;
}
/**
 *
 */
function sbac_alignment_term_depth($tid) {
  $parent = db_query("SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = :tid", array(':tid' => $tid))->fetchField();
  if($parent == 0) {
    return 1;
  }else  {
    return 1+sbac_alignment_term_depth($parent);
  }
}
/**
 * Implements hook_update_projects_alter().
 *
 * @param $projects
 */
function sbac_alignment_update_projects_alter(&$projects) {
  unset($projects['sbac_alignment']);
}
/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function sbac_alignment_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'alignment_node_form') {
    $form['field_education_alignment']['#attributes']['class'][] = 'standard';
    //$form['field_education_alignment']['#theme'] = 'alignment_container';

    $vocab = taxonomy_vocabulary_machine_name_load(SBAC_ALIGNMENT_VOCAB_NAME);
    $terms = taxonomy_get_tree($vocab->vid, 0, SBAC_ALIGNMENT_MAX_DEPTH);

    $form['alignment_breadcrumb'] = array(
      '#type' => 'markup',
      '#markup' => '',
      '#prefix' => '<div class="alignment-breadcrumb">',
      '#suffix' => '</div>',
    );

    $form['alignment_filter'] = array(
      '#type' => 'markup',
      '#markup' => theme('alignment_tags', array('terms' => $terms)),
      '#prefix' => '<div class="alignment-filter">',
      '#suffix' => '</div>',
    );

    $form['#attached'] = array(
      'css' => array(
        SBAC_ALIGNMENT_MOD_PATH . '/css/alignment.css',
      ),
    );

    //if (arg(0) == 'sbac_resource' && arg(1) == 'ajax') {//@TODO KS - rmeove
      global $user;
      /* let administrator see the entire form */
      //if (!in_array('administrator', $user->roles)) { //@TODO KS - rmeove
        $form['additional_settings']['#access'] = FALSE;
        $form['comment_settings']['#access'] = FALSE;
        $form['menu']['#access'] = FALSE;
        $form['path']['#access'] = FALSE;
        $form['revision_information']['#access'] = FALSE;
        $form['title']['#access'] = FALSE;
        $form['field_resource_reference']['#access'] = FALSE;
      //}//@TODO KS - rmeove

      $form['title']['#required'] = FALSE;
      $form['actions']['cancel'] = array(
        '#type' => 'submit',
        '#value' => 'Cancel',
        '#weight' => 6,
      );
      $form['actions']['submit']['#value'] = 'Add Alignment to Resource';
      /* make sure our handler fires first before default handler */
      array_unshift($form['actions']['submit']['#submit'], 'sbac_alignment_form_submit_handler');
    //}//@TODO KS - rmeove
  }
}
/**
 * Implements hook_form_submit_handler()
 *
 * @param $form
 * @param $form_state
 */
function sbac_alignment_form_submit_handler(&$form, &$form_state) {
  if (isset($_GET['nid'])) {
    /* set title (hidden but required) to field-notation value as per wireframe */
    $form_state['values']['title'] = 'VIEW - ' . $_GET['nid']; //@TODO KS - Get dot notation from the tags
    /* set resource-ref (hidden but required) to parent node-id */
    $form_state['values']['field_resource_reference']['und'][0]['target_id'] = $_GET['nid'];
  }
}














































//
